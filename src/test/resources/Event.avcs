{
  "type" : "record",
  "name" : "MyEvent",
  "namespace" : "com.mycompany.global",
  "doc" : "Root for all Events",
  "fields" : [ {
    "name" : "header",
    "type" : {
      "type" : "record",
      "name" : "CommonHeader",
      "doc" : "Common header for all events sent\r\n        Consumed by: Storm filtering, hadoop readers...",
      "fields" : [ {
        "name" : "schemaRevision",
        "type" : "string",
        "doc" : "NEVER change or put any other field before schemaRevision",
        "default" : "5.0.0.1064"
      }, {
        "name" : "eventTimeStamp",
        "type" : "long",
        "doc" : "The time this event was generated by the platform",
        "default" : -1
      }, {
        "name" : "eventUniqueId",
        "type" : [ "null", "string" ],
        "doc" : "A global unique identifier for events",
        "default" : null
      }, {
        "name" : "globalSessionId",
        "type" : [ "null", "string" ],
        "doc" : "A global unique identifier for the of the main participant session",
        "default" : null
      }, {
        "name" : "globalUserId",
        "type" : [ "null", "string" ],
        "doc" : "A global unique identifier of the main participant (visitor, agent, etc...) of this event",
        "default" : null
      }, {
        "name" : "accountId",
        "type" : [ "null", "string" ],
        "doc" : "Client identification (account/site id)",
        "default" : null
      }, {
        "name" : "encrypted",
        "type" : {
          "type" : "enum",
          "name" : "EncryptTypeEnum",
          "symbols" : [ "NONE", "FULL" ]
        },
        "doc" : "Is the body of this event encrypted",
        "default" : "NONE"
      }, {
        "name" : "platform",
        "type" : {
          "type" : "enum",
          "name" : "PlatformEnum",
          "doc" : "Interaction Platform",
          "symbols" : [ "DEFAULT", "MONITORING", "APPSERVER", "STORM", "HADOOP", "INSIGHTS", "COBROWSE", "AMS", "IP" ]
        },
        "doc" : "Possible platforms: Monitoring(Shark), AppServer",
        "default" : "DEFAULT"
      }, {
        "name" : "component",
        "type" : {
          "type" : "enum",
          "name" : "ComponentEnum",
          "doc" : "List of all Component (services) \r\n        AMS = aysnc messaging service platform\r\n        AMS_TRANSPORT_LAYER: handle connections\r\n        AMS_CM_ACD: Automatic Agent selection of the AMS\r\n        AMS_CM_GENERAL: conversation manager of the AMS\r\n        AMS_MS_PUBSUB: pubsub of the message distribution\r\n        AMS_MS_QUERY: query of MS for messages\r\n        AMS_MS_GENERAL: MCCA protocol messages handler of the AMS\r\n        AMS_USER_PROFILE: manage users in AMS\r\n\r\n        Produced by: every system\r\n        consumed by:",
          "symbols" : [ "UNKNOWN", "APPMONITORING", "APPENGAGEMENT", "TICKETING", "KNOWLEDGEBASE", "MONITORING", "SEGMENTOR", "EXTRACTOR", "DECIDER", "ENGAGER", "TRACKER", "VOICE", "EVENT_PRODUCER", "BILLING", "SENTIMENT_ANALYSIS", "INSIGHTS", "HOT_TOPICS", "TOPOLOGY", "COBROWSE", "AMS_TRANSPORT_LAYER", "AMS_CM_ACD", "AMS_CM_GENERAL", "AMS_MS_PUBSUB", "AMS_MS_QUERY", "AMS_MS_GENERAL", "AMS_USER_PROFILE", "AMS_IMAGE_UPLOAD", "AMS_LOGIN", "IP_FRONTEND" ]
        },
        "doc" : "The Application component that generated  this event: Segmentor, Decider, Chat, etc...",
        "default" : "UNKNOWN"
      }, {
        "name" : "eventType",
        "type" : {
          "type" : "enum",
          "name" : "EventTypeEnum",
          "doc" : "Events",
          "symbols" : [ "UNKNOWN", "ExternalInteractionEvent", "ActivityInfoEvent", "ConnectivityInfoEvent", "EventsLimitReachedEvent", "SessionEndSuspectedEvent", "EnterSiteEvent", "PageViewEvent", "LeaveSiteEvent", "StateChangeEvent", "VisitorStateSnapshotEvent", "GoalAchievedEvent", "PurchaseEvent", "VisitorErrorEvent", "CustomerInfoEvent", "PersonalInfoEvent", "SearchContentEvent", "EligibleForCampaignEvent", "WinningCampaignEvent", "AvailabilityCheckEvent", "ImpressionShowEvent", "ImpressionTimeoutEvent", "ImpressionCloseEvent", "ImpressionAcceptEvent", "EngagementExpandedEvent", "ImpressionExpandedEvent", "ControlEvent", "BTScoreEvent", "ButtonEvent", "CollaborationEventLogger", "ContentClickEvent", "ContentImpressEvent", "ConversionEvent", "EngagementEndEvent", "EngagementSetEndEvent", "EngagementStartEvent", "HotLeadEvent", "ImpressionDisplayEvent", "ImpressionResponseEvent", "InteractionDataEvent", "InteractionStartEvent", "LiveEngageEngagementEvent", "LiveEngageImpressionEvent", "LiveEngageSegmentationEvent", "LogFileCloseEvent", "LogFileOpenEvent", "NREEvent", "PLine", "PPage", "PServStartEvent", "PSiteActivityEvent", "PSiteDataEvent", "PTScoreEvent", "PUDEValue", "LineStatusEvent", "PVisitorChatStartEvent", "PVisitorLoginEvent", "PVisitorLogoutEvent", "RepActivityEvent", "RepSessionEvent", "SurveyAnswerEvent", "SurveyEvent", "VisitorEventObj", "VisitorRelocateEvent", "ChatRepsObj", "CobrowseEventObj", "ContactUDEValue", "DirectRuleEvent", "FeatureUsageEvent", "KBAttachmentDownloadEvent", "KBCategoryBrowseEvent", "KBDocumentFeedbackEvent", "KBEndSessionEvent", "KBEscalateEvent", "KBEvent", "KBFAQEvent", "KBFileDetailsEvent", "KBSearchEvent", "KBStartSessionEvent", "LiveEngageApplicationEvent", "MessageUDEValue", "NetworkHotLeadEvent", "NetworkProfileRequestEvent", "NetworkProfileUsageEvent", "FPCFallbackEvent", "PMoveSiteEvent", "PRptTargetEvent", "ReportEvent", "ReportInteractionEvent", "ReportKBEvent", "ReportNREEvent", "ReportRepEvent", "ReportSessionEvent", "ReportSiteEvent", "ReportsServertUsageEvent", "ReportSystemEvent", "ReportTestEvent", "ReportTicketEvent", "ReportTrafficEvent", "ReportUsageEvent", "ReportVisitorEvent", "ReportVoiceEvent", "RuleEvent", "ScoreFloorEvent", "TicketEvent", "TicketGloablStatusEvent", "TicketUDEValue", "VisitorSegmentEvent", "VisitorStateEvent", "ChannelQueueEvent", "ActiveSiteInfoEvent", "AuditControlEvent", "TagVersionDetectedEvent", "EligibilityEvent", "EligibilityAfterScoringEvent", "AvailableEngagementsEvent", "PTScoringRequestEvent", "PTScoringDataEvent", "PTScoreFloorEvent", "PTSmartAllocationResultEvent", "CartStatusEvent", "ViewedProductEvent", "LeadEvent", "PostedEDREvent", "OffsiteEngagementEvent", "OEAEvent", "OENAEvent", "OEAcceptedEvent", "OffsiteEngagementRequestExpiredEvent", "OffsiteEngRedirectRequestedEvent", "OffsiteEngRedirectResultEvent", "MarketingCampaignInfoEvent", "SentimentAnalysisEvent", "InsightsEvent", "ServiceActivityEvent", "CustomerTypeExtractedEvent", "CustomerStatusExtractedEvent", "ChatTopicEvent", "CoBrowseSessionStartedEvent", "CoBrowseSessionEndedEvent", "CoBrowseSessionInteractiveEvent", "CoBrowseSessionPageViewEvent", "CoBrowseSessionErrorEvent", "WRPALogRolloverEvent", "IdentityCorrelationEvent", "ConversationRequestEvent", "ConsumerRegistrationEvent", "ConversationInteractiveEvent", "TransferEvent", "SkillChangeEvent", "ConversationEndEvent", "ParticipantLeaveEvent", "ParticipantAddEvent", "MessagePublishEvent", "SatisfactionEvent", "UserProfileUpdateEvent", "UserAuthenticationEvent", "SetAgentStateEvent", "SetAgentIntensityEvent", "SetAgentRingResponseEvent", "MessagingQueueStateEvent", "ConsumerActiveEvent", "MessageStatusEvent", "EffectiveTtrEvent", "UpdateTtrEvent", "UpdateDelayEvent", "UpdateManualEttrEvent", "LimitReachedEvent", "PCustomerInfoEvent", "PPersonalInfoEvent", "PUserAuthenticationEvent", "LeSecureFormErrorEvent", "LeSecureFormSubmittedEvent", "LeSecureFormAbortedEvent", "LeSecureFormViewedEvent", "LeSecureFormReceivedEvent", "LeSecureFormSendEvent", "ChatCenterRoutingDecisionEvent", "ChatCenterChannelQueueEvent", "VisitorQueueVarsParamsAuditEvent", "PDTopologyAuditingEvent", "ConversationContinuityEvent", "CargoEvent", "ConversationArchiveEvent", "ConversationSummaryEvent", "RichContentEvent", "CartStatusEventEnriched", "PurchaseEventEnriched", "ViewedProductEventEnriched", "ServiceActivityEventEnriched", "VisitorErrorEventEnriched", "LeadEventEnriched", "CustomerInfoEventEnriched", "MarketingCampaignInfoEventEnriched", "PersonalInfoEventEnriched", "VisitorStateSnapshotEventEnriched", "SearchContentEventEnriched", "UserProfileUpdateEventEnriched" ]
        },
        "doc" : "The EventType, note: the actual body type could be different...",
        "default" : "UNKNOWN"
      } ]
    },
    "doc" : "Common Header of the event",
    "default" : null
  }, {
    "name" : "participants",
    "type" : {
      "type" : "array",
      "items" : {
        "type" : "record",
        "name" : "Participant",
        "doc" : "Header Data for participants in events: Visitor, agent etc...\n        Mapped using Enum for easy access for a specific participant type.",
        "fields" : [ {
          "name" : "participant",
          "type" : {
            "type" : "enum",
            "name" : "ParticipantEnum",
            "doc" : "Known Logical Participants\n        Consumer used by the AMS(aysnc messaging service)",
            "symbols" : [ "NONE", "VISITOR", "AGENT", "MODERATOR", "APPLICATION", "SITE", "CONSUMER", "IP_PARTICIPANT" ]
          },
          "default" : "NONE"
        }, {
          "name" : "header",
          "type" : {
            "type" : "record",
            "name" : "ParticipantsHeader",
            "doc" : "Header Data for participants in events: Visitor, agent etc...",
            "fields" : [ {
              "name" : "participantDetails",
              "type" : [ "null", {
                "type" : "record",
                "name" : "VisitorHeader",
                "doc" : "Specific header added for Visitor events",
                "fields" : [ {
                  "name" : "visitorId",
                  "type" : [ "null", "string" ],
                  "doc" : "Global Visitor ID",
                  "default" : null
                }, {
                  "name" : "sessionId",
                  "type" : [ "null", "string" ],
                  "doc" : "Global Session ID",
                  "default" : null
                }, {
                  "name" : "consumerIdpId",
                  "type" : [ "null", "string" ],
                  "doc" : "Consumer Idp ID",
                  "default" : null
                }, {
                  "name" : "sessionStartTime",
                  "type" : "long",
                  "doc" : "The time this session started in milliseconds from 1970, UTC",
                  "default" : -1
                }, {
                  "name" : "stateRevision",
                  "type" : "long",
                  "doc" : "The revision id of the visitor state - for reconstructing the exact visitor state when this event was fired.",
                  "default" : -1
                }, {
                  "name" : "eventSeq",
                  "type" : "long",
                  "doc" : "The sequence number of the event in the current visitor session .",
                  "default" : -1
                }, {
                  "name" : "siteControlGroupFlag",
                  "type" : {
                    "type" : "enum",
                    "name" : "ControlGroupEnum",
                    "doc" : "Control Group Enum",
                    "symbols" : [ "NA", "CONTROL", "TEST" ]
                  },
                  "doc" : "",
                  "default" : "NA"
                }, {
                  "name" : "sourceLocation",
                  "type" : {
                    "type" : "enum",
                    "name" : "SourcesAppsEnum",
                    "symbols" : [ "NA", "GOOGLE", "APPSERVER" ]
                  },
                  "doc" : "The origin of the Session: Google, AppServer etc...",
                  "default" : "NA"
                }, {
                  "name" : "context",
                  "type" : [ "null", "string" ],
                  "doc" : "Extended contexts of event, like EngagementContext, PageContext etc...",
                  "default" : null
                }, {
                  "name" : "deviceFamilyType",
                  "type" : [ "null", {
                    "type" : "enum",
                    "name" : "DeviceFamilyType",
                    "symbols" : [ "NA", "DESKTOP", "TABLET", "MOBILE" ]
                  } ],
                  "doc" : "Device Family associated with the visitor *",
                  "default" : null
                }, {
                  "name" : "agentGroupId",
                  "type" : [ "null", "long" ],
                  "doc" : "Depricated Agent group ID",
                  "default" : null
                }, {
                  "name" : "ConsumerIdpId",
                  "type" : [ "null", "string" ],
                  "doc" : "",
                  "default" : null
                } ]
              }, {
                "type" : "record",
                "name" : "AgentHeader",
                "doc" : "Used by AMS. define the agent in a call center.",
                "fields" : [ {
                  "name" : "agentId",
                  "type" : [ "null", "string" ],
                  "doc" : "Global Agent ID - provided by AppServer today",
                  "default" : null
                }, {
                  "name" : "sessionId",
                  "type" : [ "null", "string" ],
                  "default" : null
                }, {
                  "name" : "agentName",
                  "type" : [ "null", "string" ],
                  "default" : null
                }, {
                  "name" : "userDetails",
                  "type" : [ "null", {
                    "type" : "record",
                    "name" : "UserDetails",
                    "doc" : "",
                    "fields" : [ {
                      "name" : "userId",
                      "type" : "string",
                      "doc" : "Global User ID",
                      "default" : ""
                    }, {
                      "name" : "connections",
                      "type" : {
                        "type" : "array",
                        "items" : {
                          "type" : "record",
                          "name" : "ConnectionDetails",
                          "doc" : "",
                          "fields" : [ {
                            "name" : "appName",
                            "type" : "string",
                            "doc" : "We have a few: ConsumerApp, tMobileApp, WebAgent, BrandAgent",
                            "default" : ""
                          }, {
                            "name" : "appVersion",
                            "type" : [ "null", "string" ],
                            "doc" : "The hosted application version. For example: v1.5",
                            "default" : null
                          }, {
                            "name" : "deviceFamilyType",
                            "type" : [ "null", "DeviceFamilyType" ],
                            "doc" : "The device family this User is using: DESKTOP,MOBILE,TABLET",
                            "default" : null
                          }, {
                            "name" : "userAgent",
                            "type" : [ "null", "string" ],
                            "doc" : "DEPRECATED! fields were never populated and now this property is deprecated",
                            "default" : null
                          }, {
                            "name" : "IP",
                            "type" : [ "null", "string" ],
                            "doc" : "Current connection user IP",
                            "default" : null
                          }, {
                            "name" : "OS",
                            "type" : [ "null", {
                              "type" : "enum",
                              "name" : "DeviceOSType",
                              "symbols" : [ "NA", "WINDOWS", "MAC_OSX", "LINUX", "IOS", "ANDROID" ]
                            } ],
                            "doc" : "Current connection device type: WINDOWS, MAC_OSX, LINUX, IOS, ANDROID",
                            "default" : null
                          }, {
                            "name" : "osVersion",
                            "type" : [ "null", "string" ],
                            "doc" : "The operating system version, and distribution type (if relevant).\n        Examples: Ubuntu 15.00",
                            "default" : null
                          }, {
                            "name" : "integration",
                            "type" : [ "null", "string" ],
                            "doc" : "The integration type: mobile-sdk, web-sdk, brand-sdk",
                            "default" : null
                          }, {
                            "name" : "integrationVersion",
                            "type" : [ "null", "string" ],
                            "doc" : "The version of the integration",
                            "default" : null
                          }, {
                            "name" : "timeZone",
                            "type" : [ "null", "string" ],
                            "doc" : "The time zone. For example: \"America/Los_Angeles\"",
                            "default" : null
                          }, {
                            "name" : "browser",
                            "type" : [ "null", "string" ],
                            "doc" : "The browser or hosted application and version.\n        For example: chrome, firefox",
                            "default" : null
                          }, {
                            "name" : "browserVersion",
                            "type" : [ "null", "string" ],
                            "doc" : "Detailed version info of the user agent (browser or host-application)\n        For example: 11",
                            "default" : null
                          } ]
                        }
                      },
                      "default" : null
                    } ]
                  } ],
                  "doc" : "all of user data available on the participant",
                  "default" : null
                }, {
                  "name" : "userType",
                  "type" : [ "null", "string" ],
                  "doc" : "UserType id. 3 user types available for agent today: 0-System, 1-Human, 2-Bot",
                  "default" : null
                }, {
                  "name" : "agentRole",
                  "type" : [ "null", {
                    "type" : "enum",
                    "name" : "AgentRoleEnum",
                    "doc" : "Agent Role used as part of the Agent header.\n         We define the role as:\n         Agent: normal agent in a call center\n         AGENTMANAGER: Agent manager.",
                    "symbols" : [ "NA", "AGENT", "AGENTMANAGER" ]
                  } ],
                  "doc" : "AMS Agent role",
                  "default" : null
                }, {
                  "name" : "permission",
                  "type" : [ "null", "string" ],
                  "doc" : "AMS user permission\n        Possible values:\n        'ASSIGNED_AGENT' - The agent that is the owner of the conversation\n        'AGENT' - The agent that is participating in conversation, but is not an owner of it\n        'AGENT_MANAGER' - The agent manager that is participating in the conversation\n        'READER' - Agent or Agent Manager that is listening to conversation without ability to send messages",
                  "default" : null
                }, {
                  "name" : "agentGroupId",
                  "type" : [ "null", "long" ],
                  "doc" : "Agent group ID",
                  "default" : null
                } ]
              }, {
                "type" : "record",
                "name" : "ConsumerHeader",
                "doc" : "User header as it is used by AMS",
                "fields" : [ {
                  "name" : "consumerName",
                  "type" : [ "null", "string" ],
                  "doc" : "Consumer name",
                  "default" : null
                }, {
                  "name" : "userDetails",
                  "type" : [ "null", "UserDetails" ],
                  "doc" : "all of user data available on the participant",
                  "default" : null
                } ]
              } ],
              "default" : null
            } ]
          },
          "default" : null
        } ]
      }
    },
    "doc" : "Logical entity details participating in this event - Visitor, Agent, etc...",
    "default" : null
  }, {
    "name" : "platformSpecificHeader",
    "type" : {
      "type" : "record",
      "name" : "PlatformHeader",
      "doc" : "Union wrapper for all Platform specific data headers\r\n      produced by:\r\n      consumed by:",
      "fields" : [ {
        "name" : "header",
        "type" : [ "null", {
          "type" : "record",
          "name" : "MonitoringSpecificHeader",
          "doc" : "Monitoring Header Data\n        produced by: Shark",
          "fields" : [ {
            "name" : "node",
            "type" : [ "null", "string" ],
            "doc" : "The local shark node host name",
            "default" : null
          }, {
            "name" : "clusterId",
            "type" : [ "null", "string" ],
            "doc" : "Shark cluster id",
            "default" : null
          }, {
            "name" : "version",
            "type" : [ "null", "string" ],
            "doc" : "The local shark node version",
            "default" : null
          }, {
            "name" : "stateConstructVersion",
            "type" : [ "null", "string" ],
            "doc" : "The state constructor algorithm version, used for reconstructing the state from stateChangeEvents",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "AppServerSpecificHeader",
          "doc" : "Specific data for the AppServer Platform\n        produced by: AppServer\n        consumed by:",
          "fields" : [ {
            "name" : "node",
            "type" : [ "null", "string" ],
            "default" : null
          }, {
            "name" : "logicalSessionId",
            "type" : [ "null", "string" ],
            "default" : null
          }, {
            "name" : "version",
            "type" : [ "null", "string" ],
            "default" : null
          }, {
            "name" : "logicalSessionStartTime",
            "type" : "long",
            "default" : -1
          }, {
            "name" : "sessionEndedInd",
            "type" : "boolean",
            "default" : false
          }, {
            "name" : "engagementSet",
            "type" : "long",
            "default" : -1
          }, {
            "name" : "engagementSequence",
            "type" : "long",
            "default" : -1
          }, {
            "name" : "originalEventType",
            "type" : [ "null", "string" ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "CoBrowseSpecificHeader",
          "doc" : "Specific data for the (synchronite) CoBrowse and CoApp Service.\n\t    produced by: CoBrowse and CoApp\n\t    consumed by: Reporting and billing systems",
          "fields" : [ {
            "name" : "node",
            "type" : [ "null", "string" ],
            "doc" : "CoBrowse node/server which triggered the event",
            "default" : null
          }, {
            "name" : "coBrowseSessionId",
            "type" : [ "null", "string" ],
            "doc" : "CoBrowse internal unique session ID",
            "default" : null
          }, {
            "name" : "version",
            "type" : [ "null", "string" ],
            "doc" : "CoBrowse system version",
            "default" : null
          }, {
            "name" : "userID",
            "type" : [ "null", "long" ],
            "doc" : "CoBrowse system userID",
            "default" : null
          }, {
            "name" : "ticket",
            "type" : [ "null", "string" ],
            "doc" : "CoBrowse system ticket ID (session ID within a shared CoBrowse session)",
            "default" : null
          }, {
            "name" : "serviceId",
            "type" : [ "null", "string" ],
            "doc" : "CoBrowse system service ID (identifier which matches agent and visitor in the case of 'standalone CoBrowse')",
            "default" : null
          }, {
            "name" : "chatId",
            "type" : [ "null", "string" ],
            "doc" : "",
            "default" : null
          }, {
            "name" : "context",
            "type" : {
              "type" : "enum",
              "name" : "CoBrowseSessionContext",
              "doc" : "",
              "symbols" : [ "UNKNOWN", "LEGACY", "ENGAGE", "STANDALONE" ]
            },
            "doc" : "The context in which the CoBrowse session is running (i.e. how was the CoBrowse session started)\n            @deprecated use sessionContext instead",
            "default" : "UNKNOWN"
          }, {
            "name" : "sessionContext",
            "type" : [ "null", "string" ],
            "doc" : "",
            "default" : null
          }, {
            "name" : "type",
            "type" : {
              "type" : "enum",
              "name" : "CoBrowseSessionType",
              "doc" : "The type of session, i.e. is it CoBrowsing (web based collaboration/interaction) or CoApp (app based collaboration/interaction)\n\t    COBROWSE: The session is conducted via CoBrowsing (web based collaboration/interaction)\n\t    COAPP:    The session is conducted via CoApp (app based collaboration/interaction)",
              "symbols" : [ "COBROWSE", "COAPP" ]
            },
            "doc" : "The type of session, i.e. is it CoBrowsing (web based collaboration/interaction) or CoApp (app based collaboration/interaction)",
            "default" : "COBROWSE"
          } ]
        }, {
          "type" : "record",
          "name" : "HadoopSpecificHeader",
          "doc" : "Header Data for Hadoop\n       produced by: Events originating from Hadoop MapReduce\n       consumed by:",
          "fields" : [ {
            "name" : "node",
            "type" : [ "null", "string" ],
            "default" : null
          }, {
            "name" : "version",
            "type" : [ "null", "string" ],
            "default" : null
          }, {
            "name" : "originalPlatformHeader",
            "type" : [ "null", "MonitoringSpecificHeader", "AppServerSpecificHeader", "CoBrowseSpecificHeader", {
              "type" : "record",
              "name" : "StormSpecificHeader",
              "doc" : "Header Data for Storm toplogies\n       produced by: Events originating from a Storm topology\n       consumed by:",
              "fields" : [ {
                "name" : "node",
                "type" : [ "null", "string" ],
                "default" : null
              }, {
                "name" : "version",
                "type" : [ "null", "string" ],
                "default" : null
              }, {
                "name" : "originalPlatformHeader",
                "type" : [ "null", "MonitoringSpecificHeader", "AppServerSpecificHeader", "CoBrowseSpecificHeader", {
                  "type" : "record",
                  "name" : "AMSSpecificHeader",
                  "doc" : "Specific data for the AMS Platform\n        produced by: AMS\n        Consumed by:",
                  "fields" : [ {
                    "name" : "node",
                    "type" : [ "null", "string" ],
                    "doc" : "Which AMS node triggered the event",
                    "default" : null
                  }, {
                    "name" : "version",
                    "type" : [ "null", "string" ],
                    "doc" : "AMS system version",
                    "default" : null
                  }, {
                    "name" : "userId",
                    "type" : [ "null", "string" ],
                    "doc" : "AMS internal system userId",
                    "default" : null
                  } ]
                } ],
                "doc" : "The specific Header of the originating event, that this event was created from",
                "default" : null
              } ]
            }, "AMSSpecificHeader" ],
            "doc" : "The specific Header of the originating event, that this event was created from",
            "default" : null
          } ]
        }, "StormSpecificHeader", "AMSSpecificHeader", {
          "type" : "record",
          "name" : "IpParticipantHeader",
          "fields" : [ {
            "name" : "userId",
            "type" : [ "null", "string" ],
            "doc" : "the IP participant ID",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "CargoSpecificHeader",
          "fields" : [ {
            "name" : "cargoEventType",
            "type" : [ "null", "string" ],
            "doc" : "event type of wrapped event",
            "default" : null
          }, {
            "name" : "cargoSchemaRevision",
            "type" : [ "null", "string" ],
            "doc" : "schema revision of wrapped event",
            "default" : null
          }, {
            "name" : "cargoTimestamp",
            "type" : "long",
            "doc" : "creation time of wrapped event",
            "default" : -1
          } ]
        }, {
          "type" : "record",
          "name" : "OfflineUpdaterSpecificHeader",
          "doc" : "Header Data for OfflineUpdate\n       produced by: Events Offline updater enirchment job.\n       consumed by: eng/msg history offline updater .",
          "fields" : [ {
            "name" : "engagementId",
            "type" : [ "null", "string" ],
            "doc" : "conversation or chat id *",
            "default" : null
          }, {
            "name" : "engagementStartTime",
            "type" : "long",
            "doc" : "conversation or chat id start time *",
            "default" : -1
          }, {
            "name" : "sourceEventUniqueId",
            "type" : [ "null", "string" ],
            "doc" : "source event unique id",
            "default" : null
          }, {
            "name" : "sourceEventTimeStamp",
            "type" : "long",
            "doc" : "The time this event was generated by the platform",
            "default" : -1
          }, {
            "name" : "interactionType",
            "type" : [ "null", {
              "type" : "enum",
              "name" : "ConversationInteractionTypeEnum",
              "doc" : "UMS Conversation Interaction type.\n       Used to distinguish between live chat & async messaging",
              "symbols" : [ "LIVE_CHAT", "ASYNC", "NA" ]
            } ],
            "doc" : "Interaction type used to distinguish between live chat & async messaging",
            "default" : null
          } ]
        } ],
        "default" : null
      } ]
    },
    "doc" : "Holding specific platform info as node name (machine) cluster Id etc...",
    "default" : null
  }, {
    "name" : "auditingHeader",
    "type" : [ "null", {
      "type" : "record",
      "name" : "AuditingHeader",
      "doc" : "Header Data for auditing purposes added for every event.\r\n        hostname - source identifier.\r\n        bulkId - time frame of a bulk of events sent.\r\n        sequenceId - auto incremented seq for every bulk sent.",
      "fields" : [ {
        "name" : "hostname",
        "type" : "string",
        "default" : ""
      }, {
        "name" : "bulkId",
        "type" : "long",
        "default" : -1
      }, {
        "name" : "sequenceId",
        "type" : "long",
        "default" : -1
      } ]
    } ],
    "doc" : "Auditing Header, Optional - adds data for auditing of the events flow in the platform",
    "default" : null
  }, {
    "name" : "metaDataHeader",
    "type" : [ "null", {
      "type" : "record",
      "name" : "MetaDataHeader",
      "doc" : "",
      "fields" : [ {
        "name" : "type",
        "type" : {
          "type" : "enum",
          "name" : "SDEType",
          "doc" : "The type of events this SDE was generated by:\n        * USER - Generated by/for the customer (customer events)\n        * INTERNAL - Generated by/for internal to the platform\n        * EXTERNAL - Generated by/for echo system\n        * UNKNOWN - Should not be used, it is for error cases only.",
          "symbols" : [ "UNKNOWN", "USER", "INTERNAL", "EXTERNAL" ]
        },
        "doc" : "",
        "default" : "UNKNOWN"
      }, {
        "name" : "appType",
        "type" : {
          "type" : "enum",
          "name" : "AppTypeEnum",
          "doc" : "",
          "symbols" : [ "UNKNOWN", "IVR", "WEB", "MOBILE", "OFFSITE" ]
        },
        "doc" : "The AppType this event originated from: WEB Site, IVR, MOBILE APP, OFFSITE Engagement",
        "default" : "UNKNOWN"
      }, {
        "name" : "authenticationMode",
        "type" : [ "null", {
          "type" : "enum",
          "name" : "AuthenticationMode",
          "doc" : "Header which describes the authentication method - Applicable for authentication events and related events",
          "symbols" : [ "UNKNOWN", "NONE", "SERVER" ]
        } ],
        "default" : null
      }, {
        "name" : "isAuthenticated",
        "type" : [ "null", "boolean" ],
        "doc" : "isAuthenticated - indicates whether the customer passed authentication",
        "default" : null
      }, {
        "name" : "rawMetadata",
        "type" : [ "null", "string" ],
        "doc" : "the metadata in string representation, so whatever component will able to parse it to own purpose",
        "default" : null
      }, {
        "name" : "metadataBody",
        "type" : [ "null", {
          "type" : "array",
          "items" : {
            "type" : "record",
            "name" : "MetadataBody",
            "doc" : "The metadata structured - metadata gives an additional information on the request",
            "fields" : [ {
              "name" : "botResponse",
              "type" : [ "null", {
                "type" : "record",
                "name" : "BotResponse",
                "doc" : "additional information received from bot",
                "fields" : [ {
                  "name" : "externalConversationId",
                  "type" : [ "null", "string" ],
                  "doc" : "conversation ID from bot's side",
                  "default" : null
                }, {
                  "name" : "businessCases",
                  "type" : [ "null", {
                    "type" : "array",
                    "items" : "string"
                  } ],
                  "doc" : "collection of business cases of the message, detected by bot",
                  "default" : null
                }, {
                  "name" : "intents",
                  "type" : [ "null", {
                    "type" : "array",
                    "items" : {
                      "type" : "record",
                      "name" : "Intent",
                      "doc" : "Topic of the consumer message figured out by the bot",
                      "fields" : [ {
                        "name" : "id",
                        "type" : [ "null", "string" ],
                        "doc" : "ID of the intent",
                        "default" : null
                      }, {
                        "name" : "name",
                        "type" : [ "null", "string" ],
                        "doc" : "name of the intent",
                        "default" : null
                      }, {
                        "name" : "confidence",
                        "type" : [ "null", "string" ],
                        "doc" : "lable describing the confidence level (LOW, MEDIUM, HIGH etc. )",
                        "default" : null
                      }, {
                        "name" : "confidenceScore",
                        "type" : [ "null", "double" ],
                        "doc" : "coefficient - how relevant the intent to the message)",
                        "default" : null
                      } ]
                    }
                  } ],
                  "doc" : "collection of intents of the message with it's relevance to the message",
                  "default" : null
                } ]
              } ],
              "doc" : "bot response additional data",
              "default" : null
            }, {
              "name" : "actionReason",
              "type" : [ "null", {
                "type" : "record",
                "name" : "ActionReason",
                "doc" : "A reason description for the action that has been taken",
                "fields" : [ {
                  "name" : "reason",
                  "type" : [ "null", "string" ],
                  "doc" : "the reason for the action has been taken - the action itself is the event this header belong to",
                  "default" : null
                }, {
                  "name" : "reasonId",
                  "type" : [ "null", "string" ],
                  "doc" : "the reason Id for the action has been taken",
                  "default" : null
                } ]
              } ],
              "doc" : "an action reason on action has been taken, for example escalation",
              "default" : null
            }, {
              "name" : "externalId",
              "type" : [ "null", {
                "type" : "record",
                "name" : "ExternalId",
                "doc" : "The action user trigger from RichContent message type",
                "fields" : [ {
                  "name" : "id",
                  "type" : [ "null", "string" ],
                  "doc" : "External id of the action was made",
                  "default" : null
                } ]
              } ],
              "doc" : "The action user trigger from RichContent message type",
              "default" : null
            } ]
          }
        } ],
        "doc" : "the metadata array strongly typed",
        "default" : null
      } ]
    } ],
    "doc" : "",
    "default" : null
  }, {
    "name" : "producerHeader",
    "type" : [ "null", {
      "type" : "record",
      "name" : "ProducerHeader",
      "doc" : "ProducerHeader produced by shark for events when the producer of the event(agent,agent manager, system...)\n    is not a participant.\n    Example: Agent reports an SDE on behalf of visitor\n    This header will be populated for chat scale events.",
      "fields" : [ {
        "name" : "producerType",
        "type" : "ParticipantEnum",
        "doc" : "producer type : AGENT/APPLICATION",
        "default" : "NONE"
      }, {
        "name" : "authType",
        "type" : [ "null", "string" ],
        "doc" : "producer authentication type  : can be \"oauth1\" or \"oauth2\"",
        "default" : null
      }, {
        "name" : "authInfo",
        "type" : [ "null", {
          "type" : "record",
          "name" : "Oauth2Info",
          "doc" : "Oauth2 information. Will be populated when the producer authenticated using Oauth2.",
          "fields" : [ {
            "name" : "appKey",
            "type" : [ "null", "string" ],
            "doc" : "Public appkey",
            "default" : null
          }, {
            "name" : "userId",
            "type" : [ "null", "string" ],
            "doc" : "LE user ID of producer",
            "default" : null
          }, {
            "name" : "userName",
            "type" : [ "null", "string" ],
            "doc" : "LE user name of producer",
            "default" : null
          }, {
            "name" : "isAdmin",
            "type" : [ "null", "boolean" ],
            "doc" : "",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "Oauth1Info",
          "doc" : "Oauth1 information. Will be populated when the producer authenticated using Oauth1.",
          "fields" : [ {
            "name" : "appKey",
            "type" : [ "null", "string" ],
            "doc" : "Public appkey",
            "default" : null
          }, {
            "name" : "appName",
            "type" : [ "null", "string" ],
            "doc" : "Name of application of producer",
            "default" : null
          }, {
            "name" : "developerId",
            "type" : [ "null", "string" ],
            "doc" : "developer ID of producer application",
            "default" : null
          }, {
            "name" : "accessTokenId",
            "type" : [ "null", "string" ],
            "doc" : "Public access tojen ID",
            "default" : null
          } ]
        } ],
        "doc" : "Authentication information",
        "default" : null
      } ]
    } ],
    "doc" : "ProducerHeader produced for events when the producer of the event(agent,agent manager, system...)\r\n        is not a participant.\r\n        Example: Agent reports an SDE on behalf of visitor\r\n        This header will be populated for chat scale events.",
    "default" : null
  }, {
    "name" : "eventBody",
    "type" : {
      "type" : "record",
      "name" : "EventBody",
      "doc" : "",
      "fields" : [ {
        "name" : "body",
        "type" : [ "null", {
          "type" : "record",
          "name" : "AppServerEvent",
          "doc" : "FFU - for now we are not going to have an avro implemetation in the app server!!!\r\n       Common header for all events sent by the app server in the old string format\r\n       Produced by: AppServer when writing the regular report info files\r\n       Consumed by: Storm filtering, Hadoop readers...",
          "fields" : [ {
            "name" : "appServerEventHeader",
            "type" : [ "null", {
              "type" : "array",
              "items" : "string"
            } ],
            "doc" : "The header part of the original App Server event",
            "default" : null
          }, {
            "name" : "appServerEventBody",
            "type" : [ "null", {
              "type" : "array",
              "items" : "string"
            }, {
              "type" : "record",
              "name" : "EngagementStartEvent",
              "fields" : [ {
                "name" : "event_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "impression_display_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "impression_response_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "engagement_set_sequence",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "engagement_sequence",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "start_reason",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "transferring_agent_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "old_channel",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "is_hot_lead",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "is_pre_hot_lead",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "impression_response_logical_session_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "skill_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "service_queue_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "s_call_request_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "s_call_scheduled_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "did_number",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "call_type",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "channel",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "agent_group_id",
                "type" : "long",
                "doc" : "The agent group of the agent that was assigned to the visitor for this chat",
                "default" : -1
              }, {
                "name" : "chat_center_id",
                "type" : "long",
                "doc" : "The chat center that was assigned to the visitor for this chat",
                "default" : -1
              }, {
                "name" : "skill_name",
                "type" : "string",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "EngagementEndEvent",
              "fields" : [ {
                "name" : "engagement_end_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "end_reason",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "agent_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "service_queue_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "skill_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "interactive_indication",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "engagement_set_sequence",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "engagement_sequence",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "old_channel",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "millis_in_queue",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "target_skill_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "target_agent_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "transcript_identifier",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "call_connect_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "conversation_start_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "precall_ivr_connect_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "s_call_request_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "s_call_scheduled_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "units",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "from_phone_number",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "to_phone_number",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "did_number",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "from_participant_kind",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "to_participant_kind",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "technical_call_failed_reason",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "call_disconnector",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "last_call_type",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "call_end_reason",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "agent_session_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "channel",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "skill_name",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "target_skill_name",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "service_queue_name",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "engagement_start_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "interaction_start_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "agent_group_id",
                "type" : "long",
                "doc" : "The agent group pf the agent that was assigned to the visitor for this chat",
                "default" : -1
              }, {
                "name" : "chat_center_id",
                "type" : "long",
                "doc" : "The chat center that was assigned to the visitor for this chat",
                "default" : -1
              } ]
            }, {
              "type" : "record",
              "name" : "InteractionStartEvent",
              "doc" : "* Event Name: InteractionStartEvent\r\n     * Description: This event is issued every time a communication starts between the agent and the visitor\r\n     (in LE 2.0 it's when the visitor being taken out of the queue and presented to the agent as a new chat)\r\n      8.4.2. Fix - For voice, this event will be generated at the end of the interaction.\r\n     * Producer: AppServer\r\n     * Consumers list: Reports, Visitor Feed, PIT\r\n     * When fired: When a visitor starts an interaction (chat for example) with an available agent.\r\n     * Expected Event Scale: Chat scale\r\n     * Event category: Business\r\n     * Event scope: Visitor\r\n     * Eng. Attribute: No\r\n     * Deprecated: No",
              "fields" : [ {
                "name" : "interaction_start_time",
                "type" : "long",
                "doc" : "The moment when both the agent and the visitor are connected in chat/voice.\r\n            In case of voice: the latest between the connect time and the attached to agent time (notify) if available",
                "default" : -1
              }, {
                "name" : "engagement_set_sequence",
                "type" : "long",
                "doc" : "The sequence number of the engagement set that this interaction belongs to, within the visitor session. Will increment in case of split session (multiple clicks).",
                "default" : -1
              }, {
                "name" : "engagement_sequence",
                "type" : "long",
                "doc" : "The sequence number of this interaction is part of within the engagement set.",
                "default" : -1
              }, {
                "name" : "call_type",
                "type" : "int",
                "doc" : "USE the value in EngagementEndEvent.The value of call_type UDE. For voice, describes the type of call.",
                "default" : -1
              }, {
                "name" : "old_channel",
                "type" : "int",
                "doc" : "Represent the channel id in appserver versions prior to 9.0. in later versions, const -1",
                "default" : -1
              }, {
                "name" : "agent_id",
                "type" : "string",
                "doc" : "The agent id that the visitor is talking to / chatting with.",
                "default" : ""
              }, {
                "name" : "agent_session_id",
                "type" : "string",
                "doc" : "The agent session identifiers  given by the database",
                "default" : ""
              }, {
                "name" : "skill_id",
                "type" : "long",
                "doc" : "The skill id as saved on AppServer's PSkill object",
                "default" : -1
              }, {
                "name" : "service_queue_id",
                "type" : "string",
                "doc" : "The service queue id of this engagement (Relevant only for Legacy)",
                "default" : ""
              }, {
                "name" : "millis_in_queue",
                "type" : "long",
                "doc" : "Number of milliseconds the visitor spent in queue of this engagement",
                "default" : -1
              }, {
                "name" : "channel",
                "type" : "int",
                "doc" : "Channel of the engagement (WEB/VOICE). This field exists since version 9.0",
                "default" : -1
              }, {
                "name" : "agent_nick_name",
                "type" : "string",
                "doc" : "The agent name as presented in the LE 2.0 UI",
                "default" : ""
              }, {
                "name" : "agent_group_id",
                "type" : "long",
                "doc" : "The agent group of the agent that was assigned to the visitor for this chat",
                "default" : -1
              }, {
                "name" : "chat_center_id",
                "type" : "long",
                "doc" : "The chat center that was assigned to the visitor for this chat. Chat center is an agent group configured in the skill routing configuration",
                "default" : -1
              } ]
            }, {
              "type" : "record",
              "name" : "CollaborationEventLogger",
              "fields" : [ {
                "name" : "time_in_milliseconds",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "data",
                "type" : "string",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "ImpressionResponseEvent",
              "fields" : [ {
                "name" : "event_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "impression_display_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "impression_response_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "approach_type",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "channel",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "impression_state",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "response_type",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "room",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "page_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "agent_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "impression_object_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "skill_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "le_segment_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "le_engagement_id",
                "type" : "string",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "RepActivityEvent",
              "fields" : [ {
                "name" : "site_name",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "rep_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "rep_session_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "type",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "prev_subtype",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "event_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "sequence_number",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "prev_repsession_event_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "prev_repactivity_event_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "emp_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "username",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "nickname",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "login_name",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "concurrent_eng",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "agent_group_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "state_reason_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "user_type",
                "type" : "int",
                "doc" : "UserType id. 3 user types available for agent today: 0-System, 1-Human, 2-Bot, -1-Unknown",
                "default" : -1
              } ]
            }, {
              "type" : "record",
              "name" : "RepSessionEvent",
              "fields" : [ {
                "name" : "site_name",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "rep_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "rep_session_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "type",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "subtype",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "event_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "sequence_number",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "prev_repsession_event_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "prev_subtype",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "prev_repactivity_event_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "emp_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "username",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "nickname",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "login_name",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "change_indicator",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "prev_concurrent_eng",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "concurrent_eng",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "max_allowed_concurrent_eng",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "agent_group_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "state_reason_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "user_type",
                "type" : "int",
                "doc" : "UserType id. 3 user types available for agent today: 0-System, 1-Human, 2-Bot, -1-Unknown",
                "default" : -1
              }, {
                "name" : "prev_state_reason_id",
                "type" : "string",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "VisitorStateEvent",
              "fields" : [ {
                "name" : "event_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "visitor_state",
                "type" : "string",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "PVisitorLoginEvent",
              "fields" : [ {
                "name" : "visitor_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "session_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "session_key",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "site_session_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "session_start_dt",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "visitor_ip",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "visitor_proxy_ip",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "visitor_browser",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "reqhost",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "visitor_computer_name",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "cookie_last_invite",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "cookie_last_chat",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "cookie_last_followup",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "cookie_last_visit",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "cookie_followup_expiration",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "rep_history_threshold",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "rep_was_online",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "control_group_flag",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "control_group_parameter",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "first_session_id_in_visit",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "first_session_id_in_visit_str",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "le_control_group_flag",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "user_os",
                "type" : "string",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "PVisitorLogoutEvent",
              "fields" : [ {
                "name" : "visitor_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "session_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "session_key",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "site_session_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "session_end_dt",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "last_session_in_visit",
                "type" : "string",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "PUDEValue",
              "fields" : [ {
                "name" : "ude_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "ude_global_name",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "ude_display_name",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "ude_value",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "ude_source_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "ude_scope_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "ude_answer_type_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "ude_answer_key",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "page_index",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "rep_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "ude_submission_date",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "is_encrypted_ind",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "ude_source_name",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "event_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "room",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "source_type",
                "type" : "string",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "LiveEngageSegmentationEvent",
              "fields" : [ {
                "name" : "timestamp",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "segment_id",
                "type" : "string",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "PPage",
              "doc" : "The ppage event mapping",
              "fields" : [ {
                "name" : "pageURL",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "eventTime",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "lastAccessTime",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "referrer",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "title",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "pageId",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "pageContext",
                "type" : {
                  "type" : "enum",
                  "name" : "PageContextEnum",
                  "doc" : "Value of 3",
                  "symbols" : [ "NA", "START_PAGE", "STOP_PAGE", "IN_PAGE" ]
                },
                "default" : "NA"
              }, {
                "name" : "pvmTypeId",
                "type" : {
                  "type" : "enum",
                  "name" : "PVMLogicTypeId",
                  "doc" : "Value of 5",
                  "symbols" : [ "UNKNOWN", "DOCUMENT_PATH", "DOCUMENT_PATH_WITH_DOMAIN", "DOCUMENT_NAME", "PARAMETER", "DISABLE" ]
                },
                "default" : "UNKNOWN"
              }, {
                "name" : "postPvmPageValue",
                "type" : "string",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "ChannelQueueEvent",
              "fields" : [ {
                "name" : "skillName",
                "type" : "string",
                "doc" : "The skill name as saved on AppServer's PSkill object",
                "default" : ""
              }, {
                "name" : "skillId",
                "type" : "long",
                "doc" : "The skill id as saved on AppServer's PSkill object",
                "default" : -1
              }, {
                "name" : "channel",
                "type" : "int",
                "doc" : "Interaction type",
                "default" : -1
              }, {
                "name" : "availableSlots",
                "type" : "int",
                "doc" : "Sum of free slots for all agents per skill",
                "default" : -1
              }, {
                "name" : "queueSize",
                "type" : "int",
                "doc" : "Number of visitors waiting for chat per skill",
                "default" : -1
              }, {
                "name" : "event_time",
                "type" : "long",
                "doc" : "Event creation time in millies",
                "default" : -1
              }, {
                "name" : "isRepOnline",
                "type" : "string",
                "doc" : "Indication if there is an agent online",
                "default" : ""
              }, {
                "name" : "totalSlots",
                "type" : "int",
                "doc" : "@deprecated - use accountTotalSlots instead\r\n            Sum of slots for all agents per skill.\r\n            * (06/01/16) Note that the total slots value is not calculated correctly.\r\n              Total slots is not calculated per skill, but per the entire site. This is an open bug LE-45029.",
                "default" : -1
              }, {
                "name" : "accountTotalSlots",
                "type" : "int",
                "doc" : "Sum of all online agents slots in the account",
                "default" : -1
              }, {
                "name" : "loggedInSlots",
                "type" : "int",
                "doc" : "Number of logged-in agents slots per skill",
                "default" : -1
              }, {
                "name" : "onlineSlots",
                "type" : "int",
                "doc" : "Number of online agents slots per skill",
                "default" : -1
              }, {
                "name" : "occupiedSlots",
                "type" : "int",
                "doc" : "Number of current occupied logged-in agents slots per skill",
                "default" : -1
              } ]
            }, {
              "type" : "record",
              "name" : "VisitorEventObj",
              "fields" : [ {
                "name" : "event_type",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "event_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "rep_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "parameter",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "info",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "queue",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "skill_id",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "channel_id",
                "type" : "int",
                "default" : -1
              } ]
            }, {
              "type" : "record",
              "name" : "PLineEvent",
              "fields" : [ {
                "name" : "by",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "text",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "event_time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "participant_type",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "control_type",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "rep_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "canned_answer_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "repName",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "canned_tree_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "line_sequence_id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "metadata",
                "type" : [ "null", "string" ],
                "default" : null
              }, {
                "name" : "skillId",
                "type" : [ "null", "long" ],
                "doc" : "Skill ID",
                "default" : null
              } ]
            }, {
              "type" : "record",
              "name" : "LineStatusEvent",
              "doc" : "* Event Name            : LineStatusEvent\r\n    * Description           : Report status on a previous chat line (received, read,\r\n    * Producer/Owner        : LE2.0\r\n    * Consumers list        :\r\n    * When fired            : Fired when a secure form is sent\r\n    * Expected Event Scale  : Chat\r\n    * Event category        : Business\r\n    * Event scope           : Chat\r\n    * Eng. Attribute        : no\r\n    * Comments              : no\r\n    * Deprecated            : no",
              "fields" : [ {
                "name" : "event_time",
                "type" : "long",
                "doc" : "Event time",
                "default" : -1
              }, {
                "name" : "source",
                "type" : "int",
                "doc" : "Source: -1 = UNKOWN, 0 = AGENT, 1 = VISITOR",
                "default" : -1
              }, {
                "name" : "ref_line_sequence_id",
                "type" : "int",
                "doc" : "Sequence ID to the line the status refers to",
                "default" : -1
              }, {
                "name" : "status",
                "type" : [ "null", "string" ],
                "doc" : "Status, types: ACCEPT, READ, ACTION",
                "default" : null
              }, {
                "name" : "metadata",
                "type" : [ "null", "string" ],
                "doc" : "Metadata",
                "default" : null
              } ]
            }, {
              "type" : "record",
              "name" : "ImpressionDisplayEvent",
              "fields" : [ {
                "name" : "time",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "impressionDisplayId",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "approachType",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "channel",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "state",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "room",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "isHotLead",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "isPreHotLead",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "skillId",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "pageId",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "operatorId",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "impressionObjectId",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "leSegmentId",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "leEngagementId",
                "type" : "string",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "SurveyAnswerEvent",
              "doc" : "* Event Name: SurveyAnswerEvent\r\n     * Description: This event is being fired for every survey question, when the survey is being submitted successfully (for auto submit surveys as well).\r\n     For questions which weren’t answered, Num_of_selected_answers should be 0.\r\n     In case of multiple answers selected (answer type = \"CheckBox\" ):\r\n          - Event will be generated per every answer.\r\n          - Num_of_selected_answers - new field was added to event definition.\r\n     * Producer: AppServer\r\n     * Consumers list: Reports, Engagement History, Visitor Feed\r\n     * When fired: When a survey is being submitted successfully.\r\n     * Expected Event Scale: Chat scale\r\n     * Event category: Business\r\n     * Event scope: Visitor\r\n     * Eng. Attribute: No\r\n     * Deprecated: No",
              "fields" : [ {
                "name" : "time",
                "type" : "long",
                "doc" : "Event creation time in millies",
                "default" : -1
              }, {
                "name" : "surveyId",
                "type" : "int",
                "doc" : "Survey unique identifier",
                "default" : -1
              }, {
                "name" : "surveyName",
                "type" : "string",
                "doc" : "The name of the survey",
                "default" : ""
              }, {
                "name" : "surveyType",
                "type" : "int",
                "doc" : "The survey type, can be one of the following options:\r\n                (1) Pre-Chat     (2) Exit (Chat)  (3) Chat Agent     (4) Offline (Chat)      (5) SecureMail-User-Login     (6) SecureMail-User-Registration     (7) New-Incoming-Message\r\n                (8) SecureMail-Update-Ticket     (9) SecureMail-New-Message   (10) Ticket-Agent    (11) SecureMail-Lost-Password    (16) Ticket-Feedback     (17) Ticket-Secure-Feedback\r\n                (18) Pre-Call    (19) Call-Exit   (20) Call-Offline",
                "default" : -1
              }, {
                "name" : "questionId",
                "type" : "int",
                "doc" : "A survey question (which is being answered by checkbox, free text...) unique identifier",
                "default" : -1
              }, {
                "name" : "answerType",
                "type" : "int",
                "doc" : "Answer type (checkbox/free text/radio button/ …)",
                "default" : -1
              }, {
                "name" : "questionText",
                "type" : "string",
                "doc" : "The question text as seen by the visitor in the survey",
                "default" : ""
              }, {
                "name" : "numOfPossibleAnswers",
                "type" : "int",
                "doc" : "In case of multiple answers question, this is the number of possible answers.",
                "default" : -1
              }, {
                "name" : "numOfSelectedAnswers",
                "type" : "int",
                "doc" : "Number of answers selected for the current question. Possible in CheckBox answer type for example",
                "default" : -1
              }, {
                "name" : "answerId",
                "type" : "int",
                "doc" : "Selected answer position in answers vector (starts from 1)\r\n                (0) If no answer selected, (-1) non index answer and also for CALL_ME_AT question type, (-2) Invalid answer",
                "default" : -1
              }, {
                "name" : "answerText",
                "type" : "string",
                "doc" : "The actual answer as seen by the visitor",
                "default" : ""
              }, {
                "name" : "answerRank",
                "type" : "double",
                "doc" : "(0) If no answer selected\r\n                    (-1) for NA\r\n                    For CSAT first answer rank = number of possible answers,\r\n                    Else first answer rank = answer index.",
                "default" : -1
              }, {
                "name" : "answerScore",
                "type" : "double",
                "doc" : "(x - x0) / (x1 - x0) * 100\r\n                    Where:\r\n                    x - is the selected answer rank.\r\n                    x0 - minimum rank for answer\r\n                    x1 - maximum rank for answer\r\n\r\n                    FCR answer score can be 0 or 100 - depends on FCR_ind;\r\n                    -1 for no answer",
                "default" : -1
              }, {
                "name" : "csatThreshold",
                "type" : "double",
                "doc" : "The minimum answers score which defined as CSAT",
                "default" : -1
              }, {
                "name" : "FCRTargetInd",
                "type" : "int",
                "doc" : "Indicates FCR answer: (0) false, (1) true, (-1) NA",
                "default" : -1
              }, {
                "name" : "CSATTargetInd",
                "type" : "int",
                "doc" : "Indicates CSAT answer - depends on Answer score and CSAT threshold: (0) false, (1) true, (-1) NA",
                "default" : -1
              }, {
                "name" : "questionCategoryId",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "questionCategoryName",
                "type" : "string",
                "doc" : "CSAT, FCR, general, Skill and Other",
                "default" : ""
              }, {
                "name" : "requiredInd",
                "type" : "int",
                "doc" : "Indicates required question - [0,1]",
                "default" : -1
              }, {
                "name" : "prepopulateQuestionInd",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "UDEName",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "questionTriggerLogic",
                "type" : "int",
                "doc" : "Indicator for auto submit survey: (1) First, (2) Middle, (3) Last, (-1) NA",
                "default" : -1
              }, {
                "name" : "autoSubmitInd",
                "type" : "int",
                "doc" : "Indicator for auto submit survey: (0) false, (1) true, (-1) NA",
                "default" : -1
              }, {
                "name" : "repId",
                "type" : "long",
                "doc" : "The agent identifier",
                "default" : -1
              }, {
                "name" : "engagementSetSequence",
                "type" : "long",
                "doc" : "The sequence number of the engagement set that this survey is related to. Will increment in case of split session (multiple clicks).\r\n                 Available for surveys with survey type: (-1) unknown, (2) Exit (Chat), (3) Chat Agent, (19) Call-Exit",
                "default" : -1
              }, {
                "name" : "engagementSequence",
                "type" : "long",
                "doc" : "The sequence number of the engagement within the engagement set that this survey is related to.\r\n                 Available for surveys with survey type: (-1) unknown, (2) Exit (Chat), (3) Chat Agent, (19) Call-Exit",
                "default" : -1
              }, {
                "name" : "impressionResponseId",
                "type" : "long",
                "doc" : "The impression response identifier, available for surveys with survey type: (-1) unknown, (1) Pre-Chat, (4) Offline (Chat), (18) Pre-Call, (20) Call-Offline",
                "default" : -1
              }, {
                "name" : "qualifiedInd",
                "type" : "int",
                "doc" : "Applicable for agent survey: the agent’s answer for the question “Is Qualified?”  according to the value of “qualified_chat” custom variable:\r\n                    No value/ “Yes” = Qualified/ Any other value = Not qualified\r\n                    (-1) No value or when this is not an agent survey, (1) Qualified, (0) Not qualified",
                "default" : -1
              }, {
                "name" : "room",
                "type" : "string",
                "doc" : "The room skill id as saved on AppServer's PSkill object (-1 if no room or room is not a valid skill)",
                "default" : ""
              }, {
                "name" : "skillId",
                "type" : "long",
                "doc" : "The skill id as saved on AppServer's PSkill object",
                "default" : -1
              }, {
                "name" : "UDEId",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "agent_group_id",
                "type" : "long",
                "doc" : "The agent group of the agent that was assigned to the visitor for this chat",
                "default" : -1
              }, {
                "name" : "chat_center_id",
                "type" : "long",
                "doc" : "The chat center that was assigned to the visitor for this chat. Chat center is an agent group configured in the skill routing configuration\r\n                    For pre-chat survey, this field value will be -1.",
                "default" : -1
              }, {
                "name" : "new_ude_id",
                "type" : "int",
                "doc" : "this is the actual UDE_ID of the survey question, while the original ude_id field has the old same value - for backward compatibility with reports\r\n                 most of the time the ids would be the same - this is a fix for existing survey questions after changing the way we save survey udeIds",
                "default" : -1
              } ]
            }, {
              "type" : "record",
              "name" : "SurveyEvent",
              "doc" : "* Event Name: SurveyEvent\r\n     * Description: This event is being sent for each display/submission of a survey presented to a visitor. It is available from 8.4.2. fix.\r\n     * Producer: AppServer\r\n     * Consumers list: Reports, Engagement History\r\n     * When fired: When a survey is being displayed to a visitor/submitted by the visitor.\r\n     * Expected Event Scale: Chat scale\r\n     * Event category: Business\r\n     * Event scope: Visitor\r\n     * Eng. Attribute: No\r\n     * Deprecated: No",
              "fields" : [ {
                "name" : "time",
                "type" : "long",
                "doc" : "The display/submission time of the survey in millies",
                "default" : -1
              }, {
                "name" : "surveyId",
                "type" : "long",
                "doc" : "Survey unique identifier",
                "default" : -1
              }, {
                "name" : "surveyType",
                "type" : "int",
                "doc" : "The survey type, can be one of the following options:\r\n            (1) Pre-Chat     (2) Exit (Chat)  (3) Chat Agent     (4) Offline (Chat)      (5) SecureMail-User-Login     (6) SecureMail-User-Registration     (7) New-Incoming-Message\r\n            (8) SecureMail-Update-Ticket     (9) SecureMail-New-Message   (10) Ticket-Agent    (11) SecureMail-Lost-Password    (16) Ticket-Feedback     (17) Ticket-Secure-Feedback\r\n            (18) Pre-Call    (19) Call-Exit   (20) Call-Offline",
                "default" : -1
              }, {
                "name" : "surveyStatus",
                "type" : "int",
                "doc" : "The timing, when this event was created: display/ submit/ submit try that failed\r\n             (1) view - display\r\n             (2) submit - completion\r\n             (3) submit failed - the visitor tried to submit but failed for validation issues [e.g. missing mandatory info, invalid phone number or email…]\r\n             From 8.6 for chat + voice surveys",
                "default" : -1
              }, {
                "name" : "repId",
                "type" : "long",
                "doc" : "The agent identifier",
                "default" : -1
              }, {
                "name" : "engagementSetSeq",
                "type" : "int",
                "doc" : "The sequence number of the engagement set that this survey is related to. Will increment in case of split session (multiple clicks).\r\n             Available for surveys with survey type: (-1) unknown, (2) Exit (Chat), (3) Chat Agent, (19) Call-Exit",
                "default" : -1
              }, {
                "name" : "engagementSeq",
                "type" : "int",
                "doc" : "The sequence number of the engagement within the engagement set that this survey is related to.\r\n             Available for surveys with survey type: (-1) unknown, (2) Exit (Chat), (3) Chat Agent, (19) Call-Exit",
                "default" : -1
              }, {
                "name" : "impressionResponseId",
                "type" : "int",
                "doc" : "The impression response identifier, available for surveys with survey type: (-1) unknown, (1) Pre-Chat, (4) Offline (Chat), (18) Pre-Call, (20) Call-Offline",
                "default" : -1
              }, {
                "name" : "isQualified",
                "type" : "string",
                "doc" : "Applicable for agent survey: the agent’s answer for the question “Is Qualified?”  according to the value of “qualified_chat” custom variable:\r\n                No value/ “Yes” = Qualified/ Any other value = Not qualified\r\n                (-1) No value or when this is not an agent survey, (1) Qualified, (0) Not qualified",
                "default" : ""
              }, {
                "name" : "roomSkillId",
                "type" : "string",
                "doc" : "The room skill id as saved on AppServer's PSkill object (-1 if no room or room is not a valid skill)",
                "default" : ""
              }, {
                "name" : "skillId",
                "type" : "string",
                "doc" : "The skill id as saved on AppServer's PSkill object",
                "default" : ""
              }, {
                "name" : "agent_group_id",
                "type" : "long",
                "doc" : "The agent group of the agent that was assigned to the visitor for this chat",
                "default" : -1
              }, {
                "name" : "chat_center_id",
                "type" : "long",
                "doc" : "The chat center that was assigned to the visitor for this chat. Chat center is an agent group configured in the skill routing configuration\r\n                For pre-chat survey, this field value will be -1.",
                "default" : -1
              } ]
            }, {
              "type" : "record",
              "name" : "ActiveSiteInfoEvent",
              "doc" : "* This event is created by the AppServer for monitoring the \"app data\" (reps, visitors, chats and calls) of active sites.\r\n     * It is created for each active site every PServletProperties.activeSitesFileGenerationIntervalSeconds (default: every 2 minutes)",
              "fields" : [ {
                "name" : "eventTime",
                "type" : "long",
                "doc" : "the event creation time",
                "default" : -1
              }, {
                "name" : "reps",
                "type" : "long",
                "doc" : "total logged-in reps",
                "default" : -1
              }, {
                "name" : "onlineReps",
                "type" : "long",
                "doc" : "total reps which are not \"away\"",
                "default" : -1
              }, {
                "name" : "visitors",
                "type" : "long",
                "doc" : "total visitors",
                "default" : -1
              }, {
                "name" : "chats",
                "type" : "long",
                "doc" : "total chats (web state is: IN_CHAT, WAITING_FOR_CHAT)",
                "default" : -1
              }, {
                "name" : "realChats",
                "type" : "long",
                "doc" : "total chats with lines of visitor or rep",
                "default" : -1
              }, {
                "name" : "calls",
                "type" : "long",
                "doc" : "total calls (voice state is : WAITING_FOR_ANSWER, CONNECTING, IN_CALL, CONNECTING_REMOTE, IN_CALL_REMOTE, IVR)",
                "default" : -1
              } ]
            }, {
              "type" : "record",
              "name" : "ChatCenterRoutingDecisionEvent",
              "doc" : "* Event Name: ChatCenterRoutingDecisionEvent\r\n     *\r\n     * Description: This LE 2.0 event is created by the AppServer for each chat center routing decision which received during the 'load balancing' logic.\r\n     * Each chat request (visitor) that arrives to the AppServer is routed to one chat center.\r\n     * We select the routing chat center, first, by the split percentages configured for a skill. If the selected chat center is not in the SLA (expectedWaitTime > maxWaitTime) - we will make another decision iteration,\r\n     * using the rest of the chat centers. For each decision iteration this event will be sent, and the iterations will executed until a selection is made.\r\n     * FALLBACK - if all chat centers are not within the SLA, The whole selection process will start again, relying only on split conf and chat center availability.\r\n     *\r\n     * Producer: AppServer (LE 2.0)\r\n     * Consumers list: This event has no consumers - for debug use only\r\n     * When fired: When selecting a chat center for a new chat request. On each step of the selection process, one event will be sent.\r\n     * Expected Event Scale: Chat scale\r\n     * Event category : System (for internal usage)\r\n     * Event scope: Visitor\r\n     * Eng. Attribute: No\r\n     * Deprecated : No",
              "fields" : [ {
                "name" : "eventTime",
                "type" : "long",
                "doc" : "Event creation time in millies",
                "default" : -1
              }, {
                "name" : "skillName",
                "type" : "string",
                "doc" : "The skill name as saved on AppServer's PSkill object",
                "default" : ""
              }, {
                "name" : "skillId",
                "type" : "long",
                "doc" : "The skill id as saved on AppServer's PSkill object",
                "default" : -1
              }, {
                "name" : "maxWaitTime",
                "type" : "int",
                "doc" : "Skill's SLA configuration in seconds",
                "default" : -1
              }, {
                "name" : "chatCentersToChooseFrom",
                "type" : "string",
                "doc" : "A JSON formatted string which contains a list of chat centers routing configuration objects.\r\n                 * This list contains only the chat centers that weren't disqualified in the previous decision iterations.\r\n                 *  The structure of this list will be looking like this: [{long chatCenterId, double splitPercentage, int priority},...]",
                "default" : ""
              }, {
                "name" : "attemptNumber",
                "type" : "int",
                "doc" : "Number of the decisions the routing logic has made for a single chat request, including the current decision",
                "default" : -1
              }, {
                "name" : "randomUsed",
                "type" : "double",
                "doc" : "Random number used to select the chat center (by split percentages) in the current decision iteration",
                "default" : -1
              }, {
                "name" : "chosenChatCenterId",
                "type" : "long",
                "doc" : "The current selected chat center according to the current split-percentage configuration and the random number",
                "default" : -1
              }, {
                "name" : "decision",
                "type" : "int",
                "doc" : "The actual decision for the selected chat center. value can be 0 (false) or 1 (true)\r\n                 * When the value is true, it means this is the final decision. The chat request will be routed to this chat center.\r\n                 *",
                "default" : -1
              }, {
                "name" : "decisionReason",
                "type" : "string",
                "doc" : "The possible reasons for making a routing decision:\r\n                    POSITIVE_NO_CHECK: Final decision. chat center selected only by using split percentage conf.\r\n                    POSITIVE_SLA: Final decision. chat center selected using split percentage conf and SLA check.\r\n                    POSITIVE_SLA_FALLBACK: Final decision. chat center selected since one agent online was found(there is no expectedWaitTime data).\r\n                    NEGATIVE_SLA: The current chat center was not chosen. It is not in the SLA.\r\n                    NEGATIVE_SLA_FALLBACK: The current chat center was not chosen, no available agent was found(there is no expectedWaitTime data).\r\n                    POSITIVE_AVAILABILITY: Final decision. chat center selected, an agent available was found.\r\n                    NEGATIVE_AVAILABILITY: The current chat center was not chosen. It has no available agents.\r\n                    NEGATIVE_AVAILABILITY_FALLBACK: The current chat center was not chosen. There is no data.\r\n                    OTHER: Any other undefined reason",
                "default" : ""
              }, {
                "name" : "chosenChatCenterExpectedWaitTime",
                "type" : "double",
                "doc" : "The actual wait time in seconds, estimated for the selected chat center\r\n                 *  This wait time is retrieved from PD API Server",
                "default" : -1
              }, {
                "name" : "priority",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "phase",
                "type" : "string",
                "default" : ""
              }, {
                "name" : "engagementSetSequence",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "engagementSequence",
                "type" : "long",
                "default" : -1
              } ]
            }, {
              "type" : "record",
              "name" : "ChatCenterChannelQueueEvent",
              "doc" : "* Event Name: ChatCenterChannelQueueEvent\r\n     *\r\n     * Description: This LE 2.0 event is created by the AppServer provides data about reps availability & queue for each chat center and skill.\r\n     *\r\n     * Producer: AppServer (LE 2.0)\r\n     * Consumers list:\r\n     * When fired: Every 2 seconds(SRDH)\r\n     * Expected Event Scale: Account(every 2 seconds)\r\n     * Event category : System (for internal usage)\r\n     * Event scope: Skill & Chat center\r\n     * Eng. Attribute: No\r\n     * Deprecated : No",
              "fields" : [ {
                "name" : "eventTime",
                "type" : "long",
                "doc" : "Event creation time in millies",
                "default" : -1
              }, {
                "name" : "skillName",
                "type" : "string",
                "doc" : "The skill name as saved on AppServer's PSkill object",
                "default" : ""
              }, {
                "name" : "skillId",
                "type" : "long",
                "doc" : "The skill id as saved on AppServer's PSkill object",
                "default" : -1
              }, {
                "name" : "chatCenterId",
                "type" : "long",
                "doc" : "The chat center according to the current split-percentage configuration",
                "default" : -1
              }, {
                "name" : "channel",
                "type" : "int",
                "doc" : "Interaction type",
                "default" : -1
              }, {
                "name" : "availableSlots",
                "type" : "int",
                "doc" : "Sum of free slots for all agents per skill and chat center",
                "default" : -1
              }, {
                "name" : "queueSize",
                "type" : "int",
                "doc" : "Number of visitors waiting for chat per skill and chat center",
                "default" : -1
              }, {
                "name" : "isRepOnline",
                "type" : "string",
                "doc" : "Indication if there is an agent online",
                "default" : ""
              }, {
                "name" : "totalSlots",
                "type" : "int",
                "doc" : "@deprecated - use online slots",
                "default" : -1
              }, {
                "name" : "accountTotalSlots",
                "type" : "int",
                "doc" : "Sum of all agents slots in the account",
                "default" : -1
              }, {
                "name" : "loggedInSlots",
                "type" : "int",
                "doc" : "Number of logged-in agents slots per chat center",
                "default" : -1
              }, {
                "name" : "onlineSlots",
                "type" : "int",
                "doc" : "Number of online agents slots per chat center",
                "default" : -1
              }, {
                "name" : "occupiedSlots",
                "type" : "int",
                "doc" : "Number of current occupied logged-in agents slots per chat center",
                "default" : -1
              } ]
            }, {
              "type" : "record",
              "name" : "VisitorQueueVarsParamsAuditEvent",
              "doc" : "* Event Name: VisitorQueueVarsParamsAuditEvent\r\n     *\r\n     * Description: This LE 2.0 event is created by the AppServer for monitoring params calculation for queue & wait time system messages.\r\n     * Provides data about params calculation input & output.\r\n     * Queue & wait time system messages are sent every 2 minutes to each visitor in a queue.\r\n     *\r\n     * Producer: AppServer (LE 2.0)\r\n     * Consumers list: This event has no consumers - for debug use only\r\n     * When fired: When calculating params for queue & wait time system messages. For each queue & wait time system message, one event will be fired.\r\n     * Expected Event Scale: Chat scale\r\n     * Event category : System (for internal usage)\r\n     * Event scope: Visitor\r\n     * Eng. Attribute: No\r\n     * Deprecated : No",
              "fields" : [ {
                "name" : "channel",
                "type" : "int",
                "doc" : "Interaction type",
                "default" : -1
              }, {
                "name" : "skillId",
                "type" : "long",
                "doc" : "The visitor skill id, as saved on AppServer's PVisitor object",
                "default" : -1
              }, {
                "name" : "chatCenterId",
                "type" : "long",
                "doc" : "The visitor target chat center id, as saved on AppServer's PVisitor object",
                "default" : -1
              }, {
                "name" : "placeInQueue",
                "type" : "int",
                "doc" : "The visitor place in queue, as saved on AppServer's WaitingVisitorsList object at the time of calculation",
                "default" : -1
              }, {
                "name" : "queueLength",
                "type" : "int",
                "doc" : "The queue length, as saved on AppServer's WaitingVisitorsList object at the time of calculation",
                "default" : -1
              }, {
                "name" : "queueThroughput",
                "type" : "double",
                "doc" : "The queue throughput, as saved on AppServer's LEPDQueueData object at the time of calculation",
                "default" : -1
              }, {
                "name" : "defaultAverageChatDurationSec",
                "type" : "int",
                "doc" : "The default value for average chat duration, as configured in AccountConfig's Site Settings at the time of calculation",
                "default" : -1
              }, {
                "name" : "maxExpectedWaitTimeValueSec",
                "type" : "int",
                "doc" : "The maximal value of expected wait time to be displayed to the visitor, as configured in AccountConfig's Site Settings at the time of calculation",
                "default" : -1
              }, {
                "name" : "outputPlaceInQueue",
                "type" : "int",
                "doc" : "The PlaceInQ param value, displayed to the visitor",
                "default" : -1
              }, {
                "name" : "outputQueueLength",
                "type" : "int",
                "doc" : "The QueueLength param value, displayed to the visitor",
                "default" : -1
              }, {
                "name" : "outputExpectedWaitTimeMinutes",
                "type" : "int",
                "doc" : "The AvgWaitMinutes param value, displayed to the visitor",
                "default" : -1
              }, {
                "name" : "outputExpectedWaitTimeSeconds",
                "type" : "int",
                "doc" : "The AvgWaitSeconds param value, displayed to the visitor",
                "default" : -1
              } ]
            }, {
              "type" : "record",
              "name" : "CustomerInfoEvent",
              "doc" : "Customer Info Event - SDE received from the visitor page containing info about the customer.",
              "fields" : [ {
                "name" : "customerInfo",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "CustomerInfo",
                  "doc" : "Customer Info",
                  "fields" : [ {
                    "name" : "customerStatus",
                    "type" : [ "null", "string" ],
                    "doc" : "customer status",
                    "default" : null
                  }, {
                    "name" : "customerType",
                    "type" : [ "null", "string" ],
                    "doc" : "customerType",
                    "default" : null
                  }, {
                    "name" : "balance",
                    "type" : [ "null", "double" ],
                    "doc" : "balance",
                    "default" : null
                  }, {
                    "name" : "customerId",
                    "type" : [ "null", "string" ],
                    "doc" : "customerId",
                    "default" : null
                  }, {
                    "name" : "lastPaymentDate",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "Date",
                      "doc" : "Date - date object (year, month, day)",
                      "fields" : [ {
                        "name" : "year",
                        "type" : [ "null", "int" ],
                        "doc" : "year",
                        "default" : null
                      }, {
                        "name" : "month",
                        "type" : [ "null", "int" ],
                        "doc" : "month",
                        "default" : null
                      }, {
                        "name" : "day",
                        "type" : [ "null", "int" ],
                        "doc" : "day",
                        "default" : null
                      } ]
                    } ],
                    "doc" : "last payment date",
                    "default" : null
                  }, {
                    "name" : "registrationDate",
                    "type" : [ "null", "Date" ],
                    "doc" : "registration date",
                    "default" : null
                  }, {
                    "name" : "loginStatus",
                    "type" : [ "null", "int" ],
                    "doc" : "loginStatus",
                    "default" : null
                  }, {
                    "name" : "companyBranch",
                    "type" : [ "null", "string" ],
                    "doc" : "companyBranch",
                    "default" : null
                  }, {
                    "name" : "socialId",
                    "type" : [ "null", "string" ],
                    "doc" : "socialId -  the unique identifier of the User in the a social network",
                    "default" : null
                  }, {
                    "name" : "imei",
                    "type" : [ "null", "string" ],
                    "doc" : "imei - the phone of the user to identify him for a telco customer",
                    "default" : null
                  }, {
                    "name" : "userName",
                    "type" : [ "null", "string" ],
                    "doc" : "userName - nickname or display name",
                    "default" : null
                  }, {
                    "name" : "companySize",
                    "type" : [ "null", "int" ],
                    "doc" : "companySize - business targeting for B2B",
                    "default" : null
                  }, {
                    "name" : "accountName",
                    "type" : [ "null", "string" ],
                    "doc" : "accountName - a nickname for the account for B2B like the salesforce account name",
                    "default" : null
                  }, {
                    "name" : "role",
                    "type" : [ "null", "string" ],
                    "doc" : "role - role of the visitor in his organization",
                    "default" : null
                  }, {
                    "name" : "storeZipCode",
                    "type" : [ "null", "string" ],
                    "doc" : "storeZipCode - storeZipCode is the zip code of the store",
                    "default" : null
                  }, {
                    "name" : "storeNumber",
                    "type" : [ "null", "string" ],
                    "doc" : "storeNumber - storeNumber is the number of the store",
                    "default" : null
                  }, {
                    "name" : "currency",
                    "type" : [ "null", "string" ],
                    "doc" : "currency that represents the customer balance",
                    "default" : null
                  } ]
                } ],
                "default" : null
              } ]
            }, {
              "type" : "record",
              "name" : "PersonalInfoEvent",
              "doc" : "Personal Info Event - SDE received from the visitor page containing info about the customer.",
              "fields" : [ {
                "name" : "personalInfo",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "PersonalInfo",
                  "doc" : "Personal Info",
                  "fields" : [ {
                    "name" : "name",
                    "type" : [ "null", "string" ],
                    "doc" : "name",
                    "default" : null
                  }, {
                    "name" : "surname",
                    "type" : [ "null", "string" ],
                    "doc" : "surname",
                    "default" : null
                  }, {
                    "name" : "customerAge",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "CustomerAge",
                      "doc" : "Personal Info - Customer Age (either age in years or yyyy.mm.dd of birth day)",
                      "fields" : [ {
                        "name" : "customerAgeInYears",
                        "type" : [ "null", "float" ],
                        "doc" : "customer age in years",
                        "default" : null
                      }, {
                        "name" : "customerYearOfBirth",
                        "type" : [ "null", "int" ],
                        "doc" : "customerYearOfBirth",
                        "default" : null
                      }, {
                        "name" : "customerMonthOfBirth",
                        "type" : [ "null", "int" ],
                        "doc" : "customer age in years",
                        "default" : null
                      }, {
                        "name" : "customerDateOfBirth",
                        "type" : [ "null", "int" ],
                        "doc" : "customerYearOfBirth",
                        "default" : null
                      } ]
                    } ],
                    "doc" : "customerAge",
                    "default" : null
                  }, {
                    "name" : "contacts",
                    "type" : [ "null", {
                      "type" : "array",
                      "items" : {
                        "type" : "record",
                        "name" : "PersonalContact",
                        "doc" : "Personal Info - details",
                        "fields" : [ {
                          "name" : "email",
                          "type" : [ "null", "string" ],
                          "doc" : "email",
                          "default" : null
                        }, {
                          "name" : "phone",
                          "type" : [ "null", "string" ],
                          "doc" : "phone",
                          "default" : null
                        }, {
                          "name" : "phoneType",
                          "type" : [ "null", "int" ],
                          "doc" : "phoneType",
                          "default" : null
                        }, {
                          "name" : "address",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "Address",
                            "doc" : "Personal Info - Address",
                            "fields" : [ {
                              "name" : "country",
                              "type" : [ "null", "string" ],
                              "doc" : "country",
                              "default" : null
                            }, {
                              "name" : "region",
                              "type" : [ "null", "string" ],
                              "doc" : "region",
                              "default" : null
                            } ]
                          } ],
                          "doc" : "address",
                          "default" : null
                        } ]
                      }
                    } ],
                    "doc" : "contacts",
                    "default" : null
                  }, {
                    "name" : "gender",
                    "type" : [ "null", {
                      "type" : "enum",
                      "name" : "Gender",
                      "doc" : "Enum, representing gender",
                      "symbols" : [ "MALE", "FEMALE", "OTHER" ]
                    } ],
                    "doc" : "gender",
                    "default" : null
                  }, {
                    "name" : "company",
                    "type" : [ "null", "string" ],
                    "doc" : "company",
                    "default" : null
                  }, {
                    "name" : "language",
                    "type" : [ "null", "string" ],
                    "doc" : "language",
                    "default" : null
                  } ]
                } ],
                "default" : null
              } ]
            }, {
              "type" : "record",
              "name" : "UserAuthenticationEvent",
              "doc" : "UserAuthenticationEvent is sent after user is authenticated with the customer authentication server",
              "fields" : [ {
                "name" : "connectorId",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "engagementId",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "authSuccess",
                "type" : "boolean",
                "default" : false
              }, {
                "name" : "failedReason",
                "type" : {
                  "type" : "enum",
                  "name" : "FailedReason",
                  "doc" : "failedReason enum for customer auth server failure",
                  "symbols" : [ "NA", "validationServiceUnavailable", "validationServiceError", "otkNotFound", "timeout" ]
                },
                "default" : "NA"
              }, {
                "name" : "validationTimeServer",
                "type" : "long",
                "default" : -1
              } ]
            }, {
              "type" : "record",
              "name" : "LeSecureFormErrorEvent",
              "doc" : "* Event Name            : LeSecureFormErrorEvent\r\n    * Description           : LE secure form error event will be consumed by reporting.\r\n    * Producer/Owner        : LE2.0\r\n    * Consumers list        : Data Platform, Billing, Engagement History\r\n    * When fired            : Fired when a secure form flow have ended with an Error\r\n    * Expected Event Scale  : Chat\r\n    * Event category        : Business\r\n    * Event scope           : Chat\r\n    * Eng. Attribute        : no\r\n    * Comments              : no\r\n    * Deprecated            : no",
              "fields" : [ {
                "name" : "formId",
                "type" : "long",
                "doc" : "LE2.0 Secure From Id, Id is the same as in the legacy",
                "default" : -1
              }, {
                "name" : "formName",
                "type" : "string",
                "doc" : "LE2.0 Secure From Name, Name is the same as in the legacy",
                "default" : ""
              }, {
                "name" : "command",
                "type" : "string",
                "doc" : "The command that caused the error",
                "default" : ""
              }, {
                "name" : "errorReason",
                "type" : "string",
                "doc" : "The assumed reason for the error",
                "default" : ""
              }, {
                "name" : "participantType",
                "type" : "string",
                "doc" : "Agent/Visitor",
                "default" : ""
              }, {
                "name" : "by",
                "type" : "string",
                "doc" : "Agent name/ Visitor Id",
                "default" : ""
              }, {
                "name" : "type",
                "type" : "string",
                "doc" : "Channel type",
                "default" : ""
              }, {
                "name" : "subType",
                "type" : "string",
                "doc" : "Channel Subtype",
                "default" : ""
              }, {
                "name" : "formUniqueId",
                "type" : "string",
                "doc" : "Current Secure Form Instance Unique Id",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "LeSecureFormSubmittedEvent",
              "doc" : "* Event Name            : LeSecureFormSubmittedEvent\r\n    * Description           : LE secure form submit event will be consumed by reporting.\r\n    * Producer/Owner        : LE2.0\r\n    * Consumers list        : Data Platform, Billing, Engagement History\r\n    * When fired            : Fired when a secure form is filled and submitted by the visitor\r\n    * Expected Event Scale  : Chat\r\n    * Event category        : Business\r\n    * Event scope           : Chat\r\n    * Eng. Attribute        : no\r\n    * Comments              : no\r\n    * Deprecated            : no",
              "fields" : [ {
                "name" : "formId",
                "type" : "long",
                "doc" : "LE2.0 Secure From Id, Id is the same as in the legacy",
                "default" : -1
              }, {
                "name" : "formName",
                "type" : "string",
                "doc" : "LE2.0 Secure From Name, Name is the same as in the legacy",
                "default" : ""
              }, {
                "name" : "uuid",
                "type" : "string",
                "doc" : "UUID that reference to the answers of the form",
                "default" : ""
              }, {
                "name" : "repId",
                "type" : "long",
                "doc" : "Relevant Operator ID",
                "default" : -1
              }, {
                "name" : "participantType",
                "type" : "string",
                "doc" : "Agent/Visitor",
                "default" : ""
              }, {
                "name" : "by",
                "type" : "string",
                "doc" : "Agent name/ Visitor Id",
                "default" : ""
              }, {
                "name" : "command",
                "type" : "string",
                "doc" : "Secure Form Command",
                "default" : ""
              }, {
                "name" : "type",
                "type" : "string",
                "doc" : "Channel type",
                "default" : ""
              }, {
                "name" : "subType",
                "type" : "string",
                "doc" : "Channel Subtype",
                "default" : ""
              }, {
                "name" : "formUniqueId",
                "type" : "string",
                "doc" : "Current Secure Form Instance Unique Id",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "LeSecureFormAbortedEvent",
              "doc" : "* Event Name            : LeSecureFormAbortedEvent\r\n    * Description           : LE secure form abort event will be consumed by reporting.\r\n    * Producer/Owner        : LE2.0\r\n    * Consumers list        : Data Platform, Billing, Engagement History\r\n    * When fired            : Fired when a secure form flow is aborted\r\n    * Expected Event Scale  : Chat\r\n    * Event category        : Business\r\n    * Event scope           : Chat\r\n    * Eng. Attribute        : no\r\n    * Comments              : no\r\n    * Deprecated            : no",
              "fields" : [ {
                "name" : "formId",
                "type" : "long",
                "doc" : "LE2.0 Secure From Id, Id is the same as in the legacy",
                "default" : -1
              }, {
                "name" : "formName",
                "type" : "string",
                "doc" : "LE2.0 Secure From Name, Name is the same as in the legacy",
                "default" : ""
              }, {
                "name" : "participantType",
                "type" : "string",
                "doc" : "Agent/Visitor",
                "default" : ""
              }, {
                "name" : "by",
                "type" : "string",
                "doc" : "Agent name/ Visitor Id",
                "default" : ""
              }, {
                "name" : "command",
                "type" : "string",
                "doc" : "Secure Form Command",
                "default" : ""
              }, {
                "name" : "type",
                "type" : "string",
                "doc" : "Channel type",
                "default" : ""
              }, {
                "name" : "subType",
                "type" : "string",
                "doc" : "Channel Subtype",
                "default" : ""
              }, {
                "name" : "formUniqueId",
                "type" : "string",
                "doc" : "Current Secure Form Instance Unique Id",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "LeSecureFormViewedEvent",
              "doc" : "* Event Name            : LeSecureFormViewedEvent\r\n    * Description           : LE secure form viewed event will be consumed by reporting.\r\n    * Producer/Owner        : LE2.0\r\n    * Consumers list        : Data Platform, Billing, Engagement History\r\n    * When fired            : Fired when a secure form is viewed by the visitor\r\n    * Expected Event Scale  : Chat\r\n    * Event category        : Business\r\n    * Event scope           : Chat\r\n    * Eng. Attribute        : no\r\n    * Comments              : no\r\n    * Deprecated            : no",
              "fields" : [ {
                "name" : "formId",
                "type" : "long",
                "doc" : "LE2.0 Secure From Id, Id is the same as in the legacy",
                "default" : -1
              }, {
                "name" : "formName",
                "type" : "string",
                "doc" : "LE2.0 Secure From Name, Name is the same as in the legacy",
                "default" : ""
              }, {
                "name" : "participantType",
                "type" : "string",
                "doc" : "Agent/Visitor",
                "default" : ""
              }, {
                "name" : "by",
                "type" : "string",
                "doc" : "Agent name/ Visitor Id",
                "default" : ""
              }, {
                "name" : "command",
                "type" : "string",
                "doc" : "Secure Form Command",
                "default" : ""
              }, {
                "name" : "type",
                "type" : "string",
                "doc" : "Channel type",
                "default" : ""
              }, {
                "name" : "subType",
                "type" : "string",
                "doc" : "Channel Subtype",
                "default" : ""
              }, {
                "name" : "formUniqueId",
                "type" : "string",
                "doc" : "Current Secure Form Instance Unique Id",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "LeSecureFormReceivedEvent",
              "doc" : "* Event Name            : LeSecureFormReceivedEvent\r\n    * Description           : LE secure form received event will be consumed by reporting.\r\n    * Producer/Owner        : LE2.0\r\n    * Consumers list        : Data Platform, Billing, Engagement History\r\n    * When fired            : Fired when a secure form is received by the visitor\r\n    * Expected Event Scale  : Chat\r\n    * Event category        : Business\r\n    * Event scope           : Chat\r\n    * Eng. Attribute        : no\r\n    * Comments              : no\r\n    * Deprecated            : no",
              "fields" : [ {
                "name" : "formId",
                "type" : "long",
                "doc" : "LE2.0 Secure From Id, Id is the same as in the legacy",
                "default" : -1
              }, {
                "name" : "formName",
                "type" : "string",
                "doc" : "LE2.0 Secure From Name, Name is the same as in the legacy",
                "default" : ""
              }, {
                "name" : "participantType",
                "type" : "string",
                "doc" : "Agent/Visitor",
                "default" : ""
              }, {
                "name" : "by",
                "type" : "string",
                "doc" : "Agent name/ Visitor Id",
                "default" : ""
              }, {
                "name" : "command",
                "type" : "string",
                "doc" : "Secure Form Command",
                "default" : ""
              }, {
                "name" : "type",
                "type" : "string",
                "doc" : "Channel type",
                "default" : ""
              }, {
                "name" : "subType",
                "type" : "string",
                "doc" : "Channel Subtype",
                "default" : ""
              }, {
                "name" : "formUniqueId",
                "type" : "string",
                "doc" : "Current Secure Form Instance Unique Id",
                "default" : ""
              } ]
            }, {
              "type" : "record",
              "name" : "LeSecureFormSendEvent",
              "doc" : "* Event Name            : LeSecureFormSendEvent\r\n    * Description           : LE secure form send event will be consumed by reporting.\r\n    * Producer/Owner        : LE2.0\r\n    * Consumers list        : Data Platform, Billing, Engagement History\r\n    * When fired            : Fired when a secure form is sent\r\n    * Expected Event Scale  : Chat\r\n    * Event category        : Business\r\n    * Event scope           : Chat\r\n    * Eng. Attribute        : no\r\n    * Comments              : no\r\n    * Deprecated            : no",
              "fields" : [ {
                "name" : "formId",
                "type" : "long",
                "doc" : "LE2.0 Secure From Id, Id is the same as in the legacy",
                "default" : -1
              }, {
                "name" : "formName",
                "type" : "string",
                "doc" : "LE2.0 Secure From Name, Name is the same as in the legacy",
                "default" : ""
              }, {
                "name" : "participantType",
                "type" : "string",
                "doc" : "Agent/Visitor",
                "default" : ""
              }, {
                "name" : "by",
                "type" : "string",
                "doc" : "Agent name/ Visitor Id",
                "default" : ""
              }, {
                "name" : "command",
                "type" : "string",
                "doc" : "Secure Form Command",
                "default" : ""
              }, {
                "name" : "type",
                "type" : "string",
                "doc" : "Channel type",
                "default" : ""
              }, {
                "name" : "subType",
                "type" : "string",
                "doc" : "Channel Subtype",
                "default" : ""
              }, {
                "name" : "formUniqueId",
                "type" : "string",
                "doc" : "Current Secure Form Instance Unique Id",
                "default" : ""
              } ]
            } ],
            "doc" : "The body part of the original App Server event",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "EnterSiteEvent",
          "doc" : "Event Sent by Monitoring on EnterSite of a visitor",
          "fields" : [ ]
        }, {
          "type" : "record",
          "name" : "PageViewEvent",
          "doc" : "Event Generated every time a Visitor enters a new page\n        Produced by: Monitoring (Shark)\n        Consumed by:",
          "fields" : [ {
            "name" : "page",
            "type" : {
              "type" : "record",
              "name" : "URL",
              "doc" : "A URL representation",
              "fields" : [ {
                "name" : "url",
                "type" : "string",
                "default" : ""
              } ]
            },
            "default" : null
          }, {
            "name" : "referrer",
            "type" : "URL",
            "default" : null
          }, {
            "name" : "sections",
            "type" : [ "null", {
              "type" : "array",
              "items" : "string"
            } ],
            "default" : null
          }, {
            "name" : "title",
            "type" : [ "null", "string" ],
            "default" : null
          }, {
            "name" : "pageId",
            "type" : [ "null", "string" ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "LeaveSiteEvent",
          "doc" : "Shark sends this event when visitor leaves the customer site or when for any\n        other reason Shark decides to close the session.\n        Produced by: Monitoring (Shark)\n        Consumed by:",
          "fields" : [ {
            "name" : "lastActivityTimeInMillis",
            "type" : [ "null", "long" ],
            "doc" : "Last time the user showed activity on this session",
            "default" : null
          }, {
            "name" : "cause",
            "type" : [ "null", {
              "type" : "enum",
              "name" : "LeaveSiteCause",
              "doc" : "Possible reasons for ending a session, used in LeaveSiteEvent event\n        The values are taken from SessionEndCause, defined in Shark base data model.\n        since we want to be able to add new SessionEndCauses without breaking backward compatibility \n        we have decided to keep mapping the old SessionEndCause values to the existing LeaveSiteCause values\n        and new  SessionEndCause values that we will add from now on will be mapped to LeaveSiteCause.UNKNOWN\n        in order to know what is the actual value we introduced a new member which will be of type int and will indicate\n        what is the actual SessionEndCause and since its an int we will be able to add as many values as we want witn no BWC break.",
              "symbols" : [ "UNKNOWN", "INACTIVE_SESSION", "ACTIVELY_CLOSED" ]
            } ],
            "doc" : "Session ending cause",
            "default" : null
          }, {
            "name" : "sessionEndCause",
            "type" : "int",
            "doc" : "see documentation on enum LeaveSiteCause above. this field was introduced at 09.15 in order to allow us adding new causes\n            in sharkBaseDataModel without breaking compatibility. currently the available causes are:\n            INACTIVE_SESSION = 0 , ACTIVELY_CLOSED = 1 , EVENT_LIMIT_REACHED = 2;",
            "default" : -1
          } ]
        }, {
          "type" : "record",
          "name" : "ExternalInteractionEvent",
          "doc" : "ExternalInteractionEvent - SDE received from the visitor page containing external interaction type and status.\r\n              Produced by: shark\r\n              Consumed by: reporting\r\n              Scale: external interaction (voice)",
          "fields" : [ {
            "name" : "externalId",
            "type" : [ "null", "string" ],
            "doc" : "externalId - interaction id",
            "default" : null
          }, {
            "name" : "interactionType",
            "type" : [ "null", "string" ],
            "doc" : "interactionType - valid values : {EXTERNAL}",
            "default" : null
          }, {
            "name" : "interactionStatus",
            "type" : [ "null", "string" ],
            "doc" : "interactionStatus - valid values : {STARTED, ACTIVE, ENDED}",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ActivityInfoEvent",
          "doc" : "This event will be sent by shark on each visitor starting from the session creation till its end.\n         The event will be sent each time {#active} state is change according to shark configuration.n.\n\n        The definition of activeness / idleness is not defined by business and thus the client must override this logic according to its definition.\n\n         For example: Shark sent this event after 2 minutes of inactivity but visitor feed waits 8 minutes more and only than consider this visitor as inactive.",
          "fields" : [ {
            "name" : "active",
            "type" : "boolean",
            "default" : false
          }, {
            "name" : "lastTimeInMillis",
            "type" : "long",
            "default" : -1
          } ]
        }, {
          "type" : "record",
          "name" : "ConnectivityInfoEvent",
          "doc" : "This event will be sent by shark on each visitor starting from the session creation till its end.\n        The event will be sent each time {#connected} state is change according to shark configuration.\n\n        Not {#connected} means Shark didn't got any Heartbeat event in the last X minutes (default: 2 minutes).\n        The definition of connectivity is not defined by business and thus the client must override this logic according to its definition.\n\n        For example: Shark sent this event after 2 minutes of without heartbeat event but visitor feed waits 8 minutes more and only than consider this visitor as not connected.",
          "fields" : [ {
            "name" : "connected",
            "type" : "boolean",
            "default" : false
          }, {
            "name" : "lastTimeInMillis",
            "type" : "long",
            "default" : -1
          } ]
        }, {
          "type" : "record",
          "name" : "EventsLimitReachedEvent",
          "doc" : "This event is used to specify a session has reached it's maximum number of events per type.\n         This events supports hierarchy for example:\n         Event type can be {VisitorEvent} indicating total events count reached it's limit",
          "fields" : [ {
            "name" : "eventType",
            "type" : [ "null", "string" ],
            "default" : null
          }, {
            "name" : "limit",
            "type" : "long",
            "doc" : "reached limit of type [eventType] (for total events eventType will be visitorEvent.class)",
            "default" : -1
          }, {
            "name" : "isSessionEnded",
            "type" : "boolean",
            "doc" : "true if the session was marked for delete after limit was reached , false otherwise",
            "default" : false
          }, {
            "name" : "sessionEvents",
            "type" : "long",
            "doc" : "how many events of type [eventType] were actually submitted till the limit event was submited (might be more or less then  actual limit)",
            "default" : -1
          }, {
            "name" : "rejectedEvents",
            "type" : "long",
            "doc" : "how many events of type [eventType] were about to be submitted when we first reach the limit and the limit event was submited \n         note - when isSessionEnded equals false (for dry run) those events will be eventually submited",
            "default" : -1
          }, {
            "name" : "eventsCounters",
            "type" : [ "null", {
              "type" : "map",
              "values" : "int"
            } ],
            "doc" : "how many events per type [eventType] were actually submitted till the limit event was submited",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "SessionEndSuspectedEvent",
          "doc" : "@deprecated Event Sent by Monitoring on SessionEndSuspected of a visitor",
          "fields" : [ ]
        }, {
          "type" : "record",
          "name" : "StateChangeEvent",
          "doc" : "State Change event sent for every specific EventContext field.\n        The changes looks something like this:\n        [{ op: \"OVERRIDE\", EventContext: { \"refferer\" : \"http://....\"}}]\n        Produced by: Shark every event loop end\n        Consumed by:",
          "fields" : [ {
            "name" : "changes",
            "type" : {
              "type" : "array",
              "items" : {
                "type" : "record",
                "name" : "Change",
                "doc" : "Represents a state attribute data and the operation done on it.\n        Produced by: Monitoring (Shark)\n        Consumed by:",
                "fields" : [ {
                  "name" : "op",
                  "type" : {
                    "type" : "enum",
                    "name" : "OperationType",
                    "doc" : "Possible operations performed on context data entities\n        used in stateChange events and are defined generically so recostrcution of\n        state could be coded generically.",
                    "symbols" : [ "UNKNOWN", "ADD", "REMOVE", "OVERRIDE" ]
                  },
                  "default" : "UNKNOWN"
                }, {
                  "name" : "data",
                  "type" : {
                    "type" : "record",
                    "name" : "EventContext",
                    "doc" : "EventContext of the data kept in shark in session context has two structures today: SessionAttributes and\n       WebPages. Every time we send a state change event we use the data/context of one of these two.",
                    "fields" : [ {
                      "name" : "id",
                      "type" : "string",
                      "doc" : "Run time generated id automatically added by platform",
                      "default" : ""
                    }, {
                      "name" : "context",
                      "type" : [ {
                        "type" : "record",
                        "name" : "AppSessionContext",
                        "doc" : "Visitor Session Attributes (AppSession in Shark)\r\n        Produced by:  Shark Monitoring, Attribute Extraction Sharklet\r\n        consumed by:",
                        "fields" : [ {
                          "name" : "referrer",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "Referrer",
                            "doc" : "Referrer",
                            "fields" : [ {
                              "name" : "refUrl",
                              "type" : [ "string", "null" ],
                              "default" : ""
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "iPV4",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "IPV4",
                            "doc" : "IP V4 address",
                            "fields" : [ {
                              "name" : "ipAddress",
                              "type" : "string",
                              "default" : ""
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "iPV6",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "IPV6",
                            "doc" : "IP V6 address",
                            "fields" : [ {
                              "name" : "ipAddress",
                              "type" : "string",
                              "default" : ""
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "emtSessionId",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "EmtSessionId",
                            "fields" : [ {
                              "name" : "emtSessionId",
                              "type" : "string",
                              "default" : ""
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "emtVisitorId",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "EmtVisitorId",
                            "fields" : [ {
                              "name" : "emtVisitorId",
                              "type" : "string",
                              "default" : ""
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "startTime",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "StartTime",
                            "fields" : [ {
                              "name" : "startTime",
                              "type" : "long",
                              "default" : 0
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "browserCookiePolicy",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "BrowserCookiePolicy",
                            "fields" : [ {
                              "name" : "browserCookiePolicyType",
                              "type" : {
                                "type" : "enum",
                                "name" : "BrowserCookiePolicyType",
                                "doc" : "Browser cookie policy type predefined list, or clear text value\r\n        Produced by: Shark\r\n        consumed by: Shark",
                                "symbols" : [ "UNKNOWN", "FIRST_PARTY_COOKIE", "THIRD_PARTY_COOKIE" ]
                              },
                              "default" : "UNKNOWN"
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "visitorId",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "VisitorId",
                            "fields" : [ {
                              "name" : "visitorId",
                              "type" : "string",
                              "default" : ""
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "uDEs",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "UDEs",
                            "fields" : [ {
                              "name" : "udes",
                              "type" : {
                                "type" : "map",
                                "values" : "string"
                              },
                              "default" : null
                            } ],
                            "javaAnnotation" : [ "Deprecated" ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "userAgent",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "UserAgent",
                            "doc" : "userAgent   - raw data from user-agent header",
                            "fields" : [ {
                              "name" : "userAgent",
                              "type" : "string",
                              "default" : ""
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "returningVisitor",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ReturningVisitor",
                            "fields" : [ {
                              "name" : "lastVisitTimeStamp",
                              "type" : "long",
                              "default" : 0
                            }, {
                              "name" : "isReturning",
                              "type" : "boolean",
                              "default" : false
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "dirtyState",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "DirtyState",
                            "fields" : [ {
                              "name" : "previousNode",
                              "type" : [ "null", "string" ],
                              "default" : null
                            }, {
                              "name" : "previousSessionId",
                              "type" : "string",
                              "default" : ""
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "protocolInvalidity",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ProtocolInvalidity",
                            "fields" : [ {
                              "name" : "isInvalid",
                              "type" : "boolean",
                              "default" : false
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "deviceFamily",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "DeviceFamily",
                            "fields" : [ {
                              "name" : "deviceFamilyType",
                              "type" : "DeviceFamilyType",
                              "default" : "NA"
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "DeviceOS",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "DeviceOS",
                            "doc" : "The user operating system type",
                            "fields" : [ {
                              "name" : "deviceOSType",
                              "type" : "DeviceOSType",
                              "default" : "NA"
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "siteControlGroup",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "SiteControlGroup",
                            "fields" : [ {
                              "name" : "siteControlGroup",
                              "type" : "ControlGroupEnum",
                              "default" : "NA"
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "purchases",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "Purchases",
                            "fields" : [ {
                              "name" : "purchases",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "PurchaseMetadata",
                                  "doc" : "Avro representation of purchase data",
                                  "fields" : [ {
                                    "name" : "total",
                                    "type" : "double",
                                    "doc" : "Total purchase value field",
                                    "default" : 0
                                  }, {
                                    "name" : "orderId",
                                    "type" : [ "null", "string" ],
                                    "doc" : "Purchase order id",
                                    "default" : null
                                  }, {
                                    "name" : "purchaseSeqId",
                                    "type" : [ "null", "string" ],
                                    "doc" : "Purchase sequence id",
                                    "default" : null
                                  }, {
                                    "name" : "repeatedOrderId",
                                    "type" : [ "null", "boolean" ],
                                    "doc" : "Indicates if purchase order id was previously received in another purchase SDE in current session",
                                    "default" : null
                                  }, {
                                    "name" : "cartStatus",
                                    "type" : [ "null", {
                                      "type" : "record",
                                      "name" : "CartStatus",
                                      "doc" : "Avro representation for cart data",
                                      "fields" : [ {
                                        "name" : "total",
                                        "type" : [ "null", "double" ],
                                        "doc" : "Total cart price",
                                        "default" : null
                                      }, {
                                        "name" : "numItems",
                                        "type" : [ "null", "int" ],
                                        "doc" : "Number of items in cart",
                                        "default" : null
                                      }, {
                                        "name" : "products",
                                        "type" : [ "null", {
                                          "type" : "array",
                                          "items" : {
                                            "type" : "record",
                                            "name" : "CartProduct",
                                            "doc" : "Cart product is an extension of product\r\n    contains the base product entity and quantity field",
                                            "fields" : [ {
                                              "name" : "product",
                                              "type" : [ "null", {
                                                "type" : "record",
                                                "name" : "Product",
                                                "doc" : "This is the systems core product entity.\r\n    Containing fields shared among all products",
                                                "fields" : [ {
                                                  "name" : "sku",
                                                  "type" : [ "null", "string" ],
                                                  "doc" : "A unique identifier, identifying the product in customer data bases",
                                                  "default" : null
                                                }, {
                                                  "name" : "name",
                                                  "type" : [ "null", "string" ],
                                                  "doc" : "Product name",
                                                  "default" : null
                                                }, {
                                                  "name" : "category",
                                                  "type" : [ "null", "string" ],
                                                  "doc" : "Product category",
                                                  "default" : null
                                                }, {
                                                  "name" : "price",
                                                  "type" : [ "null", "double" ],
                                                  "doc" : "Product price",
                                                  "default" : null
                                                } ]
                                              } ],
                                              "doc" : "Base product entity",
                                              "default" : null
                                            }, {
                                              "name" : "quantity",
                                              "type" : [ "null", "int" ],
                                              "doc" : "Base product quantity",
                                              "default" : null
                                            } ]
                                          }
                                        } ],
                                        "doc" : "Array of cart products\r\n        Important - there is no validation or relation between cart general attributes and\r\n        aggregative values of products array",
                                        "default" : null
                                      }, {
                                        "name" : "currency",
                                        "type" : [ "null", "string" ],
                                        "doc" : "currency that represents the total cart price",
                                        "default" : null
                                      } ]
                                    } ],
                                    "doc" : "Cart status -\r\n        the total field is duplicated since it was already in use in purchase event prior to cart status data creation.\r\n        From now on, all common fields should be added to cart status only",
                                    "default" : null
                                  }, {
                                    "name" : "currency",
                                    "type" : [ "null", "string" ],
                                    "doc" : "currency with which the purchase was done",
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "cart",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "Cart",
                            "fields" : [ {
                              "name" : "cartStatus",
                              "type" : [ "null", "CartStatus" ],
                              "default" : null
                            }, {
                              "name" : "lastTotalChange",
                              "type" : [ "null", "double" ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "prodView",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ProdView",
                            "fields" : [ {
                              "name" : "products",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "ViewedProduct",
                                  "doc" : "Viewed product is an extension of product\r\n    contains the base products list entity field",
                                  "fields" : [ {
                                    "name" : "product",
                                    "type" : [ "null", "Product" ],
                                    "doc" : "Base product entity",
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "leads",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "Leads",
                            "fields" : [ {
                              "name" : "leads",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "LeadMetaData",
                                  "doc" : "Avro representation for lead data",
                                  "fields" : [ {
                                    "name" : "leadSeqId",
                                    "type" : [ "null", "string" ],
                                    "doc" : "Lead sequence id",
                                    "default" : null
                                  }, {
                                    "name" : "topic",
                                    "type" : [ "null", "string" ],
                                    "default" : null
                                  }, {
                                    "name" : "value",
                                    "type" : [ "null", "double" ],
                                    "default" : null
                                  }, {
                                    "name" : "leadId",
                                    "type" : [ "null", "string" ],
                                    "default" : null
                                  }, {
                                    "name" : "repeatedLeadId",
                                    "type" : [ "null", "boolean" ],
                                    "default" : null
                                  }, {
                                    "name" : "currency",
                                    "type" : [ "null", "string" ],
                                    "doc" : "currency that represents the value attribute",
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "goals",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "Goals",
                            "fields" : [ {
                              "name" : "goals",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "GoalAchievedEvent",
                                  "fields" : [ {
                                    "name" : "id",
                                    "type" : [ "null", "string" ],
                                    "doc" : "event guid",
                                    "default" : null
                                  }, {
                                    "name" : "goal",
                                    "type" : [ "null", {
                                      "type" : "record",
                                      "name" : "GoalEntity",
                                      "doc" : "Campaign Goal Entity definition",
                                      "fields" : [ {
                                        "name" : "id",
                                        "type" : "long",
                                        "doc" : "goal id",
                                        "default" : -1
                                      }, {
                                        "name" : "revision",
                                        "type" : [ "null", "string" ],
                                        "doc" : "goal definition revision",
                                        "default" : null
                                      }, {
                                        "name" : "goalType",
                                        "type" : "int",
                                        "doc" : "goal type",
                                        "default" : -1
                                      }, {
                                        "name" : "indicatorType",
                                        "type" : "int",
                                        "doc" : "indicator type",
                                        "default" : -1
                                      }, {
                                        "name" : "lRevision",
                                        "type" : [ "null", "long" ],
                                        "doc" : "Goal revision of type long",
                                        "default" : null
                                      } ]
                                    } ],
                                    "default" : null
                                  }, {
                                    "name" : "metadata",
                                    "type" : [ "null", {
                                      "type" : "record",
                                      "name" : "UrlGoalMetadata",
                                      "fields" : [ {
                                        "name" : "url",
                                        "type" : [ "null", "string" ],
                                        "default" : null
                                      } ]
                                    }, "PurchaseMetadata", {
                                      "type" : "record",
                                      "name" : "ReduceAbandonmentGoalMetadata",
                                      "fields" : [ {
                                        "name" : "numberOfPages",
                                        "type" : "int",
                                        "default" : -1
                                      } ]
                                    }, {
                                      "type" : "record",
                                      "name" : "IncreaseInteractionGoalMetadata",
                                      "fields" : [ {
                                        "name" : "engagement",
                                        "type" : [ "null", {
                                          "type" : "record",
                                          "name" : "EngagementEntity",
                                          "doc" : "Reference to Engagement Entity definition",
                                          "fields" : [ {
                                            "name" : "id",
                                            "type" : "long",
                                            "doc" : "engagement id",
                                            "default" : -1
                                          }, {
                                            "name" : "revision",
                                            "type" : [ "null", "string" ],
                                            "doc" : "engagement revision",
                                            "default" : null
                                          }, {
                                            "name" : "channel",
                                            "type" : "int",
                                            "doc" : "Available Channels today:\r\n            Unknown: -1\r\n            Chat: 1\r\n            Voice: 2\r\n            Multichannel: 3\r\n            Deprecated: 4\r\n            Deprecated: 5\r\n            Content: 5\r\n            Youtube: 6\r\n            PCI form: 7\r\n            Desktop Sharing: 8\r\n            File Sharing: 9",
                                            "default" : -1
                                          }, {
                                            "name" : "type",
                                            "type" : "int",
                                            "doc" : "Ids of Engagement types as: OVERLAY: 0, PEELING: 1, TOASTER: 2, SLIDER: 3, HTML: 4, INVITATION: 5, BUTTON: 6, STICKY_BUTTON: 7",
                                            "default" : -1
                                          }, {
                                            "name" : "lRevision",
                                            "type" : [ "null", "long" ],
                                            "doc" : "Engagement revision of type long",
                                            "default" : null
                                          }, {
                                            "name" : "visitorBehaviours",
                                            "type" : [ "null", {
                                              "type" : "array",
                                              "items" : {
                                                "type" : "record",
                                                "name" : "RevTargeting",
                                                "doc" : "Contains basic targeting information - id and revision",
                                                "fields" : [ {
                                                  "name" : "id",
                                                  "type" : [ "null", "long" ],
                                                  "doc" : "Targeting id",
                                                  "default" : null
                                                }, {
                                                  "name" : "revision",
                                                  "type" : [ "null", "long" ],
                                                  "doc" : "Targeting revision",
                                                  "default" : null
                                                } ]
                                              }
                                            } ],
                                            "default" : null
                                          }, {
                                            "name" : "onSiteLocations",
                                            "type" : [ "null", {
                                              "type" : "array",
                                              "items" : "RevTargeting"
                                            } ],
                                            "default" : null
                                          }, {
                                            "name" : "engagementSkill",
                                            "type" : [ "null", {
                                              "type" : "record",
                                              "name" : "AppServerSkill",
                                              "doc" : "App server skill representation including both name and id",
                                              "fields" : [ {
                                                "name" : "id",
                                                "type" : [ "null", "long" ],
                                                "default" : null
                                              }, {
                                                "name" : "name",
                                                "type" : [ "null", "string" ],
                                                "default" : null
                                              } ]
                                            } ],
                                            "default" : null
                                          }, {
                                            "name" : "surveySkills",
                                            "type" : [ "null", {
                                              "type" : "array",
                                              "items" : "AppServerSkill"
                                            } ],
                                            "default" : null
                                          }, {
                                            "name" : "isOffsiteEngagement",
                                            "type" : [ "null", "boolean" ],
                                            "default" : null
                                          }, {
                                            "name" : "availabilityPolicy",
                                            "type" : [ "null", "int" ],
                                            "doc" : "Availability Policy - The engagement state (online\\offline) will be changed according to this policy.\r\n        If availabilityPolicy is PROACTIVE (0): The engagement state will be changed to offline\\online according to the availability calculated by PIT\r\n        If availabilityPolicy is REACTIVE (1): The engagement state will be online if total-slots of all agents > 0, and offline if total-slots of all agents == 0\r\n\r\n        The default value is PROACTIVE (0)",
                                            "default" : null
                                          }, {
                                            "name" : "renderingType",
                                            "type" : [ "null", "int" ],
                                            "doc" : "Rendering Type - The engagement rendering type will be changed according to this type.\r\n        If renderingType is INTERNAL (0): The engagement will be showed with default content\r\n        If renderingType is HTML (1): The engagement will be showed by a predetermined html that defined (usually by the customer).\r\n        If renderingType is TAG (2): The engagement will be showed with predefined rendering tag\r\n\r\n        The default value is INTERNAL (0)",
                                            "default" : null
                                          }, {
                                            "name" : "conversationType",
                                            "type" : [ "null", "int" ],
                                            "doc" : "Conversation type -  The engagement target - chat or messaging. (For chat channel Only)\r\n        If conversationType is CHAT (0): The engagement will represent normal chat\r\n        If conversationType is MESSAGING (1): The engagement will represent messaging type chat, the engagement must be marked as authenticated\r\n\r\n        The default value is CHAT (0)",
                                            "default" : null
                                          }, {
                                            "name" : "refreshStateInterval",
                                            "type" : [ "null", "int" ],
                                            "doc" : "Refresh state interval -  The refresh interval in seconds for engagement (For chat channel Only)\r\n\r\n        The default value is null",
                                            "default" : null
                                          }, {
                                            "name" : "appInstallationId",
                                            "type" : [ "null", "string" ],
                                            "doc" : "AppInstallationId - representation of accountId and connector\r\n\r\n        The default value is null",
                                            "default" : null
                                          }, {
                                            "name" : "useSystemRouting",
                                            "type" : [ "null", "boolean" ],
                                            "doc" : "indicates whether or not use system routing for messaging\r\n         The default is null",
                                            "default" : null
                                          }, {
                                            "name" : "queuePriority",
                                            "type" : [ "null", "int" ],
                                            "doc" : "Queue Priority - number representing the queue priority\r\n         The default is null",
                                            "default" : null
                                          } ]
                                        } ],
                                        "doc" : "reference to engagement",
                                        "default" : null
                                      }, {
                                        "name" : "campaign",
                                        "type" : [ "null", {
                                          "type" : "record",
                                          "name" : "CampaignEntity",
                                          "doc" : "Reference to Campaign Entity definition",
                                          "fields" : [ {
                                            "name" : "id",
                                            "type" : "long",
                                            "doc" : "campaign id",
                                            "default" : -1
                                          }, {
                                            "name" : "goalId",
                                            "type" : "long",
                                            "doc" : "goal id",
                                            "default" : -1
                                          }, {
                                            "name" : "revision",
                                            "type" : [ "null", "string" ],
                                            "doc" : "campaign revision",
                                            "default" : null
                                          }, {
                                            "name" : "campaignEventSequence",
                                            "type" : [ "null", "int" ],
                                            "default" : null
                                          }, {
                                            "name" : "lRevision",
                                            "type" : [ "null", "long" ],
                                            "doc" : "Campaign revision of type long",
                                            "default" : null
                                          }, {
                                            "name" : "visitorProfiles",
                                            "type" : [ "null", {
                                              "type" : "array",
                                              "items" : "RevTargeting"
                                            } ],
                                            "default" : null
                                          }, {
                                            "name" : "lobId",
                                            "type" : [ "null", "long" ],
                                            "doc" : "lob id",
                                            "default" : null
                                          } ]
                                        } ],
                                        "doc" : "reference to campaign",
                                        "default" : null
                                      } ]
                                    }, "LeadMetaData", {
                                      "type" : "record",
                                      "name" : "ServiceActivityMetaData",
                                      "doc" : "Avro representation of the Service Activity",
                                      "fields" : [ {
                                        "name" : "serviceSeqId",
                                        "type" : [ "null", "string" ],
                                        "doc" : "SequenceId",
                                        "default" : null
                                      }, {
                                        "name" : "topic",
                                        "type" : [ "null", "string" ],
                                        "doc" : "Topic",
                                        "default" : null
                                      }, {
                                        "name" : "status",
                                        "type" : [ "null", "int" ],
                                        "doc" : "Status",
                                        "default" : null
                                      }, {
                                        "name" : "category",
                                        "type" : [ "null", "string" ],
                                        "doc" : "Category",
                                        "default" : null
                                      }, {
                                        "name" : "serviceId",
                                        "type" : [ "null", "string" ],
                                        "doc" : "ServiceId",
                                        "default" : null
                                      }, {
                                        "name" : "repeatedServiceActivity",
                                        "type" : [ "null", "boolean" ],
                                        "doc" : "repeatedServiceActivity - boolean indication if we already have a service activity in the session with the same\r\n              serviceId, status and topic",
                                        "default" : null
                                      } ]
                                    } ],
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "customerStatus",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "CustomerStatus",
                            "doc" : "Customer Status",
                            "fields" : [ {
                              "name" : "customerStatusId",
                              "type" : [ "null", "long" ],
                              "default" : null
                            }, {
                              "name" : "revision",
                              "type" : [ "null", "long" ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "customerType",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "CustomerType",
                            "doc" : "Customer Type",
                            "fields" : [ {
                              "name" : "customerTypeId",
                              "type" : [ "null", "long" ],
                              "default" : null
                            }, {
                              "name" : "revision",
                              "type" : [ "null", "long" ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "visitorErrors",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "VisitorErrors",
                            "fields" : [ {
                              "name" : "visitorErrors",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "VisitorError",
                                  "doc" : "Visitor Error",
                                  "fields" : [ {
                                    "name" : "code",
                                    "type" : [ "null", "long", "string" ],
                                    "doc" : "error code",
                                    "default" : null
                                  }, {
                                    "name" : "level",
                                    "type" : [ "null", "long" ],
                                    "doc" : "error level",
                                    "default" : null
                                  }, {
                                    "name" : "message",
                                    "type" : [ "null", "string" ],
                                    "doc" : "error message",
                                    "default" : null
                                  }, {
                                    "name" : "contextId",
                                    "type" : [ "null", "string" ],
                                    "doc" : "error context id - logical customer context NOT shark context",
                                    "default" : null
                                  }, {
                                    "name" : "resolved",
                                    "type" : [ "null", "boolean" ],
                                    "doc" : "error status - resolved/open",
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "customerInfo",
                          "type" : [ "null", "CustomerInfo" ],
                          "default" : null
                        }, {
                          "name" : "marketingCampaignInfo",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "MarketingCampaignInfo",
                            "doc" : "Avro representation of the Marketing Campaign Info",
                            "fields" : [ {
                              "name" : "originatingChannel",
                              "type" : [ "null", "int" ],
                              "doc" : "Originating channel",
                              "default" : null
                            }, {
                              "name" : "affiliate",
                              "type" : [ "null", "string" ],
                              "doc" : "Affiliate",
                              "default" : null
                            }, {
                              "name" : "campaignId",
                              "type" : [ "null", "string" ],
                              "doc" : "Campaign ID",
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "serviceActivities",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ServiceActivities",
                            "fields" : [ {
                              "name" : "serviceActivities",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "ServiceActivityMetaData"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "personalInfo",
                          "type" : [ "null", "PersonalInfo" ],
                          "default" : null
                        }, {
                          "name" : "allVisitorProfile",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "AllVisitorProfile",
                            "fields" : [ {
                              "name" : "allVisitorProfile",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "long"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "doc" : "targeting context data",
                          "default" : null
                        }, {
                          "name" : "activeVisitorProfile",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ActiveVisitorProfile",
                            "fields" : [ {
                              "name" : "activeVisitorProfile",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "long"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "allRevVPs",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "AllRevVPs",
                            "fields" : [ {
                              "name" : "allRevVPs",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "RevTargeting"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "activeRevVPs",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ActiveRevVPs",
                            "fields" : [ {
                              "name" : "activeRevVPs",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "RevTargeting"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "allOnSiteLocation",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "AllOnSiteLocation",
                            "fields" : [ {
                              "name" : "allOnSiteLocation",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "long"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "allRevOSLs",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "AllRevOSLs",
                            "fields" : [ {
                              "name" : "allRevOSLs",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "RevTargeting"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "activeVisitorBehavior",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ActiveVisitorBehavior",
                            "fields" : [ {
                              "name" : "activeVisitorBehavior",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "long"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "allVisitorBehavior",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "AllVisitorBehavior",
                            "fields" : [ {
                              "name" : "allVisitorBehavior",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "long"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "activeRevVBs",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ActiveRevVBs",
                            "fields" : [ {
                              "name" : "activeRevVBs",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "RevTargeting"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "allRevVBs",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "AllRevVBs",
                            "fields" : [ {
                              "name" : "allRevVBs",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "RevTargeting"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "geo",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "Geo",
                            "doc" : "The Visitor IP is translated into GEO data\r\n        extracted from the referrer URL\r\n        Produced by: Feature Extraction\r\n        consumed by: Targeting",
                            "fields" : [ {
                              "name" : "country",
                              "type" : [ "null", "string" ],
                              "default" : null
                            }, {
                              "name" : "city",
                              "type" : [ "null", "string" ],
                              "default" : null
                            }, {
                              "name" : "state",
                              "type" : [ "null", "string" ],
                              "default" : null
                            }, {
                              "name" : "org",
                              "type" : [ "null", "string" ],
                              "default" : null
                            }, {
                              "name" : "isp",
                              "type" : [ "null", "string" ],
                              "default" : null
                            }, {
                              "name" : "countryCode",
                              "type" : [ "null", "string" ],
                              "default" : null
                            } ]
                          } ],
                          "doc" : "Features extraction context data",
                          "default" : null
                        }, {
                          "name" : "searchEngine",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "SearchEngine",
                            "doc" : "If the visitor started a session after searching a known search engine, the engine and the keywords are\r\n        extracted from the referrer URL\r\n        Produced by: Feature Extraction\r\n        consumed by: Targeting",
                            "fields" : [ {
                              "name" : "searchEngine",
                              "type" : [ "null", "string" ],
                              "default" : null
                            }, {
                              "name" : "keywords",
                              "type" : [ "null", "string" ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "chatDeclined",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ChatDeclined",
                            "doc" : "This context data is created when the visitor declines a chat invitation\r\n        Produced by: Feature Extraction\r\n        consumed by: Decider\r\n        @deprecated will not be sent anymore",
                            "fields" : [ {
                              "name" : "chatInvitationDeclined",
                              "type" : [ "null", "boolean" ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "externalReferrer",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ExternalReferrer",
                            "doc" : "The external referrer of the visitor, extracted from the first page referrer\r\n        Produced by: Feature Extraction\r\n        consumed by: Targeting",
                            "fields" : [ {
                              "name" : "externalReferrer",
                              "type" : [ "null", "string" ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "iPComplex",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "IPComplex",
                            "doc" : "Internal representation of IP as complex\r\n        Produced by: Feature Extraction\r\n        consumed by: Targeting",
                            "fields" : [ {
                              "name" : "ipv4Address",
                              "type" : [ "null", {
                                "type" : "record",
                                "name" : "IPV4ConvertedData",
                                "doc" : "The  IP V4 string and long representation\r\n            Produced by: Feature Extraction\r\n            consumed by: Targeting",
                                "fields" : [ {
                                  "name" : "isValid",
                                  "type" : [ "null", "boolean" ],
                                  "default" : null
                                }, {
                                  "name" : "longIp",
                                  "type" : [ "null", "long" ],
                                  "default" : null
                                } ]
                              } ],
                              "default" : null
                            }, {
                              "name" : "ipv6Address",
                              "type" : [ "null", {
                                "type" : "record",
                                "name" : "IPV6ConvertedData",
                                "doc" : "The  IP V6 string and high/low bits representation\r\n            Produced by: Feature Extraction\r\n            consumed by: Targeting",
                                "fields" : [ {
                                  "name" : "isValid",
                                  "type" : [ "null", "boolean" ],
                                  "default" : null
                                }, {
                                  "name" : "highBit",
                                  "type" : [ "null", "long" ],
                                  "default" : null
                                }, {
                                  "name" : "lowBit",
                                  "type" : [ "null", "long" ],
                                  "default" : null
                                } ]
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "mobileDeviceInfo",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "MobileDeviceInfo",
                            "doc" : "MobileDeviceInfoContextData: whether the device is mobile or not\r\n        Produced by: Feature Extraction\r\n        consumed by: Targeting",
                            "fields" : [ {
                              "name" : "mobile",
                              "type" : [ "null", "boolean" ],
                              "default" : null
                            }, {
                              "name" : "detected",
                              "type" : [ "null", "boolean" ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "flowsData",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "FlowsData",
                            "doc" : "public class FlowsContextData extends CollectionContextData<FlowState> {\r\n        private Map<Long, FlowState> flows;",
                            "fields" : [ {
                              "name" : "flows",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "FlowState",
                                  "doc" : "The state of the visitor in the flow\r\n        Produced by: Feature Extraction\r\n        consumed by: Feature Extraction/Targeting",
                                  "fields" : [ {
                                    "name" : "status",
                                    "type" : [ "null", {
                                      "type" : "enum",
                                      "name" : "FlowStatus",
                                      "doc" : "FlowStatus: Status in the flow\r\n        Produced by: Feature Extraction\r\n        consumed by: Feature Extraction/Targeting",
                                      "symbols" : [ "NOT_IN_FLOW", "IN_FLOW", "FLOW_COMPLETED", "BACK_IN_FLOW", "FLOW_ABANDONED" ]
                                    } ],
                                    "default" : null
                                  }, {
                                    "name" : "flowId",
                                    "type" : [ "null", "long" ],
                                    "default" : null
                                  }, {
                                    "name" : "flowRevision",
                                    "type" : [ "null", "long" ],
                                    "default" : null
                                  }, {
                                    "name" : "flowStepIndex",
                                    "type" : [ "null", "int" ],
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "blackListedContentEngagements",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "BlackListedContentEngagements",
                            "doc" : "public class BlackListedContentEngagement extends CollectionContextData<ContentEngagementBlackListInfo> {\r\n        Set<ContentEngagementBlackListInfo> contentBlackListedEngagements;\r\n        @deprecated will not be sent anymore",
                            "fields" : [ {
                              "name" : "blackListed",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "BlackListedEngagementInfo",
                                  "doc" : "A list containing all black listed (declined) content engagement\r\n        Produced by: Feature Extraction\r\n        consumed by: Decider\r\n        @deprecated will not be sent anymore",
                                  "fields" : [ {
                                    "name" : "engagementId",
                                    "type" : [ "null", "long" ],
                                    "default" : null
                                  }, {
                                    "name" : "engagementRevision",
                                    "type" : [ "null", "long" ],
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "activeChat",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ActiveChat",
                            "doc" : "public class ActiveChat extends ContextData {\r\n        Boolean chatActive;",
                            "fields" : [ {
                              "name" : "chatActive",
                              "type" : [ "null", "boolean" ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "deviceOSDetails",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "DeviceOSDetails",
                            "doc" : "The user operating system details\r\n        family       - represents the more commonly used operating system families, e.g MAC_OS, WINDOWS. \r\n        name         - internal family name in the UAS database. \r\n        version      - version number of user operating system.",
                            "fields" : [ {
                              "name" : "family",
                              "type" : [ "null", "string" ],
                              "default" : null
                            }, {
                              "name" : "name",
                              "type" : [ "null", "string" ],
                              "default" : null
                            }, {
                              "name" : "version",
                              "type" : [ "null", "string" ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "userAgentDetails",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "UserAgentDetails",
                            "doc" : "User Agent details\r\n        type        - type of an user agent, e.g BROWSER or MOBILE_BROWSER. \r\n        family      - more commonly used user agent families, e.g CHROME or FIREFOX. \r\n        name        - name of an user agent, e.g Safari or Chrome. \r\n        version     - version number of an user agent.\r\n        icon        - browser icon image",
                            "fields" : [ {
                              "name" : "type",
                              "type" : [ "null", "string" ],
                              "default" : null
                            }, {
                              "name" : "family",
                              "type" : [ "null", "string" ],
                              "default" : null
                            }, {
                              "name" : "name",
                              "type" : [ "null", "string" ],
                              "default" : null
                            }, {
                              "name" : "version",
                              "type" : [ "null", "string" ],
                              "default" : null
                            }, {
                              "name" : "icon",
                              "type" : [ "null", "string" ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "pTScoringData",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "PTScoringData",
                            "doc" : "Visitor PT scores.\r\n     Returned as part of scoring response and stored as part of Visitor context\r\n     Generated by PT Scoring Server",
                            "fields" : [ {
                              "name" : "requestTimestamp",
                              "type" : "long",
                              "doc" : "The scoring request timestamp",
                              "default" : -1
                            }, {
                              "name" : "scoresMapping",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "ScoreMapping",
                                  "doc" : "Engagement -> Score mapping (one to many) : For each engagement, ID that refers to ScoreData.scoreId\r\n     Generated by PT Scoring Server\r\n     Note: Score for many engagements can be calculated by the same model.",
                                  "fields" : [ {
                                    "name" : "engagementId",
                                    "type" : "long",
                                    "doc" : "Engagement id",
                                    "default" : -1
                                  }, {
                                    "name" : "engagementRevision",
                                    "type" : "string",
                                    "doc" : "Engagement version",
                                    "default" : ""
                                  }, {
                                    "name" : "scoreId",
                                    "type" : "long",
                                    "doc" : "Internal score id. A reference to an id in ScoreData",
                                    "default" : -1
                                  } ]
                                }
                              } ],
                              "doc" : "Mapping Engagement->Score. Note: it is possible that same model is used for calculating scores for different engagements",
                              "default" : null
                            }, {
                              "name" : "scores",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "ScoreData",
                                  "doc" : "Visitor PT score record according to a specific PT model.\r\n     Generated by PT Scoring Server",
                                  "fields" : [ {
                                    "name" : "scoreId",
                                    "type" : "long",
                                    "doc" : "The single score internal id",
                                    "default" : -1
                                  }, {
                                    "name" : "entity",
                                    "type" : [ "null", {
                                      "type" : "record",
                                      "name" : "ScoringEntity",
                                      "doc" : "A generic identifier of a scoring entity.\r\n        Generated by PT Scoring Server.\r\n        'abTestVersion' is used for scorefloor calculation in case of a/b testing\r\n        'additionalInfo' is for debug purposes only",
                                      "fields" : [ {
                                        "name" : "abTestVersion",
                                        "type" : "string",
                                        "doc" : "A/B test info",
                                        "default" : "A"
                                      }, {
                                        "name" : "additionalInfo",
                                        "type" : {
                                          "type" : "map",
                                          "values" : {
                                            "type" : "record",
                                            "name" : "ScoringAdditionalInfo",
                                            "doc" : "Additional information used to identify a scoring entity.\r\n        Generated by PT Scoring Server.",
                                            "fields" : [ {
                                              "name" : "data",
                                              "type" : [ "null", "string", "long", {
                                                "type" : "map",
                                                "values" : "ScoringAdditionalInfo"
                                              } ],
                                              "default" : null
                                            } ]
                                          }
                                        },
                                        "doc" : "Additional information about scoring entity (such as: siteID, goal type)",
                                        "default" : null
                                      } ]
                                    } ],
                                    "doc" : "Scoring entity represents the entity the scoring model was build for. For example, site & goal type",
                                    "default" : null
                                  }, {
                                    "name" : "score",
                                    "type" : [ "null", {
                                      "type" : "record",
                                      "name" : "ScoreToken",
                                      "doc" : "Visitor score acording to a specific PT model.\r\n     Generated by PT Scoring Server",
                                      "fields" : [ {
                                        "name" : "score",
                                        "type" : "double",
                                        "doc" : "Calculated score",
                                        "default" : 0
                                      }, {
                                        "name" : "token",
                                        "type" : [ "null", "string" ],
                                        "doc" : "addition score info for debug purposes. Will usually be NULL",
                                        "default" : null
                                      } ]
                                    } ],
                                    "doc" : "Score calculated by PT scoring server according to the model",
                                    "default" : null
                                  }, {
                                    "name" : "modelVersion",
                                    "type" : "long",
                                    "doc" : "An id of PT model version according to which the score was calculated",
                                    "default" : -1
                                  }, {
                                    "name" : "scoreReason",
                                    "type" : "string",
                                    "doc" : "A scoring reason",
                                    "default" : ""
                                  } ]
                                }
                              } ],
                              "doc" : "All the scores calculated in a PT Scoring Server in one Scoring request",
                              "default" : null
                            } ]
                          } ],
                          "doc" : "PT Scoring context data representing all the PT scores calculated for the visitor",
                          "default" : null
                        } ]
                      }, {
                        "type" : "record",
                        "name" : "PageContext",
                        "doc" : "A page context entity\r\n         Produced by: Shark\r\n         Consumed by:",
                        "fields" : [ {
                          "name" : "uRL",
                          "type" : [ "null", "URL" ],
                          "doc" : "@deprecated use PageBasicData instead",
                          "default" : null
                        }, {
                          "name" : "referrer",
                          "type" : [ "null", "Referrer" ],
                          "doc" : "@deprecated use PageBasicData instead",
                          "default" : null
                        }, {
                          "name" : "pageTitle",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "PageTitle",
                            "doc" : "Page Title",
                            "fields" : [ {
                              "name" : "title",
                              "type" : [ "string", "null" ],
                              "default" : ""
                            } ],
                            "javaAnnotation" : [ "Deprecated" ]
                          } ],
                          "doc" : "@deprecated use PageBasicData instead",
                          "default" : null
                        }, {
                          "name" : "uDEs",
                          "type" : [ "null", "UDEs" ],
                          "doc" : "@deprecated not in use",
                          "default" : null
                        }, {
                          "name" : "startTime",
                          "type" : [ "null", "StartTime" ],
                          "doc" : "@deprecated use PageBasicData instead",
                          "default" : null
                        }, {
                          "name" : "pageLoaded",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "PageLoaded",
                            "fields" : [ {
                              "name" : "isLoaded",
                              "type" : "boolean",
                              "default" : false
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "pageBasicData",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "PageBasicData",
                            "doc" : "Page basic data contains:\r\n    url, referrer, start time (enter time to the page), title and list of sections in the page.",
                            "fields" : [ {
                              "name" : "url",
                              "type" : "string",
                              "doc" : "empty string means the url is not applied",
                              "default" : ""
                            }, {
                              "name" : "startTime",
                              "type" : "long",
                              "default" : 0
                            }, {
                              "name" : "refUrl",
                              "type" : [ "string", "null" ],
                              "default" : ""
                            }, {
                              "name" : "title",
                              "type" : [ "string", "null" ],
                              "default" : ""
                            }, {
                              "name" : "sections",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "string"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "timeOnPage",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "TimeOnPage",
                            "fields" : [ {
                              "name" : "timeOnPage",
                              "type" : "long",
                              "default" : 0
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "offsiteContextData",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "OffsiteContextData",
                            "doc" : "OffsiteContextData holds requested offsite engagement attributes.",
                            "fields" : [ {
                              "name" : "requestedCampaignId",
                              "type" : [ "null", "long" ],
                              "doc" : "requested campaign id",
                              "default" : null
                            }, {
                              "name" : "requestedEngagementId",
                              "type" : [ "null", "long" ],
                              "doc" : "requested engagement id",
                              "default" : null
                            }, {
                              "name" : "contextId",
                              "type" : [ "null", "string" ],
                              "doc" : "context id",
                              "default" : null
                            }, {
                              "name" : "webView",
                              "type" : [ "null", "boolean" ],
                              "doc" : "indicates if request is coming from web view",
                              "default" : null
                            }, {
                              "name" : "offsiteRequestType",
                              "type" : [ "null", "int" ],
                              "doc" : "offsite request type enum:\r\n            STANDARD,  Regular offsite request - goes through eligibility and availability checks\r\n            TOKENIZED  Contains limited time token  - if token valid no eligibility or availability checks are performed",
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "externalWaitTime",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ExternalWaitTime",
                            "doc" : "* Originally created for IVR use case\r\n    * It indicates the estimated wait time for the visitor to be answered by agent of IVR system\r\n    * It can also be used for other external queueing systems",
                            "fields" : [ {
                              "name" : "waitTimeSeconds",
                              "type" : [ "null", "long" ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        }, {
                          "name" : "activeOnSiteLocation",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ActiveOnSiteLocation",
                            "fields" : [ {
                              "name" : "activeOnSiteLocation",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "long"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "doc" : "* targeting context data",
                          "default" : null
                        }, {
                          "name" : "activeRevOSLs",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ActiveRevOSLs",
                            "fields" : [ {
                              "name" : "activeRevOSLs",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : "RevTargeting"
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "default" : null
                        } ]
                      }, {
                        "type" : "record",
                        "name" : "EngagementContext",
                        "doc" : "EngagementContext represents things like impression ID for engagement, allows saving origin context for the event.",
                        "fields" : [ {
                          "name" : "engagementDataContext",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "EngagementDataContext",
                            "doc" : "EngagementContextData hold the impression ID for engagement.",
                            "fields" : [ {
                              "name" : "campaign",
                              "type" : [ "null", "CampaignEntity" ],
                              "doc" : "Campaign entity",
                              "default" : null
                            }, {
                              "name" : "engagement",
                              "type" : [ "null", "EngagementEntity" ],
                              "doc" : "Engagement entity",
                              "default" : null
                            }, {
                              "name" : "firstFollowMeEngagementContextId",
                              "type" : [ "null", "string" ],
                              "doc" : "context id of the engagement that started the follow me sequence",
                              "default" : null
                            }, {
                              "name" : "state",
                              "type" : [ "null", "int" ],
                              "doc" : "selected display instance type(content/chat_online/chat_offline)",
                              "default" : null
                            }, {
                              "name" : "zoneId",
                              "type" : [ "null", "long" ],
                              "doc" : "zone id on which engagement was displayed",
                              "default" : null
                            }, {
                              "name" : "campaignControl",
                              "type" : "ControlGroupEnum",
                              "doc" : "campaign control indicator",
                              "default" : "NA"
                            }, {
                              "name" : "pageId",
                              "type" : [ "null", "string" ],
                              "doc" : "page id where the decision was taken for this engagement",
                              "default" : null
                            } ]
                          } ],
                          "doc" : "Engagement data",
                          "default" : null
                        }, {
                          "name" : "OENAContextData",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "OENAContextData",
                            "doc" : "Offsite Engagement Not Applicable Event\r\n        Fires upon not applicable offsite engagement",
                            "fields" : [ {
                              "name" : "reason",
                              "type" : [ "null", "int" ],
                              "default" : null
                            }, {
                              "name" : "requestedCampaignId",
                              "type" : [ "null", "long" ],
                              "default" : null
                            }, {
                              "name" : "requestedEngagementId",
                              "type" : [ "null", "long" ],
                              "default" : null
                            }, {
                              "name" : "campaign",
                              "type" : [ "null", {
                                "type" : "record",
                                "name" : "EntityRef",
                                "doc" : "Basic AC entity ref",
                                "fields" : [ {
                                  "name" : "id",
                                  "type" : "long",
                                  "doc" : "entity id",
                                  "default" : -1
                                }, {
                                  "name" : "revision",
                                  "type" : [ "null", "string" ],
                                  "doc" : "entity revision",
                                  "default" : null
                                } ]
                              } ],
                              "default" : null
                            }, {
                              "name" : "engagement",
                              "type" : [ "null", "EntityRef" ],
                              "default" : null
                            }, {
                              "name" : "actionTaken",
                              "type" : [ "null", {
                                "type" : "record",
                                "name" : "OENAAction",
                                "doc" : "Offsite Engagement Not Applicable Action\r\n        Describes the action taken for not applicable offsite engagement",
                                "fields" : [ {
                                  "name" : "level",
                                  "type" : [ "null", "int" ],
                                  "default" : null
                                }, {
                                  "name" : "type",
                                  "type" : [ "null", "int" ],
                                  "default" : null
                                }, {
                                  "name" : "metadata",
                                  "type" : [ "null", {
                                    "type" : "record",
                                    "name" : "OENASurveyActionMetadata",
                                    "doc" : "Offsite Engagement Not Applicable Survey Action Metadata\r\n        Metadata of not applicable offsite engagement offline survey action",
                                    "fields" : [ {
                                      "name" : "surveyId",
                                      "type" : [ "null", "string" ],
                                      "default" : null
                                    } ]
                                  }, {
                                    "type" : "record",
                                    "name" : "OENARedirectActionMetadata",
                                    "doc" : "Offsite Engagement Not Applicable Redirect Action Metadata\r\n        Metadata of not applicable offsite engagement redirect action",
                                    "fields" : [ {
                                      "name" : "redirectUrl",
                                      "type" : [ "null", "string" ],
                                      "default" : null
                                    } ]
                                  } ],
                                  "default" : null
                                } ]
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "doc" : "Context data for offsite engagement that is not applicable",
                          "default" : null
                        }, {
                          "name" : "impressionAccepted",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ImpressionAccepted",
                            "doc" : "ImpressionAcceptedContextData translated from visitor corresponding event\r\n                Produced by: Feature Extraction\r\n                Consumed by: Targeting",
                            "fields" : [ {
                              "name" : "data",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "ImpressionAcceptedData",
                                  "fields" : [ {
                                    "name" : "data",
                                    "type" : [ "null", {
                                      "type" : "record",
                                      "name" : "BaseActivityData",
                                      "fields" : [ {
                                        "name" : "activityTime",
                                        "type" : [ "null", "long" ],
                                        "default" : null
                                      }, {
                                        "name" : "pageId",
                                        "type" : [ "null", "string" ],
                                        "default" : null
                                      } ]
                                    } ],
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "doc" : "Indicates an impression was clicked on by the visitor",
                          "default" : null
                        }, {
                          "name" : "impressionClosed",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ImpressionClosed",
                            "doc" : "ImpressionClosedContextData translated from visitor corresponding event\r\n                Produced by: Feature Extraction\r\n                Consumed by: Targeting",
                            "fields" : [ {
                              "name" : "data",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "ImpressionClosedData",
                                  "fields" : [ {
                                    "name" : "data",
                                    "type" : [ "null", "BaseActivityData" ],
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "doc" : "Indicates an impression was closed",
                          "default" : null
                        }, {
                          "name" : "impressionExpanded",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ImpressionExpanded",
                            "fields" : [ {
                              "name" : "data",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "ImpressionExpandedData",
                                  "doc" : "ImpressionExpandedData translated from visitor corresponding event\r\n          Produced by: Feature Extraction Sharklet\r\n          Consumed by: Targeting Sharklet",
                                  "fields" : [ {
                                    "name" : "data",
                                    "type" : [ "null", "BaseActivityData" ],
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "doc" : "Indicates an impression window was Expanded",
                          "default" : null
                        }, {
                          "name" : "engagementExpanded",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "EngagementExpanded",
                            "fields" : [ {
                              "name" : "data",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "EngagementExpandedData",
                                  "doc" : "EngagementExpandedData translated from visitor corresponding event\r\n         Produced by: deprecated\r\n         Consumed by: deprecated",
                                  "fields" : [ {
                                    "name" : "data",
                                    "type" : [ "null", "BaseActivityData" ],
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "doc" : "Indicates an Engagement window was Expanded",
                          "default" : null
                        }, {
                          "name" : "impressionDisplayed",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ImpressionDisplayed",
                            "doc" : "ImpressionDisplayedContextData translated from visitor corresponding event\r\n            Produced by: Feature Extraction\r\n            Consumed by: Targeting",
                            "fields" : [ {
                              "name" : "data",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "ImpressionDisplayedData",
                                  "fields" : [ {
                                    "name" : "data",
                                    "type" : [ "null", "BaseActivityData" ],
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "doc" : "Indicates an impression was displayed",
                          "default" : null
                        }, {
                          "name" : "chatInteractive",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ChatInteractive",
                            "doc" : "ChatInteractiveContextData translated from visitor corresponding event\r\n            Produced by: Feature Extraction\r\n            Consumed by: Targeting",
                            "fields" : [ {
                              "name" : "data",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "ChatInteractiveData",
                                  "fields" : [ {
                                    "name" : "data",
                                    "type" : [ "null", "BaseActivityData" ],
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "doc" : "Indicates a chat is interactive",
                          "default" : null
                        }, {
                          "name" : "impressionTimeout",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ImpressionTimeout",
                            "fields" : [ {
                              "name" : "data",
                              "type" : [ "null", {
                                "type" : "array",
                                "items" : {
                                  "type" : "record",
                                  "name" : "ImpressionTimeoutData",
                                  "fields" : [ {
                                    "name" : "data",
                                    "type" : [ "null", "BaseActivityData" ],
                                    "default" : null
                                  } ]
                                }
                              } ],
                              "default" : null
                            } ]
                          } ],
                          "doc" : "Indicates a timeout on an impression has elapsed",
                          "default" : null
                        } ]
                      }, {
                        "type" : "record",
                        "name" : "ExternalContext",
                        "doc" : "Produced by: Shark\r\n             Consumed by:",
                        "fields" : [ ]
                      } ],
                      "default" : null
                    } ]
                  },
                  "default" : null
                } ]
              }
            },
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "VisitorStateSnapshotEvent",
          "doc" : "* Event name      : VisitorStateSnapshotEvent\n\t * Description     : A selected subset of data of a visitor monitoring session taken in a specific moment.\n\t * Producer/Owner  : Shark monitoring platform\n\t * Consumers list  : Engagement History, Reporting\n\t * When fired      : On every session creation and when a chat starts\n\t * Event scale     : Visitor\n\t * Event category  : System\n\t * Event scope     : Visitor\n\t * Eng. attribute  : no\n\t * Comments        : \n\t * Deprecated      : no",
          "fields" : [ {
            "name" : "appSessionContext",
            "type" : [ "null", "AppSessionContext" ],
            "doc" : "The visitor session attributes",
            "default" : null
          }, {
            "name" : "pageContext",
            "type" : [ "null", "PageContext" ],
            "doc" : "The page where the decision was taken for this engagement",
            "default" : null
          }, {
            "name" : "engagementContext",
            "type" : [ "null", "EngagementContext" ],
            "doc" : "The engagement context",
            "default" : null
          }, {
            "name" : "engagementContextId",
            "type" : [ "null", "string" ],
            "doc" : "The engagement context ID created by shark monitoring system",
            "default" : null
          }, {
            "name" : "interactionData",
            "type" : [ "null", {
              "type" : "record",
              "name" : "VisitorInteraction",
              "doc" : "* Describes the visitor interaction metadata.",
              "fields" : [ {
                "name" : "interactionType",
                "type" : [ "null", "string" ],
                "doc" : "The interaction type string, value can be [chat, voice]",
                "default" : null
              }, {
                "name" : "interactionId",
                "type" : [ "null", "string" ],
                "doc" : "* The identifier provided by server that manages this interaction.\n\t\t * For instance, live chat is manages by legacy appserver and rtSessionId will be assigned as identifier.",
                "default" : null
              } ]
            } ],
            "doc" : "Visitor interaction data",
            "default" : null
          }, {
            "name" : "triggerIndicator",
            "type" : [ "null", "int" ],
            "doc" : "Event triggered by indicator 0 - session created, 1 - chat started, 2 - messaging started, 3 - session ended",
            "default" : null
          }, {
            "name" : "pageImpressions",
            "type" : [ "null", {
              "type" : "array",
              "items" : {
                "type" : "record",
                "name" : "PageImpressions",
                "doc" : "A page with impressions entity\r\n          Produced by: Shark\r\n          Consumed by: Engagement History",
                "fields" : [ {
                  "name" : "pageContext",
                  "type" : [ "null", "PageContext" ],
                  "default" : null
                }, {
                  "name" : "impressions",
                  "type" : [ "null", {
                    "type" : "array",
                    "items" : {
                      "type" : "record",
                      "name" : "BaseImpression",
                      "doc" : "main common fields for all impression events\r\n        HOVER?",
                      "fields" : [ {
                        "name" : "engagement",
                        "type" : [ "null", "EngagementEntity" ],
                        "doc" : "reference to engagement",
                        "default" : null
                      }, {
                        "name" : "campaign",
                        "type" : [ "null", "CampaignEntity" ],
                        "doc" : "reference to campaign",
                        "default" : null
                      }, {
                        "name" : "goal",
                        "type" : [ "null", "GoalEntity" ],
                        "doc" : "goal",
                        "default" : null
                      }, {
                        "name" : "engagementInstanceId",
                        "type" : [ "null", "string" ],
                        "doc" : "engagement context id",
                        "default" : null
                      }, {
                        "name" : "state",
                        "type" : [ "null", "int" ],
                        "doc" : "content = 0/chat_online = 1/chat_offline = 2/offsite = 3/chat_busy = 4",
                        "default" : null
                      }, {
                        "name" : "campaignControl",
                        "type" : "ControlGroupEnum",
                        "doc" : "campaign control indicator",
                        "default" : "NA"
                      } ]
                    }
                  } ],
                  "default" : null
                } ]
              }
            } ],
            "doc" : "Last pages with their shown impressions",
            "default" : null
          } ]
        }, "GoalAchievedEvent", {
          "type" : "record",
          "name" : "VisitorErrorEvent",
          "fields" : [ {
            "name" : "visitorError",
            "type" : [ "null", "VisitorError" ],
            "default" : null
          } ]
        }, "CustomerInfoEvent", "PersonalInfoEvent", {
          "type" : "record",
          "name" : "SearchContentEvent",
          "doc" : "* Event name      : SearchContentEvent\r\n    \t * Description     : SDE received from the visitor page containing info about the search content.\r\n    \t * Producer/Owner  : Shark monitoring platform\r\n    \t * Consumers list  :\r\n    \t * When fired      : SDEs\r\n    \t * Event scale     : Visitor\r\n    \t * Event category  :\r\n    \t * Event scope     : Visitor\r\n    \t * Eng. attribute  : no\r\n    \t * Comments        :\r\n    \t * Deprecated      : no",
          "fields" : [ {
            "name" : "keywords",
            "type" : [ "null", {
              "type" : "array",
              "items" : "string"
            } ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "PurchaseEvent",
          "doc" : "This event is reported for each purchase sde entering the system",
          "fields" : [ {
            "name" : "purchaseMetadata",
            "type" : [ "null", "PurchaseMetadata" ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "CartStatusEvent",
          "doc" : "This event is reported for each cart status sde entering the system",
          "fields" : [ {
            "name" : "cartStatusMetadata",
            "type" : [ "null", "CartStatus" ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ViewedProductEvent",
          "doc" : "This event is reported for each viewed product entering the system",
          "fields" : [ {
            "name" : "products",
            "type" : [ "null", {
              "type" : "array",
              "items" : "ViewedProduct"
            } ],
            "default" : null
          }, {
            "name" : "currency",
            "type" : [ "null", "string" ],
            "doc" : "currency that represents the viewed products price",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "LeadEvent",
          "doc" : "This event is reported for each lead sde entering the system",
          "fields" : [ {
            "name" : "lead",
            "type" : [ "null", "LeadMetaData" ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "MarketingCampaignInfoEvent",
          "doc" : "Avro representation of the Marketing Campaign Info Event",
          "fields" : [ {
            "name" : "marketingInfo",
            "type" : [ "null", "MarketingCampaignInfo" ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "EligibleForCampaignEvent",
          "doc" : "Visitor is eligible to a campaign\r\n        Raise after filter phase (but before availability and capping), once for each campaign with all applicable engagements,\r\n        regardless if visitor is in control group or not.\r\n        Produced by: decision sharklet\r\n        Consumed by: reporting\r\n        @deprecated  Use EligibilityEvent to combine all the data",
          "fields" : [ {
            "name" : "data",
            "type" : [ "null", {
              "type" : "record",
              "name" : "BaseCampaign",
              "fields" : [ {
                "name" : "engagements",
                "type" : [ "null", {
                  "type" : "array",
                  "items" : "EngagementEntity"
                } ],
                "doc" : "list of campaign engagements, currently can be only 1",
                "default" : null
              }, {
                "name" : "campaign",
                "type" : [ "null", "CampaignEntity" ],
                "doc" : "The eligible campaign",
                "default" : null
              }, {
                "name" : "goal",
                "type" : [ "null", "GoalEntity" ],
                "doc" : "Campaign goal",
                "default" : null
              }, {
                "name" : "campaignControl",
                "type" : "ControlGroupEnum",
                "doc" : "campaign control indicator",
                "default" : "NA"
              } ]
            } ],
            "default" : null
          } ],
          "javaAnnotation" : [ "Deprecated" ]
        }, {
          "type" : "record",
          "name" : "WinningCampaignEvent",
          "doc" : "Winning engagements - raise after selecting winning campaign, one for each campaign,\r\n        regardless if visitor is in control group or not.\r\n        site control indicator, campaign control indicator (could be control type enum: {none, site, campaign})\r\n        Produced by: decision sharklet\r\n        Consumed by: reporting",
          "fields" : [ {
            "name" : "data",
            "type" : [ "null", "BaseCampaign" ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "AvailabilityCheckEvent",
          "doc" : "AvailabilityResponseState\n   /**\n        information for all skills in the account\n        Produced by: PD RT component (sharklet)\n        Consumed by: PD NRT component (storm)",
          "fields" : [ {
            "name" : "skillInfo",
            "type" : {
              "type" : "array",
              "items" : {
                "type" : "record",
                "name" : "SkillInfo",
                "fields" : [ {
                  "name" : "accountId",
                  "type" : "string",
                  "default" : ""
                }, {
                  "name" : "channel",
                  "type" : "string",
                  "default" : ""
                }, {
                  "name" : "resourceId",
                  "type" : "string",
                  "default" : ""
                }, {
                  "name" : "checkCount",
                  "type" : "int",
                  "default" : 0
                }, {
                  "name" : "positiveCount",
                  "type" : "int",
                  "default" : 0
                }, {
                  "name" : "pdState",
                  "type" : {
                    "type" : "record",
                    "name" : "PDState",
                    "doc" : "*  This event indicates the number of availability checks made by the decider to the predictive dialer in a given time window.\n      *  Includes all availability checks for all skills, how many of them were responded positively, and the statistics (throughtput/offset) on which they were based.\n      *  Produced by: PD Sharklet\n      *  Consumed by: Storm PD Topology",
                    "fields" : [ {
                      "name" : "throughputPercentage",
                      "type" : "double",
                      "doc" : "Throughput percentage",
                      "default" : -1
                    }, {
                      "name" : "offsetPercentage",
                      "type" : "double",
                      "doc" : "Offset percentage",
                      "default" : -1
                    }, {
                      "name" : "throughputPercentageTimestamp",
                      "type" : [ "null", "long" ],
                      "doc" : "Throughput percentage timestamp",
                      "default" : null
                    }, {
                      "name" : "offsetPercentageTimestamp",
                      "type" : [ "null", "long" ],
                      "doc" : "Offset percentage timestamp",
                      "default" : null
                    }, {
                      "name" : "throughputFallbackFactor",
                      "type" : [ "null", "double" ],
                      "doc" : "Fallback throughput ratio factor that was configured in Site Settings",
                      "default" : null
                    }, {
                      "name" : "offsetFallbackFactor",
                      "type" : [ "null", "double" ],
                      "doc" : "Fallback offset ratio factor that was configured in Site Settings. used for small skills (throughput = 0)",
                      "default" : null
                    }, {
                      "name" : "chatDurationSec",
                      "type" : [ "null", "int" ],
                      "doc" : "Deprecated",
                      "default" : null
                    }, {
                      "name" : "isFallbackEnabled",
                      "type" : [ "null", "boolean" ],
                      "doc" : "Indication that PD is in fallback",
                      "default" : null
                    }, {
                      "name" : "configuredFbMethod",
                      "type" : [ "null", "string" ],
                      "doc" : "The fallback method that was configured in Site Settings (IsAgentOnline | SlotsCalculation)",
                      "default" : null
                    }, {
                      "name" : "actualFbMethod",
                      "type" : [ "null", "string" ],
                      "doc" : "Unused",
                      "default" : null
                    }, {
                      "name" : "fallbackChatDurationSec",
                      "type" : [ "null", "int" ],
                      "doc" : "Fallback average chat duration that was configured in Site Settings. used for large skills (throughput > 0)",
                      "default" : null
                    } ]
                  },
                  "default" : null
                } ]
              }
            },
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ImpressionShowEvent",
          "doc" : "* Event name      : ImpressionShowEvent\r\n\t* Description     : An impression is displayed to visitor\r\n\t* Producer/Owner  : Shark monitoring platform\r\n\t* Consumers list  : Reporting\r\n\t* When fired      : When ImpressionDisplayEvent is fired\r\n\t* Event scale     : Visitor\r\n\t* Event category  :\r\n\t* Event scope     : Visitor\r\n\t* Eng. attribute  :\r\n\t* Comments        :\r\n\t* Deprecated      : No",
          "fields" : [ {
            "name" : "data",
            "type" : [ "null", "BaseImpression" ],
            "default" : null
          }, {
            "name" : "url",
            "type" : [ "null", "string" ],
            "default" : null
          }, {
            "name" : "title",
            "type" : [ "null", "string" ],
            "default" : null
          }, {
            "name" : "previousState",
            "type" : [ "null", "int" ],
            "doc" : "If the engagement was refreshed, the previous state of the engagement (default is null)",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ImpressionTimeoutEvent",
          "doc" : "ImpressionTimeoutEvent visitor ignored\r\n            Produced by: client to SMT\r\n            Consumed by: reporting",
          "fields" : [ {
            "name" : "data",
            "type" : [ "null", "BaseImpression" ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ImpressionCloseEvent",
          "doc" : "ImpressionCloseEvent visitor closed the impression\r\n            Produced by: client to SMT\r\n            Consumed by: reporting",
          "fields" : [ {
            "name" : "data",
            "type" : [ "null", "BaseImpression" ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ImpressionAcceptEvent",
          "doc" : "ImpressionAcceptEvent visitor accepted the engagement\r\n            Produced by: client to SMT\r\n            Consumed by: reporting\r\n            AvroActionableItem: the actionable item that inclde:\r\n                id: generate id for ActionableItem\r\n                itemType: the type of ActionableItem BUTTON/LINK/SEARCH_KEYWORD\r\n                name: the name of ActionableItem\r\n                searchWord: the text of the search",
          "fields" : [ {
            "name" : "data",
            "type" : [ "null", "BaseImpression" ],
            "default" : null
          }, {
            "name" : "actionableItemInfo",
            "type" : [ "null", {
              "type" : "record",
              "name" : "AvroActionableItem",
              "doc" : "AvroActionableItem: LINKS/BUTTONS/SEARCH_KEYWORD in the impression expanded event\r\n            Produced by: client to SMT\r\n            Consumed by: reporting\r\n\r\n            id: generate id for ActionableItem\r\n            itemType: the type of ActionableItem LINK(1)/BUTTON(2)/SEARCH_KEYWORD(3);\r\n            name: the name of ActionableItem\r\n            searchWord: the text of the search",
              "fields" : [ {
                "name" : "id",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "itemType",
                "type" : "int",
                "default" : -1
              }, {
                "name" : "name",
                "type" : [ "null", "string" ],
                "default" : null
              }, {
                "name" : "searchWord",
                "type" : [ "null", "string" ],
                "default" : null
              } ]
            } ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "EngagementExpandedEvent",
          "doc" : "EngagementExpandedEvent:\r\n            Produced by: deprecated use ImpressionExpandedEvent\r\n            Consumed by: deprecated use ImpressionExpandedEvent\r\n\r\n            expanded: is the engagement expanded or restricted\r\n            byclick: the engagement expanded by click or not\r\n            AvroActionableItem: the actionable item that inclde:\r\n                            id: generate id for ActionableItem\r\n                            itemType: the type of ActionableItem BUTTON/LINK/SEARCH_KEYWORD\r\n                            name: the name of ActionableItem\r\n                            searchWord: the text of the search",
          "fields" : [ {
            "name" : "expanded",
            "type" : "boolean",
            "default" : false
          }, {
            "name" : "byClick",
            "type" : "boolean",
            "default" : false
          }, {
            "name" : "impression",
            "type" : [ "null", "BaseImpression" ],
            "default" : null
          }, {
            "name" : "actionableItems",
            "type" : [ "null", {
              "type" : "array",
              "items" : "AvroActionableItem"
            } ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ImpressionExpandedEvent",
          "doc" : "ImpressionExpandedEvent:\r\n            Produced by: client to SMT\r\n            Consumed by: reporting\r\n\r\n            expanded: is the impression expanded or restricted\r\n            byclick: the impression expanded by click or not\r\n            AvroActionableItem: the actionable item include:\r\n                            id: generate id for ActionableItem\r\n                            itemType: the type of ActionableItem BUTTON/LINK/SEARCH_KEYWORD\r\n                            name: the name of ActionableItem\r\n                            searchWord: the text of the search",
          "fields" : [ {
            "name" : "expanded",
            "type" : "boolean",
            "default" : false
          }, {
            "name" : "userInit",
            "type" : "boolean",
            "default" : false
          }, {
            "name" : "impression",
            "type" : [ "null", "BaseImpression" ],
            "default" : null
          }, {
            "name" : "actionableItems",
            "type" : [ "null", {
              "type" : "array",
              "items" : "AvroActionableItem"
            } ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ControlEvent",
          "doc" : "* Event Name      : ControlEvent\n    * Description     : Whale Auditing System event. producer with auditing enabled will generate this event. will be consumed by the auditing backend\n    * Producer        : Data Platform. WRPA (Whale Resilient Producer)\n    * Consumers list  : Data Platform Audit Framework\n    * When fired      : Fired per bulk of events,which  sent to Kafka according to internal Data Platfrom logic\n    * Expected Event Scale  : Visitor\n    * Event category  : System\n    * Event scope     : Global (applied to all event-types)\n    * Eng. Attribute  : no\n    * Comments        : Each producer must use WRPA firing this event, otherwise DP audit framework will not work properly\n    * Deprecated      : no",
          "fields" : [ {
            "name" : "counter",
            "type" : "long",
            "doc" : "* Number of events in this bulk",
            "default" : -1
          }, {
            "name" : "aggregatorType",
            "type" : {
              "type" : "enum",
              "name" : "AggregatorType",
              "doc" : "* which type of Control event\n    * UNKNOWN - Default Should not be used (means a bug)\n    * CONTINUOUS - means partial counting of events for this bulk (bulk id is in auditing header)\n    * FINAL - means final counting of the events for this bulk\n    *\n    *",
              "symbols" : [ "UNKNOWN", "CONTINUOUS", "FINAL" ]
            },
            "doc" : "* the type of aggregation (Final or continues)",
            "default" : "UNKNOWN"
          }, {
            "name" : "additionalInfo",
            "type" : [ "null", "string" ],
            "doc" : "* additional event data for debug (for example hadoop job id)",
            "default" : null
          }, {
            "name" : "eventTypeAggregator",
            "type" : [ "null", {
              "type" : "array",
              "items" : {
                "type" : "record",
                "name" : "EventTypeAggregator",
                "fields" : [ {
                  "name" : "eventType",
                  "type" : "string",
                  "doc" : " \n    * WRPA uses both text and avro, Wahoo uses only avro (currently) \n    * event type should be string to support both text and avro (WRPA) \n    * when using only Wahoo --> change to EventTypeEnum ",
                  "default" : "UNKNOWN"
                }, {
                  "name" : "aggregator",
                  "type" : "long",
                  "default" : -1
                } ]
              }
            } ],
            "doc" : " \n        * counter per event type in bulk",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "TagVersionDetectedEvent",
          "doc" : "Holds the tag version detected on the visitor page.",
          "fields" : [ {
            "name" : "version",
            "type" : [ "null", "string" ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "EligibilityEvent",
          "doc" : "Visitor eligible engagements\r\n        Raised after Decision eligibility before scoring\r\n        Produced by: decision sharklet\r\n        Consumed by: scoring sharklet",
          "fields" : [ {
            "name" : "eligibility",
            "type" : {
              "type" : "record",
              "name" : "EligibilityEventBase",
              "fields" : [ {
                "name" : "campaigns",
                "type" : [ "null", {
                  "type" : "array",
                  "items" : "BaseCampaign"
                } ],
                "default" : null
              }, {
                "name" : "eventSequence",
                "type" : "int",
                "doc" : "This sequence indicated how many times this event was fired in current session *",
                "default" : -1
              } ]
            },
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "EligibilityAfterScoringEvent",
          "doc" : "Visitor eligible engagements\r\n        Raised after scoring before PD Availability decision that will take into account new PT score\r\n        Produced by: scoring sharklet\r\n        Consumed by: PD sharklet",
          "fields" : [ {
            "name" : "eligibility",
            "type" : "EligibilityEventBase",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "PTScoringRequestEvent",
          "doc" : "Input for PT Scoring server needed for visitor PT score calculation",
          "fields" : [ {
            "name" : "engagements",
            "type" : [ "null", {
              "type" : "array",
              "items" : {
                "type" : "record",
                "name" : "EngagementForScoring",
                "doc" : "Engagement info needed for scoring calculation",
                "fields" : [ {
                  "name" : "engagementEntity",
                  "type" : "EntityRef",
                  "default" : null
                }, {
                  "name" : "channel",
                  "type" : "int",
                  "default" : -1
                }, {
                  "name" : "goalType",
                  "type" : "int",
                  "default" : -1
                } ]
              }
            } ],
            "doc" : "List of eligible engagements",
            "default" : null
          }, {
            "name" : "visitorState",
            "type" : {
              "type" : "record",
              "name" : "VisitorStateForScoring",
              "doc" : "Full Visitor state for PT Score calculation.\r\n     Passed as part of PT Scoring request to PT Scoring server",
              "fields" : [ {
                "name" : "session",
                "type" : "AppSessionContext",
                "default" : null
              }, {
                "name" : "pages",
                "type" : [ "null", {
                  "type" : "array",
                  "items" : "PageContext"
                } ],
                "default" : null
              }, {
                "name" : "engagements",
                "type" : [ "null", {
                  "type" : "array",
                  "items" : "EngagementContext"
                } ],
                "default" : null
              } ]
            },
            "doc" : "Full visitor state needed for score calculation",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "PTScoringDataEvent",
          "doc" : "Response calculated score data.",
          "fields" : [ {
            "name" : "scoringData",
            "type" : "PTScoringData",
            "doc" : "The resulting score",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "PTScoreFloorEvent",
          "doc" : "PT ScoreFloor event.\r\n     Generated by PT scoring sharklet each time new scorefloor is generated",
          "fields" : [ {
            "name" : "entity",
            "type" : [ "null", "ScoringEntity" ],
            "doc" : "Scoring entity represents the entity the scoring model was build for. For example, site & goal type",
            "default" : null
          }, {
            "name" : "skillId",
            "type" : "long",
            "doc" : "Skill ID scorefloor was calculated for",
            "default" : -1
          }, {
            "name" : "scoreFloorData",
            "type" : [ "null", {
              "type" : "record",
              "name" : "ScoreFloorData",
              "doc" : "ScoreFloor data.",
              "fields" : [ {
                "name" : "floor",
                "type" : "double",
                "doc" : "scorefloor - number between 0 and 1",
                "default" : -1
              }, {
                "name" : "percentAboveFloor",
                "type" : "double",
                "doc" : "Percent of visitors to invite when visitor score is above score floor - number between 0 and 1",
                "default" : -1
              }, {
                "name" : "percentEqualFloor",
                "type" : "double",
                "doc" : "Percent of visitors to invite when visitor score is equal to score floor - number between 0 and 1",
                "default" : -1
              }, {
                "name" : "modelVersion",
                "type" : "long",
                "doc" : "An id of PT model version according to which scores were calculated",
                "default" : -1
              }, {
                "name" : "creationDate",
                "type" : "long",
                "doc" : "Timestamp of creation date of the scorefloor",
                "default" : -1
              }, {
                "name" : "oldestScoreUsedTimestamp",
                "type" : "long",
                "doc" : "Timestamp of an oldest score used in scorefloor calculation",
                "default" : -1
              }, {
                "name" : "newestScoreUsedTimestamp",
                "type" : "long",
                "doc" : "Timestamp of a newest score used in scorefloor calculation",
                "default" : -1
              }, {
                "name" : "numberOfScores",
                "type" : "long",
                "doc" : "Number of scores used in scorefloor calculation",
                "default" : -1
              }, {
                "name" : "scoreFloorPercentage",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "ScoreFloorPercentage",
                  "doc" : "ScoreFloorPercentage data.",
                  "fields" : [ {
                    "name" : "throughput",
                    "type" : "double",
                    "doc" : "throughput percentage",
                    "default" : 0.0
                  }, {
                    "name" : "clientOffsetTime",
                    "type" : "long",
                    "doc" : "offset timespan",
                    "default" : 0
                  }, {
                    "name" : "availabilityOffsetState",
                    "type" : {
                      "type" : "enum",
                      "name" : "AvailabilityOffsetState",
                      "doc" : "AvailabilityOffsetState",
                      "symbols" : [ "ALWAYS", "NEVER", "NONE" ]
                    },
                    "doc" : "availability offset state",
                    "default" : "NONE"
                  }, {
                    "name" : "expirationTime",
                    "type" : "long",
                    "doc" : "expiration timestamp",
                    "default" : 0
                  }, {
                    "name" : "requiredPercentage",
                    "type" : "double",
                    "doc" : "calculated requiredPercentage",
                    "default" : 0.0
                  } ]
                } ],
                "doc" : "scoreFloorPercentage - availability percentage for Score Floor Calculation",
                "default" : null
              } ]
            } ],
            "doc" : "Scorefloor data",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "PTSmartAllocationResultEvent",
          "doc" : "PT ScoreFloor allocation result event.\r\n     Generated by PT scorefloor handler each time a selection is made for engagement allocation",
          "fields" : [ {
            "name" : "allocationResults",
            "type" : {
              "type" : "array",
              "items" : {
                "type" : "record",
                "name" : "ScoreFloorEngagementAllocationResult",
                "doc" : "Single PT ScoreFloor allocation result event.\r\n     Generated by PT scorefloor handler each time a selection is made for engagement allocation",
                "fields" : [ {
                  "name" : "engagementEntity",
                  "type" : "EngagementEntity",
                  "doc" : "Engagement queried for allocation",
                  "default" : null
                }, {
                  "name" : "scoringEntity",
                  "type" : [ "null", "ScoringEntity" ],
                  "doc" : "Scoring entity represents the entity the scoring model was build for. For example, site & goal type",
                  "default" : null
                }, {
                  "name" : "scoreFloorCreationDate",
                  "type" : "long",
                  "doc" : "Scorefloor creation result",
                  "default" : -1
                }, {
                  "name" : "visitorScoringRequestDate",
                  "type" : "long",
                  "doc" : "Visitor score creation date",
                  "default" : -1
                }, {
                  "name" : "allocationReason",
                  "type" : "string",
                  "doc" : "The allocation result reason",
                  "default" : ""
                }, {
                  "name" : "allocationResult",
                  "type" : "string",
                  "doc" : "The allocation result",
                  "default" : ""
                }, {
                  "name" : "rand",
                  "type" : [ "null", "double" ],
                  "doc" : "visitor's random for allocation decision",
                  "default" : null
                }, {
                  "name" : "scoreFloorData",
                  "type" : [ "null", "ScoreFloorData" ],
                  "doc" : "ScoreFloor used for allocation decision",
                  "default" : null
                }, {
                  "name" : "scoreToken",
                  "type" : [ "null", "ScoreToken" ],
                  "doc" : "ScoreToken used for allocation decision",
                  "default" : null
                }, {
                  "name" : "queriedSkill",
                  "type" : [ "null", "long" ],
                  "doc" : "the skill that was queried - can be either the engagement skill or a survey skill",
                  "default" : null
                }, {
                  "name" : "isSurveySkill",
                  "type" : "boolean",
                  "doc" : "whether the skill that was queried was a survey skill or the engagement skill",
                  "default" : false
                }, {
                  "name" : "queueSize",
                  "type" : "int",
                  "doc" : "The skill's queue size",
                  "default" : -1
                }, {
                  "name" : "expectedWaitTimeSeconds",
                  "type" : "int",
                  "doc" : "Expected wait time for visitor per skill transferred to IVR",
                  "default" : -1
                } ]
              }
            },
            "doc" : "Scoring entity represents the entity the scoring model was build for. For example, site & goal type",
            "default" : null
          }, {
            "name" : "externalData",
            "type" : [ "null", {
              "type" : "record",
              "name" : "ExternalData",
              "doc" : "Object containing any external data that is passed to Shark external API",
              "fields" : [ {
                "name" : "externalWaitTimeSeconds",
                "type" : [ "null", "long" ],
                "doc" : "External Wait Time in Seconds as passed to shark external API from IVR",
                "default" : null
              } ]
            } ],
            "doc" : "External Data that arrives from external systems, such as IVR.",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "AvailableEngagementsEvent",
          "doc" : "Visitor all available engagements\r\n        Raised after PD availability decision before selection\r\n        Produced by: PD sharklet\r\n        Consumed by: decision sharklet",
          "fields" : [ {
            "name" : "eligibility",
            "type" : "EligibilityEventBase",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "PostedEDREvent",
          "doc" : "This event indicates an engagement for which customer was charged\n        Produced by: Billing CPI\n        Consumed by: Reporting",
          "fields" : [ {
            "name" : "channelID",
            "type" : "long",
            "doc" : "chat, voice, etc.",
            "default" : -1
          }, {
            "name" : "actionTypeID",
            "type" : "long",
            "doc" : "sent, impression, etc.",
            "default" : -1
          }, {
            "name" : "eventID",
            "type" : "string",
            "doc" : "edr id",
            "default" : ""
          }, {
            "name" : "insertTime",
            "type" : "long",
            "doc" : "insertion time to vertica",
            "default" : -1
          }, {
            "name" : "billingMonth",
            "type" : "long",
            "doc" : "the month of the invoice",
            "default" : -1
          }, {
            "name" : "duration",
            "type" : "string",
            "doc" : "duration of interaction",
            "default" : ""
          }, {
            "name" : "creditCost",
            "type" : "double",
            "doc" : "sum of credits",
            "default" : -1
          }, {
            "name" : "rateID",
            "type" : "long",
            "doc" : "credits per type",
            "default" : -1
          }, {
            "name" : "uomID",
            "type" : "long",
            "doc" : "telephony, engagements",
            "default" : -1
          }, {
            "name" : "summationKey",
            "type" : "string",
            "doc" : "aggregation identifier",
            "default" : ""
          }, {
            "name" : "sentToZuoraDate",
            "type" : "long",
            "doc" : "upload date to zuora",
            "default" : -1
          }, {
            "name" : "invoiceID",
            "type" : "string",
            "doc" : "invoice id in zuora",
            "default" : ""
          }, {
            "name" : "campaignId",
            "type" : "int",
            "doc" : "campaign id",
            "default" : -1
          } ]
        }, {
          "type" : "record",
          "name" : "OffsiteEngagementEvent",
          "doc" : "OffsiteEngamentEvent opened an offsite\r\n            Produced by: client to SMT\r\n            Consumed by: reporting",
          "fields" : [ {
            "name" : "campaignId",
            "type" : [ "null", "long", "string" ],
            "doc" : "Targeted campaign ID",
            "default" : null
          }, {
            "name" : "ImpressionCount",
            "type" : [ "null", "long" ],
            "doc" : "Impression count for single user per campaign",
            "default" : null
          }, {
            "name" : "date",
            "type" : [ "null", "string" ],
            "doc" : "Last seen date",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "OEAEvent",
          "doc" : "Offsite Engagement Applicable Event\r\n        Fires when the requested offsite engagement is applicable",
          "fields" : [ {
            "name" : "state",
            "type" : [ "null", "int" ],
            "doc" : "Availability state\r\n            CHAT_ONLINE(1)\r\n            CHAT_OFFLINE(2)",
            "default" : null
          }, {
            "name" : "campaign",
            "type" : [ "null", "CampaignEntity" ],
            "doc" : "Campaign entity",
            "default" : null
          }, {
            "name" : "engagement",
            "type" : [ "null", "EngagementEntity" ],
            "doc" : "Engagement entity",
            "default" : null
          }, {
            "name" : "goal",
            "type" : [ "null", "GoalEntity" ],
            "doc" : "Goal entity",
            "default" : null
          }, {
            "name" : "requestedCampaignId",
            "type" : [ "null", "long" ],
            "doc" : "Externally requested campaign id",
            "default" : null
          }, {
            "name" : "requestedEngagementId",
            "type" : [ "null", "long" ],
            "doc" : "Externally requested engagement id",
            "default" : null
          }, {
            "name" : "contextId",
            "type" : [ "null", "string" ],
            "doc" : "Context Id",
            "default" : null
          }, {
            "name" : "actionTaken",
            "type" : [ "null", {
              "type" : "record",
              "name" : "OEAOpenAction",
              "doc" : "Offsite Engagement Applicable OpenAction\r\n        Describes the chat open action taken for applicable offsite engagement",
              "fields" : [ {
                "name" : "openMode",
                "type" : [ "null", "int" ],
                "default" : null
              }, {
                "name" : "metadata",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "OEAEmbeddedActionMetadata",
                  "doc" : "Offsite Engagement Applicable Embedded Action Metadata\r\n        Metadata of applicable offsite engagement embedded window open action",
                  "fields" : [ {
                    "name" : "redirectUrl",
                    "type" : [ "null", "string" ],
                    "default" : null
                  } ]
                } ],
                "default" : null
              } ]
            } ],
            "doc" : "Open action taken",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "OENAEvent",
          "doc" : "Offsite Engagement Not Applicable Event\r\n        Fires upon not applicable offsite engagement",
          "fields" : [ {
            "name" : "reason",
            "type" : [ "null", "int" ],
            "doc" : "Reason for which the requested offsite engagement is not applicable\r\n            FILTERED_OUT_CAMPAIGN_DATE_RANGE = 0,\r\n            FILTERED_OUT_CAMPAIGN_OPERATION_HOURS = 1,\r\n            FILTERED_OUT_CAMPAIGN_VISITOR_PROFILE = 2,\r\n            FILTERED_OUT_ENGAGEMENT_ONSITE_LOCATION = 3,\r\n            FILTERED_OUT_ENGAGEMENT_VISITOR_BEHAVIOURAL = 4,\r\n            NOT_FOUND = 5; // Deleted, unpublished, disabled or unknown ids",
            "default" : null
          }, {
            "name" : "requestedCampaignId",
            "type" : [ "null", "long" ],
            "doc" : "Externally requested campaign id",
            "default" : null
          }, {
            "name" : "requestedEngagementId",
            "type" : [ "null", "long" ],
            "doc" : "Externally requested engagement id",
            "default" : null
          }, {
            "name" : "contextId",
            "type" : [ "null", "string" ],
            "doc" : "Context Id",
            "default" : null
          }, {
            "name" : "campaign",
            "type" : [ "null", "EntityRef" ],
            "doc" : "Campaign Id and revision as it exists in shark, if found",
            "default" : null
          }, {
            "name" : "engagement",
            "type" : [ "null", "EntityRef" ],
            "doc" : "Engagement Id and revision as it exists in shark, if found",
            "default" : null
          }, {
            "name" : "actionTaken",
            "type" : [ "null", "OENAAction" ],
            "doc" : "The action taken",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "OEAcceptedEvent",
          "doc" : "Offsite Engagement Accepted Event\r\n        Fires when the requested offsite engagement is applicable",
          "fields" : [ {
            "name" : "requestedCampaignId",
            "type" : [ "null", "long" ],
            "doc" : "Externally requested campaign id",
            "default" : null
          }, {
            "name" : "requestedEngagementId",
            "type" : [ "null", "long" ],
            "doc" : "Externally requested engagement id",
            "default" : null
          }, {
            "name" : "refSessionId",
            "type" : [ "null", "string" ],
            "doc" : "Reference session id, currently only relevant for IVR engagements\r\n            The session id in which the IVR engagement was originally fired",
            "default" : null
          }, {
            "name" : "refVisitorId",
            "type" : [ "null", "string" ],
            "doc" : "Reference visitor id, currently only relevant for IVR engagements\r\n            The visitor id for which the IVR engagement was originally fired",
            "default" : null
          }, {
            "name" : "contextId",
            "type" : [ "null", "string" ],
            "doc" : "Context Id",
            "default" : null
          }, {
            "name" : "goal",
            "type" : [ "null", "GoalEntity" ],
            "doc" : "Goal entity\r\n            Goal entity of the requested campaign\r\n            NULL in case requested campaign or engagement not found.",
            "default" : null
          }, {
            "name" : "offsiteRequestType",
            "type" : [ "null", "int" ],
            "doc" : "offsite request type enum:\r\n            STANDARD = 0,  Regular offsite request - goes through eligibility and availability checks\r\n            TOKENIZED = 1,  Contains limited time token  - if token valid no eligibility or availability checks are performed",
            "default" : null
          }, {
            "name" : "timestamp",
            "type" : [ "null", "long" ],
            "doc" : "Offsite engagement time stamp\r\n            Timestamp of the original engagement (when initially dispatched by decider sharklet)\r\n            Currently relevant for IVR requests only.",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "OffsiteEngagementRequestExpiredEvent",
          "doc" : "Offsite engagement request expired event\r\n        Fires when an tokenized (time limited) offsite engagement was requested but token is expired.\r\n        Currently relevant for IVR only",
          "fields" : [ {
            "name" : "requestedCampaignId",
            "type" : [ "null", "long" ],
            "doc" : "Externally requested campaign id",
            "default" : null
          }, {
            "name" : "requestedEngagementId",
            "type" : [ "null", "long" ],
            "doc" : "Externally requested engagement id",
            "default" : null
          }, {
            "name" : "refSessionId",
            "type" : [ "null", "string" ],
            "doc" : "Reference session id\r\n            The session id in which the IVR engagement was originally fired",
            "default" : null
          }, {
            "name" : "refVisitorId",
            "type" : [ "null", "string" ],
            "doc" : "Reference visitor id\r\n            The visitor id for which the IVR engagement was originally fired",
            "default" : null
          }, {
            "name" : "contextId",
            "type" : [ "null", "string" ],
            "doc" : "Context Id",
            "default" : null
          }, {
            "name" : "timeStamp",
            "type" : [ "null", "long" ],
            "doc" : "Offsite engagement time stamp\r\n            Timestamp of the original engagement (when initially dispatched by decider sharklet)\r\n            Currently relevant for IVR requests only.",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "OffsiteEngRedirectRequestedEvent",
          "doc" : "Offsite Engagement Redirect Requested Event\n        Fired by le redirect service when offsite eng redirect request is received.\n        This event is fired once per request (no fired again in case we requested account load retry)\n        The event contains the generated context id assigned for this request.",
          "fields" : [ {
            "name" : "offsiteRequestInfo",
            "type" : [ "null", {
              "type" : "record",
              "name" : "OffsiteRequestInfo",
              "doc" : "Offsite request info\n        This data structure contains offsite request details",
              "fields" : [ {
                "name" : "requestedCampaignId",
                "type" : [ "null", "long" ],
                "doc" : "Externally requested campaign id",
                "default" : null
              }, {
                "name" : "requestedEngagementId",
                "type" : [ "null", "long" ],
                "doc" : "Externally requested engagement id",
                "default" : null
              }, {
                "name" : "contextId",
                "type" : [ "null", "string" ],
                "doc" : "UUID generated for each request when it enters the system.\n            Generated only once (not regenerated in case of account loading reattempt).\n            This id will be attached to the engagement from now on. All the way to the app server if necessary.",
                "default" : null
              } ]
            } ],
            "doc" : "OffsiteRequestInfo containg the request details - requested campaign and engagement id's and the assigned context id.",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "OffsiteEngRedirectResultEvent",
          "doc" : "Offsite Eng Redirect Result Event\n        Fired by le redirect service upon end of handling of offsite engagement redirect request.\n        Contains the request info, including the context id, and a code representing the way it was handled.\n        Also contains the revisions of all AC entities currently loaded on the redirect service for target account.",
          "fields" : [ {
            "name" : "result",
            "type" : [ "null", "int" ],
            "doc" : "Result of click\n            APPLICABLE, // Campaign and Engagement found and valid. Visitor was redirected to target page on brand.com for chat.\n            NOT_APPLICABLE,// Campaign or engagement not found, unpublished, disabled, expired, not started or of wrong type.\n                           // In this case request will be handled according to site level definitions - redirect to predefined page or standalone offline survey.\n            ERROR // Technical error occurred - failed to retrieve necessary domain from csds, AC service not available, timed out or returned an error, site settings property not found etc.\n                  // A unified error page will be displayed to the visitor.",
            "default" : null
          }, {
            "name" : "metadata",
            "type" : [ "null", {
              "type" : "record",
              "name" : "OffsiteEngRedirectNotApplicableMetadata",
              "doc" : "Redirect  Not Applicable Metadata\n        Provides insight on the not applicable reason and action taken.",
              "fields" : [ {
                "name" : "reason",
                "type" : [ "null", "int" ],
                "doc" : "Contains redirect not applicable reason:\n           DATE_RANGE = 1,\n           NOT_FOUND = 2",
                "default" : null
              }, {
                "name" : "actionTaken",
                "type" : [ "null", "int" ],
                "doc" : "Indicates which action was taken due to not applicable state:\n           SURVEY = 1,\n           REDIRECT = 2",
                "default" : null
              } ]
            } ],
            "doc" : "Provides more info on the redirect result.\n            For now only not applicable metadata is available.\n            Null for applicable requests.",
            "default" : null
          }, {
            "name" : "offsiteRequestInfo",
            "type" : [ "null", "OffsiteRequestInfo" ],
            "doc" : "OffsiteRequestInfo containg the request details - requested campaign and engagement id's and the assigned context id.",
            "default" : null
          }, {
            "name" : "acCampaignRevision",
            "type" : [ "null", "long" ],
            "doc" : "Revision of AC campaign data currently loaded on the redirect service for this account. null if no data is loaded.",
            "default" : null
          }, {
            "name" : "acSiteSettingsRevision",
            "type" : [ "null", "long" ],
            "doc" : "Revision of AC site settings data currently loaded on the redirect service for this account. null if no data is loaded.",
            "default" : null
          }, {
            "name" : "acWindowConfRevision",
            "type" : [ "null", "long" ],
            "doc" : "Revision of AC window conf data currently loaded on the redirect service for this account. null if no data is loaded.",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "SentimentAnalysisEvent",
          "doc" : "SentimentAnalysisEvent - a sentiment event which is being created over a Pline context.\r\n        - aggregatedScore is the score calculation for the current PLine consider the previous PLines on the same realTimeSession.\r\n        - fullChatInd is true when the sentiment score refers to the complete Chat aggregated sentiment.\r\n        Generates by \"Sentiment-Topology\" Topology\r\n        Consumes by Visitor Feed Topology ( for LE 2.0 sentiment )",
          "fields" : [ {
            "name" : "lineScore",
            "type" : [ "null", {
              "type" : "record",
              "name" : "SentimentAnalysisData",
              "doc" : "NLP-Pline Attributes",
              "fields" : [ {
                "name" : "normalizedScore",
                "type" : [ "null", "int" ],
                "doc" : "normalized sentiment score",
                "default" : null
              }, {
                "name" : "rawScore",
                "type" : [ "null", "double" ],
                "doc" : "raw sentiment score, internal usage of Sentiment Analysis only",
                "default" : null
              }, {
                "name" : "metadata",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "SentimentMetadata",
                  "doc" : "Model requested and model version used by the sentiment engine for scoring a line of text",
                  "fields" : [ {
                    "name" : "requiredEntityForSentiment",
                    "type" : {
                      "type" : "record",
                      "name" : "SentimentEntity",
                      "doc" : "a BusinessEntity might have visitors in multiple languages, this represents this coupling.",
                      "fields" : [ {
                        "name" : "language",
                        "type" : "string",
                        "doc" : "the language string as specified by java.util.Locale",
                        "default" : ""
                      }, {
                        "name" : "entity",
                        "type" : {
                          "type" : "record",
                          "name" : "BusinessEntity",
                          "doc" : "represents entities which can have sentiment models, e.g. accounts",
                          "fields" : [ {
                            "name" : "id",
                            "type" : "string",
                            "doc" : "e.g. account id",
                            "default" : ""
                          }, {
                            "name" : "type",
                            "type" : "string",
                            "doc" : "type of entity: e.g. Account, Vertical",
                            "default" : ""
                          } ]
                        },
                        "default" : null
                      } ]
                    },
                    "doc" : "The entity recognized by the system for sentiment calculation, e.g. the model for \"MyAccount\" with French",
                    "default" : null
                  }, {
                    "name" : "modelInfo",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "LexicalModelVersioning",
                      "doc" : "A full lexical model for an entity holds the base model for the entity's language, and all incremental models corresponding to it",
                      "fields" : [ {
                        "name" : "languageModel",
                        "type" : {
                          "type" : "record",
                          "name" : "VersionedLanguageModel",
                          "doc" : "Represents the version of the basic language model",
                          "fields" : [ {
                            "name" : "language",
                            "type" : "string",
                            "doc" : "the language string as specified by java.util.Locale",
                            "default" : ""
                          }, {
                            "name" : "version",
                            "type" : "long",
                            "doc" : "the model version",
                            "default" : -1
                          }, {
                            "name" : "isFallbackModel",
                            "type" : [ "null", "boolean" ],
                            "doc" : "indicator for using the internal sentiment model (located in the jar)",
                            "default" : null
                          } ]
                        },
                        "doc" : "base model for the entity's language",
                        "default" : null
                      }, {
                        "name" : "specificModels",
                        "type" : {
                          "type" : "array",
                          "items" : {
                            "type" : "record",
                            "name" : "VersionedSentimentEntityModel",
                            "doc" : "Represents the version of the incremental model for the business entity.",
                            "fields" : [ {
                              "name" : "entity",
                              "type" : "SentimentEntity",
                              "doc" : "sentiment entity (business entity with language)",
                              "default" : null
                            }, {
                              "name" : "version",
                              "type" : "long",
                              "doc" : "the incremental model version",
                              "default" : -1
                            } ]
                          }
                        },
                        "doc" : "incremental models, in order of application, e.g. model for vertical followed by model for account",
                        "default" : null
                      } ]
                    } ],
                    "doc" : "The versioning information of the model actually used for calculation, e.g. the base model for French since \"MyAccount\" had no model",
                    "default" : null
                  } ]
                } ],
                "default" : null
              } ]
            } ],
            "doc" : "single line sentiment score data",
            "default" : null
          }, {
            "name" : "aggregatedScore",
            "type" : [ "null", "SentimentAnalysisData" ],
            "doc" : "Deprecated - aggregated sentiment score data.\r\n        It's still being populated for existing consumers (Visitor Feed & EH API). Use mcsData instead",
            "default" : null
          }, {
            "name" : "mcsData",
            "type" : [ "null", {
              "type" : "record",
              "name" : "MCSData",
              "fields" : [ {
                "name" : "mcsScore",
                "type" : [ "null", "int" ],
                "doc" : "aggregated mcs score",
                "default" : null
              }, {
                "name" : "standardMcsScore",
                "type" : [ "null", "int" ],
                "doc" : "grouped the mcs based on predefined threshold",
                "default" : null
              }, {
                "name" : "mcsMetadata",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "MCSMetaData",
                  "fields" : [ {
                    "name" : "algorithmVersion",
                    "type" : [ "null", "string" ],
                    "doc" : "The version of the mcs calculation algorithm",
                    "default" : null
                  }, {
                    "name" : "configVersion",
                    "type" : [ "null", "string" ],
                    "doc" : "The version of the config that defines the parameters needed for mcs calculation",
                    "default" : null
                  } ]
                } ],
                "default" : null
              } ]
            } ],
            "doc" : "MCS data - contains aggregated mcs score",
            "default" : null
          }, {
            "name" : "conversationType",
            "type" : [ "null", "ConversationInteractionTypeEnum" ],
            "doc" : "Conversation type",
            "default" : null
          }, {
            "name" : "conversationDetails",
            "type" : [ "null", {
              "type" : "record",
              "name" : "ConversationDetails",
              "doc" : "includes all basic fields relevant to a conversation\r\n        convId - id of the conversation. it is an important key. it is a unique key of the messaging.\r\n                 Shared between all components.",
              "fields" : [ {
                "name" : "convId",
                "type" : "string",
                "doc" : "Global unique identifier of the conversation (UUID)",
                "default" : ""
              }, {
                "name" : "dialogId",
                "type" : [ "null", "string" ],
                "doc" : "Global unique identifier of the dialog within the conversation",
                "default" : null
              }, {
                "name" : "skillId",
                "type" : "long",
                "doc" : "Agent skill ID",
                "default" : -1
              }, {
                "name" : "interactiveTime",
                "type" : "long",
                "default" : -1
              }, {
                "name" : "isConsumerActive",
                "type" : "boolean",
                "default" : false
              }, {
                "name" : "startTime",
                "type" : "long",
                "doc" : "Unix time (ms, UTC) of the conversation start.\r\n                It isn't the time the agent actual take the conversation, but the time the\r\n                consumer start request new conversation( meaning the first time consumer click a message)",
                "default" : -1
              }, {
                "name" : "lastUpdated",
                "type" : [ "null", "long" ],
                "doc" : "unix time of the last time the conversation was updated",
                "default" : null
              }, {
                "name" : "convState",
                "type" : {
                  "type" : "enum",
                  "name" : "ConversationStateEnum",
                  "doc" : "Status of the conversation\r\n        OPEN - Conversation is in progress.\r\n        CLOSE - Conversation is closed.",
                  "symbols" : [ "NA", "OPEN", "CLOSE" ]
                },
                "doc" : "Status of the conversation",
                "default" : "NA"
              }, {
                "name" : "firstConversation",
                "type" : {
                  "type" : "enum",
                  "name" : "TrileanEnum",
                  "symbols" : [ "NA", "FALSE", "TRUE" ]
                },
                "doc" : "Is it first conversation of the consumer\r\n           if consumer loaded the app and use it for the first time then value = true\r\n           else  value = false",
                "default" : "NA"
              }, {
                "name" : "myContext",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "MyContext",
                  "doc" : "",
                  "fields" : [ {
                    "name" : "mySystem",
                    "type" : "string",
                    "doc" : "",
                    "default" : ""
                  }, {
                    "name" : "visitorId",
                    "type" : [ "null", "string" ],
                    "doc" : "",
                    "default" : null
                  }, {
                    "name" : "sessionId",
                    "type" : [ "null", "string" ],
                    "doc" : "",
                    "default" : null
                  }, {
                    "name" : "interactionContextId",
                    "type" : [ "null", "string" ],
                    "doc" : "",
                    "default" : null
                  } ]
                } ],
                "doc" : "",
                "default" : null
              }, {
                "name" : "campaignContext",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "CampaignContext",
                  "doc" : "Interaction Campaign context.\r\n        Will be populated when an interaction (Conversation) is linked to/triggered by specific campaign.\r\n        For example, when async conversation is started in web and triggered by specific impression.\r\n        It is consumed by reporting, engagement history",
                  "fields" : [ {
                    "name" : "campaignId",
                    "type" : "long",
                    "doc" : "Campaign ID - reference to campaign in AC",
                    "default" : -1
                  }, {
                    "name" : "engagementId",
                    "type" : "long",
                    "doc" : "Engagement ID - reference to engagement in AC",
                    "default" : -1
                  }, {
                    "name" : "goalId",
                    "type" : "long",
                    "doc" : "Depricated - not in use",
                    "default" : -1
                  } ]
                } ],
                "doc" : "Interaction campaign details.\r\n           Must be populated when a conversation (both sync & async) is triggered in web by engagement impession.\r\n           Might be null in other cases.",
                "default" : null
              }, {
                "name" : "interactionType",
                "type" : [ "null", "ConversationInteractionTypeEnum" ],
                "doc" : "Interaction type used to distinguish between live chat & async messaging",
                "default" : null
              }, {
                "name" : "integrationSourceOrigin",
                "type" : [ "null", "string" ],
                "doc" : "Source of conversation request.\r\n           * Possible values:\r\n           * App - consumer starts a conversation from App\r\n           * Web - consumer starts a conversation from Web\r\n           * Agent - agent starts a new conversation with consumer\r\n           * SMS - consumer starts a conversation by SMS\r\n           * Facebook - consumer starts a conversation from Facebook\r\n\r\n           * Note: This value is static, meaning it describes the origin of the conversation\r\n           and will remain the same throughout whole conversation",
                "default" : null
              }, {
                "name" : "agentGroupId",
                "type" : [ "null", "long" ],
                "doc" : "In case of unassign conversation the agentGroupId value is null. (on newConv/back2Q the value is null)\r\n               agentGroupId gets the value when agent is assigned to the conversation.\r\n               in case the group id is changed while the conversation is already assigned the agentGroupId value will not change.",
                "default" : null
              }, {
                "name" : "assignedAgentId",
                "type" : [ "null", "string" ],
                "doc" : "In case of unassign conversation the assignedAgentId value is null. (on newConv/back2Q the value is null)\r\n               assignedAgentId gets the value when agent is assigned to the conversation.\r\n               Used in cases when there is no agentHeader.",
                "default" : null
              } ]
            } ],
            "doc" : "Holds conversation's details",
            "default" : null
          }, {
            "name" : "messageDetails",
            "type" : [ "null", {
              "type" : "record",
              "name" : "MessageDetails",
              "doc" : "Metadata of a message",
              "fields" : [ {
                "name" : "messageId",
                "type" : "string",
                "doc" : "Global AMS unique identifier of the message",
                "default" : ""
              }, {
                "name" : "messageSeq",
                "type" : "int",
                "doc" : "Global AMS sequence",
                "default" : -1
              }, {
                "name" : "channelId",
                "type" : "int",
                "doc" : "Global unique identifier of the channel, ams is 400",
                "default" : -1
              }, {
                "name" : "contentFormat",
                "type" : {
                  "type" : "enum",
                  "name" : "ContentTypeEnum",
                  "doc" : "Possible message content types",
                  "symbols" : [ "NA", "TEXT_PLAIN", "IMG", "TEXT_HTML", "LINK", "HOSTED_FILE" ]
                },
                "doc" : "deprecated",
                "default" : "NA"
              }, {
                "name" : "contentType",
                "type" : [ "null", "string" ],
                "doc" : "the content type of the message , possible values :\r\n                 NA,TEXT_PLAIN,IMG,TEXT_HTML,LINK,HOSTED_FILE,SECURE_FORM_INVITATION,SECURE_FORM_SUBMIT",
                "default" : null
              } ]
            } ],
            "doc" : "Holds messages's details.\r\n        In case the conversation is of type MESSAGING (async) the messageSeq will be taken from this field",
            "default" : null
          }, {
            "name" : "processingSeqNum",
            "type" : [ "null", "int" ],
            "doc" : "Represents the arrival order of the lines/messages to be analyzed",
            "default" : null
          }, {
            "name" : "engagementSeqNum",
            "type" : [ "null", "int" ],
            "doc" : "Holds the sequence number inside the engagement in case of transfer (Chat flow). The value will be used to connect between the sentiment event and its corresponding transfer",
            "default" : null
          }, {
            "name" : "fullChatInd",
            "type" : "TrileanEnum",
            "doc" : "full chat/async messaging indicator",
            "default" : "NA"
          } ]
        }, {
          "type" : "record",
          "name" : "InsightsEvent",
          "doc" : "Custom event generated by Insights Text Analytics platform",
          "fields" : [ {
            "name" : "documentId",
            "type" : "string",
            "default" : ""
          } ]
        }, {
          "type" : "record",
          "name" : "ServiceActivityEvent",
          "doc" : "Avro representation of the Service Activity Event",
          "fields" : [ {
            "name" : "servicesActivityMetaData",
            "type" : [ "null", "ServiceActivityMetaData" ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "CustomerTypeExtractedEvent",
          "doc" : "Customer Type Extracted Event\r\n        Fired in parallel to the state change event after feature extraction extracts customer type to enable easy access by reporting.",
          "fields" : [ {
            "name" : "customerType",
            "type" : [ "null", "CustomerType" ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "CustomerStatusExtractedEvent",
          "doc" : "Customer Status Extracted Event\r\n        Fired in parallel to the state change event after feature extraction extracts customer status to enable easy access by reporting.",
          "fields" : [ {
            "name" : "customerStatus",
            "type" : [ "null", "CustomerStatus" ],
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ChatTopicEvent",
          "doc" : "ChatTopicEvent - List of Topics with expressions and sentimentPolarity which being created over a complete chat\r\n        Generates by \"TopicEventCreator\" Map Reduce job\r\n        Consumes by Engagement History",
          "fields" : [ {
            "name" : "interactionStartTime",
            "type" : "long",
            "doc" : "timestamp that indicates the start time of the interaction",
            "default" : -1
          }, {
            "name" : "engagementStartTime",
            "type" : "long",
            "doc" : "timestamp that indicates the start time of the chat",
            "default" : -1
          }, {
            "name" : "engagementEndTime",
            "type" : "long",
            "doc" : "timestamp that indicates the end time of the chat",
            "default" : -1
          }, {
            "name" : "chatDurationInMilli",
            "type" : "long",
            "doc" : "should be calculated as the time-range difference between interactionStartTime to engagementEndTime",
            "default" : -1
          }, {
            "name" : "skillId",
            "type" : "long",
            "default" : -1
          }, {
            "name" : "agentPolarity",
            "type" : "int",
            "doc" : "Chat polarity based on agent topics *",
            "default" : 0
          }, {
            "name" : "visitorPolarity",
            "type" : "int",
            "doc" : "Chat polarity based on visitor topics *",
            "default" : 0
          }, {
            "name" : "bothPolarity",
            "type" : "int",
            "doc" : "Chat polarity based on both visitor and agent topics *",
            "default" : 0
          }, {
            "name" : "topics",
            "type" : {
              "type" : "array",
              "items" : {
                "type" : "record",
                "name" : "ChatTopicValue",
                "fields" : [ {
                  "name" : "topicParticipant",
                  "type" : {
                    "type" : "record",
                    "name" : "TopicParticipant",
                    "doc" : "TopicParticipant - A participant representation\r\n           - hotTopicParticipantSource - an int representation of the Topic's Source\r\n           - other fields may be added in future ( ParticipantId and etc... )",
                    "fields" : [ {
                      "name" : "hotTopicParticipantSource",
                      "type" : "int",
                      "doc" : "Participant Source type (0 - NA, 1 - VISITOR, 2 - AGENT, 3 - BOTH)",
                      "default" : 0
                    } ]
                  },
                  "doc" : "agent/visitor id  (list in the case of both VisitorsAndAgents usage",
                  "default" : null
                }, {
                  "name" : "topicData",
                  "type" : {
                    "type" : "record",
                    "name" : "TopicData",
                    "doc" : "TopicData - Topic data representation\r\n           - topic is the display form of a topic\r\n           - origTopicText is the topic's original text\r\n           - canonical is the canonical form of the topic\r\n           - snippet is the topic's original text\r\n           - sentimentExpressions is the topic's related expressions\r\n           - relatedTopics is the topic's list of related topics\r\n           - sentimentPolar is the sentiment's value\r\n           - plineUniqueId is event unique id of the pline the topic was generated from",
                    "fields" : [ {
                      "name" : "topic",
                      "type" : "string",
                      "doc" : "Topic value - display form",
                      "default" : ""
                    }, {
                      "name" : "origTopicText",
                      "type" : "string",
                      "doc" : "Topic's original text",
                      "default" : ""
                    }, {
                      "name" : "canonical",
                      "type" : "string",
                      "doc" : "Canonical form of the topic (Lemmatized/Steamed and etc...)",
                      "default" : ""
                    }, {
                      "name" : "snippet",
                      "type" : "string",
                      "doc" : "Part of the original text that the topic was extracted from",
                      "default" : ""
                    }, {
                      "name" : "sentimentExpressions",
                      "type" : {
                        "type" : "array",
                        "items" : "string"
                      },
                      "doc" : "Sentiment expressions of the topic",
                      "default" : null
                    }, {
                      "name" : "relatedTopics",
                      "type" : {
                        "type" : "array",
                        "items" : "string"
                      },
                      "doc" : "List of related topics",
                      "default" : null
                    }, {
                      "name" : "sentimentPolar",
                      "type" : "int",
                      "doc" : "Topic polarity is the topic's sentiment (NA,POSITIVE,NEGATIVE)",
                      "default" : 0
                    }, {
                      "name" : "sourceUniqueId",
                      "type" : "string",
                      "doc" : "uniqueId of the pline that the topic was generated from",
                      "default" : ""
                    } ]
                  },
                  "doc" : "aggregated sentiment score data",
                  "default" : null
                } ]
              }
            },
            "doc" : "chat's topics",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "CargoEvent",
          "doc" : "Cargo event details",
          "fields" : [ {
            "name" : "cargoEvent",
            "type" : [ "null", "string" ],
            "doc" : "actual event",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "CoBrowseSessionInteractiveEvent",
          "doc" : "The interactive event",
          "fields" : [ {
            "name" : "umsContext",
            "type" : [ "null", "MyContext" ],
            "doc" : "The UMS context in which the CoBrowse/CoApp session occurred. Not present if the session happened outside of UMS (e.g. standalone or web messaging).",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "CoBrowseSessionStartedEvent",
          "doc" : "The started event is sent when the CoBrowse session is created and the clients are about to join.",
          "fields" : [ {
            "name" : "startUrl",
            "type" : [ "null", "URL" ],
            "doc" : "The start url on which the CoBrowse session was started. Depending on how CoBrowse was started/initiated, the start url can be null. In this case look for the first CoBrowseSessionPageViewEvent of a CoBrowse session which contains the start url as well.",
            "default" : null
          }, {
            "name" : "capabilities",
            "type" : [ "null", {
              "type" : "array",
              "items" : {
                "type" : "enum",
                "name" : "CoBrowseSessionCapability",
                "doc" : "The capabilities/channels active in a CoApp session.\n\t    CONSUMER_VOICE_CONNECTION: The audio/voice channel from the custumer to the agent is active/used.\n\t    AGENT_VOICE_CONNECTION: The audio/voice channel from the agent to the customer is active/used.\n\t    CONSUMER_VIDEO_CONNECTION: The video channel from the customer to the agent is active/used.\n\t    AGENT_VIDEO_CONNECTION: The video channel from the agent to the customer is active/used.\n\t    AGENT_APP_CONTROL: The (remote) app control chanel from the agent to the customer is active/used.",
                "symbols" : [ "CONSUMER_VOICE_CONNECTION", "AGENT_VOICE_CONNECTION", "CONSUMER_VIDEO_CONNECTION", "AGENT_VIDEO_CONNECTION", "AGENT_APP_CONTROL" ]
              }
            } ],
            "doc" : "The capabilities/channels active in the CoApp session. Not present in the case of CoBrowse.",
            "default" : null
          }, {
            "name" : "umsContext",
            "type" : [ "null", "MyContext" ],
            "doc" : "The UMS context in which the CoBrowse/CoApp session occurred. Not present if the session happened outside of UMS (e.g. standalone or web messaging).",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "CoBrowseSessionEndedEvent",
          "doc" : "The ended event is triggered when one of the CoBrowse participants clicks the “end session” button in the menubar of the CoBrowse session.\n\t    WARNING: The participants in the header of this event does contain ALL CoBrowse users that participated in the session (from session start to end; not only the currently present).",
          "fields" : [ {
            "name" : "interactionStartTime",
            "type" : [ "null", "long" ],
            "doc" : "The conversation (not the CoBrowse/CoApp session) start time in milliseconds (starting 1970-01-01). Only available in the context of (web)messaging.",
            "default" : null
          }, {
            "name" : "startTime",
            "type" : [ "null", "long" ],
            "doc" : "The CoBrowse session start time in milliseconds (starting 1970-01-01).",
            "default" : null
          }, {
            "name" : "interactiveTime",
            "type" : [ "null", "long" ],
            "doc" : "The CoBrowse session interactive time in milliseconds (starting 1970-01-01). If the session was not interactive, the value is null.",
            "default" : null
          }, {
            "name" : "endTime",
            "type" : "long",
            "doc" : "The CoBrowse session end time in milliseconds (starting 1970-01-01).",
            "default" : -1
          }, {
            "name" : "wasInteractive",
            "type" : "boolean",
            "doc" : "",
            "default" : false
          }, {
            "name" : "reason",
            "type" : {
              "type" : "enum",
              "name" : "CoBrowseSessionEndedReason",
              "doc" : "The reasons why a CoBrowse session was ended.\n\t    UNKNOWN: The reason is not known to the CoBrowse server. It could be that the CoBrowse server is experiencing some issues.\n\t    SERVER:  The CoBrowse server ended the CoBrowse session, e.g. if the session end was requested via API.\n\t    VISITOR: The visitor left the CoBrowse session and therefore ended the CoBrowse session.\n\t    AGENT:  The agent left the CoBrowse session and therefore ended the CoBrowse session.\n\t    TIMEOUT: A timeout (usually on the client/browser) occurred. This can happen if an agent or visitor simply closes the window or the connection is lost (e.g. if the internet connection is dropping)",
              "symbols" : [ "UNKOWN", "SERVER", "VISITOR", "AGENT", "TIMEOUT" ]
            },
            "doc" : "The reason for the session end.",
            "default" : "UNKOWN"
          }, {
            "name" : "duration",
            "type" : "long",
            "doc" : "The duration of the CoBrowse session in milliseconds.",
            "default" : -1
          }, {
            "name" : "capabilities",
            "type" : [ "null", {
              "type" : "array",
              "items" : "CoBrowseSessionCapability"
            } ],
            "doc" : "The capabilities/channels active in the CoApp session. Not present in the case of CoBrowse.",
            "default" : null
          }, {
            "name" : "umsContext",
            "type" : [ "null", "MyContext" ],
            "doc" : "The UMS context in which the CoBrowse/CoApp session occurred. Not present if the session happened outside of UMS (e.g. standalone or web messaging).",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "CoBrowseSessionPageViewEvent",
          "doc" : "PageView events are triggered for all navigation actions in a CoBrowse session (i.e. the viewed page changed).",
          "fields" : [ {
            "name" : "url",
            "type" : [ "null", "URL" ],
            "doc" : "The new viewed/visited webpage.",
            "default" : null
          }, {
            "name" : "umsContext",
            "type" : [ "null", "MyContext" ],
            "doc" : "The UMS context in which the CoBrowse/CoApp session occurred. Not present if the session happened outside of UMS (e.g. standalone or web messaging).",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "CoBrowseSessionErrorEvent",
          "doc" : "The error event is used to inform about various error situations that might occur during a CoBrowse session. *",
          "fields" : [ {
            "name" : "errorCode",
            "type" : "string",
            "doc" : "A the error code identifier/category. Possible error codes: \"otk_invalid\", \"missing_lasturl\".",
            "default" : ""
          }, {
            "name" : "errorMessage",
            "type" : "string",
            "doc" : "A detailed error message/description/reason, if available.",
            "default" : ""
          }, {
            "name" : "errorStackTrace",
            "type" : "string",
            "doc" : "The error stack trace, if available.",
            "default" : ""
          }, {
            "name" : "page",
            "type" : "PageBasicData",
            "doc" : "The currently visited page, if available. If present, usually not all values within the PageBasicData element will be available.",
            "default" : null
          }, {
            "name" : "umsContext",
            "type" : [ "null", "MyContext" ],
            "doc" : "The UMS context in which the CoBrowse/CoApp session occurred. Not present if the session occurred happened outside of UMS (e.g. standalone or web messaging).",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "IdentityCorrelationEvent",
          "doc" : "* Identity Correlation Event to map one system identifier to another system identifier\n       * For example from core / appserver visitor id to shark visitor id",
          "fields" : [ {
            "name" : "id1",
            "type" : {
              "type" : "record",
              "name" : "Identity",
              "doc" : "* The record that will be used to map between two identities in IdentityCorrelationEvent",
              "fields" : [ {
                "name" : "platform",
                "type" : "PlatformEnum",
                "doc" : "The identity we have found was generated by this platform",
                "default" : "DEFAULT"
              }, {
                "name" : "id",
                "type" : "string",
                "doc" : "The actual id collected without any business manipulation, for example for appserver 3rd party cookie the id is a concatenation of various info using semicolon separator",
                "default" : ""
              }, {
                "name" : "key",
                "type" : [ "null", "string" ],
                "doc" : "the key of the source, i.e the query param name or the cookie name",
                "default" : null
              }, {
                "name" : "source",
                "type" : {
                  "type" : "enum",
                  "name" : "IDSource",
                  "doc" : "",
                  "symbols" : [ "NA", "QUERYPARAM", "COOKIE" ]
                },
                "doc" : "The technical source of the information - from where it was extracted",
                "default" : "NA"
              }, {
                "name" : "authenticated",
                "type" : [ "null", "boolean" ],
                "doc" : "A flag to mark if the identity is authenticated or not",
                "default" : null
              } ]
            },
            "doc" : "the from id to correlate",
            "default" : null
          }, {
            "name" : "id2",
            "type" : "Identity",
            "doc" : "the to id to correlate",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ConversationRequestEvent",
          "doc" : "a consumer requested to start a conversation with skill.\r\n       It returns a conv id and return code update(HTTP ids)\r\n       conversationId -1 in case of failure.\r\n       \r\n       it is also possible to start a conversation from agent side - when agent resumes conversation.\r\n       the resume action is actually a new conversation request triggered by the agent.\r\n       in this case - the participant header will be that of the agent and not the consumer.",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          }, {
            "name" : "skillId",
            "type" : "long",
            "doc" : "Skill request by the consumer,default is -1",
            "default" : -1
          }, {
            "name" : "requestedTTR",
            "type" : [ "null", "string" ],
            "doc" : "Initial time to respond (TTR) requested by a consumer.\r\n            * Can be one of the following:\r\n            * NA\r\n            * CUSTOM,\r\n            * NORMAL,\r\n            * PRIORITIZED,\r\n            * URGENT;",
            "default" : null
          }, {
            "name" : "chosenSkillId",
            "type" : [ "null", "long" ],
            "doc" : "Skill Id result after skill selection (could also be the same as skillId if no selection by skill selection rule engine",
            "default" : null
          }, {
            "name" : "skillSelectionDecision",
            "type" : [ "null", {
              "type" : "record",
              "name" : "SkillSelectionDecision",
              "doc" : "created when the skill selection rule engine is active",
              "fields" : [ {
                "name" : "reason",
                "type" : [ "null", "string" ],
                "doc" : "the reason why this skill was selected - should be a description of the rule that matched",
                "default" : null
              }, {
                "name" : "skillId",
                "type" : [ "null", "long" ],
                "doc" : "the result of the skill selection",
                "default" : null
              } ]
            } ],
            "doc" : "skill selection decision - the result of the skill selection rule engine",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ConsumerRegistrationEvent",
          "doc" : "",
          "fields" : [ ]
        }, {
          "type" : "record",
          "name" : "ConversationInteractiveEvent",
          "doc" : "An Agent wants to start interacting with the consumer.\r\n       It take the \"chat\"",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          }, {
            "name" : "interactiveSequence",
            "type" : [ "null", "int" ],
            "doc" : "Represent the sequence number of the number of times that the conversation was transferred",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "TransferEvent",
          "doc" : "An agent is transferring the current conversation to another Agent or Skill.\r\n       Event is being fired every time that a chat is being back to queue.\r\n       Chat scale",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          }, {
            "name" : "targetSkillId",
            "type" : [ "null", "long" ],
            "doc" : "if transfer to skill then skill id else null",
            "default" : null
          }, {
            "name" : "targetAgentId",
            "type" : [ "null", "long" ],
            "doc" : "if transfer to agent then agent id else null",
            "default" : null
          }, {
            "name" : "reason",
            "type" : "string",
            "doc" : "reason for the transfer, Possible reasons {back2Q, Agent, skill, TakeOver}",
            "default" : ""
          }, {
            "name" : "prevAgentId",
            "type" : "long",
            "doc" : "previous Agent id",
            "default" : -1
          }, {
            "name" : "prevSkillId",
            "type" : "long",
            "doc" : "previous Skill id",
            "default" : -1
          } ]
        }, {
          "type" : "record",
          "name" : "SkillChangeEvent",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          }, {
            "name" : "targetSkillId",
            "type" : "long",
            "doc" : "target skill id: either fallback skill or default skill",
            "default" : -1
          }, {
            "name" : "prevSkillId",
            "type" : "long",
            "doc" : "previous skill id",
            "default" : -1
          } ]
        }, {
          "type" : "record",
          "name" : "ConversationEndEvent",
          "doc" : "An Agent / Consumer / System wants to close conversation.\r\n       It resolve the \"chat\".\r\n       We want to track conversation details, the close reason and the duration of the chat",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          }, {
            "name" : "duration",
            "type" : "long",
            "doc" : "Duration of the interaction chat msec*",
            "default" : -1
          }, {
            "name" : "conversationEndedTime",
            "type" : "long",
            "doc" : "states the unix time in which the conversation ended *",
            "default" : -1
          }, {
            "name" : "closeReason",
            "type" : {
              "type" : "enum",
              "name" : "ConversationEndedReasonEnum",
              "doc" : "The reasons why ams conversation was ended.\r\n        UNKNOWN: The reason is not known to the AMS server. It could be that the AMS server is experiencing some issues.\r\n        CONSUMER: The consumer left the conversation and therefore the agent resolve the conversation.\r\n        AGENT:  The agent resolve the conversation.\r\n        TIMEOUT: Conversation has limited config time for it duration. After this pertiod the conversation will be close by the AMS.",
              "symbols" : [ "UNKNOWN", "CONSUMER", "AGENT", "TIMEOUT" ]
            },
            "doc" : "Reason for resolve the conversation.  *",
            "default" : "UNKNOWN"
          }, {
            "name" : "skillId",
            "type" : "long",
            "doc" : "Skill of the COnversation",
            "default" : -1
          }, {
            "name" : "closeReasonDescription",
            "type" : [ "null", "string" ],
            "doc" : "Close Reason Description",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ParticipantLeaveEvent",
          "doc" : "Participant can join or leave a conversation.\r\n          Conversation can have different number of participants in any moment.",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ParticipantAddEvent",
          "doc" : "",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "MessagePublishEvent",
          "doc" : "New message received by the server. After save it to DB and after set the sequence\r\n              Event will be sent. Message must include either MessageData or FileData or LinkData, but not both.",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          }, {
            "name" : "msgDetails",
            "type" : "MessageDetails",
            "doc" : "Meta data of the message",
            "default" : null
          }, {
            "name" : "msg",
            "type" : [ "null", {
              "type" : "record",
              "name" : "MessageData",
              "doc" : "The content of the message",
              "fields" : [ {
                "name" : "data",
                "type" : [ "null", "string" ],
                "default" : null
              } ]
            } ],
            "doc" : "Message text content",
            "default" : null
          }, {
            "name" : "file",
            "type" : [ "null", {
              "type" : "record",
              "name" : "FileData",
              "doc" : "Information on the hosted file",
              "fields" : [ {
                "name" : "relativePath",
                "type" : "string",
                "doc" : "",
                "default" : ""
              }, {
                "name" : "storageServer",
                "type" : "string",
                "doc" : "file storage server domain",
                "default" : ""
              }, {
                "name" : "fileType",
                "type" : "string",
                "doc" : "file type, the supported types are: JPG, PNG, GIF, TXT, PDF",
                "default" : ""
              }, {
                "name" : "caption",
                "type" : [ "null", "string" ],
                "doc" : "Optionally free text attached to the file",
                "default" : null
              }, {
                "name" : "preview",
                "type" : [ "null", "string" ],
                "doc" : "Optionally file thumbnail, if exist it should be in base64 format",
                "default" : null
              } ]
            } ],
            "doc" : "Hosted file details. MessagePublish must include either MessageData or FileData or LinkData, but not both",
            "default" : null
          }, {
            "name" : "link",
            "type" : [ "null", {
              "type" : "record",
              "name" : "LinkData",
              "doc" : "Information on the external file (link)",
              "fields" : [ {
                "name" : "externalFileLink",
                "type" : "string",
                "doc" : "file location on the web",
                "default" : ""
              }, {
                "name" : "fileType",
                "type" : [ "null", "string" ],
                "doc" : "file type, the supported types are: JPG, PNG, GIF, TXT, PDF",
                "default" : null
              }, {
                "name" : "caption",
                "type" : [ "null", "string" ],
                "doc" : "Optionally free text attached to the file",
                "default" : null
              } ]
            } ],
            "doc" : "external file details. MessagePublish must include either MessageData or FileData or LinkData, but not both",
            "default" : null
          }, {
            "name" : "secureFormData",
            "type" : [ "null", {
              "type" : "record",
              "name" : "SecureFormData",
              "doc" : "SecureFormData is filled on the following secure form flows:\r\n               1. When agent sends invitation form to consumer , SecureFormData filled with formId & formName & invitationId ( submissionId is null )\r\n               2. When consumer submit form , SecureFormData filled with submissionId & invitationId ( formId , formName are null )",
              "fields" : [ {
                "name" : "formId",
                "type" : [ "null", "string" ],
                "doc" : "( optional , not null in case agent sends form invitation ( MessagePublishEvent.MessageDetails.contentType = SECURE_FORM_INVITATION )",
                "default" : null
              }, {
                "name" : "formName",
                "type" : [ "null", "string" ],
                "doc" : "( optional , not null in case agent sends form invitation ( MessagePublishEvent.MessageDetails.contentType = SECURE_FORM_INVITATION )",
                "default" : null
              }, {
                "name" : "submissionId",
                "type" : [ "null", "string" ],
                "doc" : "( optional , not null in case consumer submits form ( MessagePublishEvent.MessageDetails.contentType = SECURE_FORM_SUBMIT )",
                "default" : null
              }, {
                "name" : "invitationId",
                "type" : "string",
                "doc" : "mandatory",
                "default" : ""
              } ]
            } ],
            "doc" : "Secure form data of the message",
            "default" : null
          }, {
            "name" : "richcontent",
            "type" : [ "null", {
              "type" : "record",
              "name" : "RichContent",
              "doc" : "The content of the message",
              "fields" : [ {
                "name" : "data",
                "type" : [ "null", "string" ],
                "default" : null
              } ]
            } ],
            "doc" : "RichContent text content",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "SatisfactionEvent",
          "doc" : "Consumer rate the messaging service.\r\n          The form has number of fields:\r\n          a. csat rate - Currently number only(1-5)\r\n          b. csatResolutionConfirmation - yes no question\r\n          c. csatSubmitStatus - FILLED, PARTIALLY_FILLED, SKIPPED, EMPTY;",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          }, {
            "name" : "satisfactionData",
            "type" : {
              "type" : "record",
              "name" : "SatisfactionData",
              "fields" : [ {
                "name" : "csatRate",
                "type" : "int",
                "doc" : "0-user did not submit the field valud, 1- worse, 5- best",
                "default" : 0
              }, {
                "name" : "csatSurveyResults",
                "type" : [ "null", {
                  "type" : "array",
                  "items" : {
                    "type" : "record",
                    "name" : "SatisfactionAnswer",
                    "fields" : [ {
                      "name" : "question",
                      "type" : "string",
                      "doc" : "Satisfaction survey question text\r\n                Possible value: 'Confirm Resolution'",
                      "default" : ""
                    }, {
                      "name" : "answer",
                      "type" : "string",
                      "doc" : "Satisfaction survey answer text.\r\n                Possible values: 'Yes', 'No', 'N/A'",
                      "default" : ""
                    } ]
                  }
                } ],
                "doc" : "CSAT Survey results  - collection of all from questions",
                "default" : null
              }, {
                "name" : "csatSubmitStatus",
                "type" : [ "null", "string" ],
                "doc" : "CSAT status  -\r\n                    FILLED - all form fields were filled.\r\n                    PARTIALLY_FILLED - part of the csat form was filled,\r\n                    SKIPPED - Csat form was not  sent. user close the form.\r\n                    EMPTY - submit form with no field.;",
                "default" : null
              } ]
            },
            "doc" : "Csat data",
            "default" : null
          }, {
            "name" : "closeReason",
            "type" : "ConversationEndedReasonEnum",
            "doc" : "Reason for resolve the conversation.",
            "default" : "UNKNOWN"
          } ]
        }, {
          "type" : "record",
          "name" : "UserProfileUpdateEvent",
          "doc" : "Information of user can be agent / consumer\r\n             userdata - information of the user details. some info was update and some not.\r\n             participantType - the participant type. {consumer / agent/ agent manager}",
          "fields" : [ {
            "name" : "userData",
            "type" : {
              "type" : "record",
              "name" : "UserProfileData",
              "doc" : "Holds AMS user information such as: mail, phone, firstName, lastName\r\n          Push notification details( for mobile), avatar image url, background image url.\r\n         *",
              "fields" : [ {
                "name" : "firstName",
                "type" : [ "null", "string" ],
                "doc" : "First name of the user",
                "default" : null
              }, {
                "name" : "lastName",
                "type" : [ "null", "string" ],
                "doc" : "Last name of the user",
                "default" : null
              }, {
                "name" : "token",
                "type" : [ "null", "string" ],
                "doc" : "Token is the private token that user uses to identify itself\r\n              during web socket connction. Was generated by rest call. it is uuid.",
                "default" : null
              }, {
                "name" : "phone",
                "type" : [ "null", "string" ],
                "doc" : "Phone number if exists",
                "default" : null
              }, {
                "name" : "email",
                "type" : [ "null", "string" ],
                "doc" : "Email address",
                "default" : null
              }, {
                "name" : "avatarUrl",
                "type" : [ "null", "URL" ],
                "doc" : "Url of avatar picture",
                "default" : null
              }, {
                "name" : "backgroungImgurl",
                "type" : [ "null", "URL" ],
                "doc" : "Backgroung img url",
                "default" : null
              }, {
                "name" : "pnData",
                "type" : {
                  "type" : "record",
                  "name" : "PushNotificationData",
                  "doc" : "Holds AMS push notification information:\r\n          current impl is for IOS only.\r\n         *",
                  "fields" : [ {
                    "name" : "pnServiceName",
                    "type" : [ "null", "string" ],
                    "doc" : "Name of push service",
                    "default" : null
                  }, {
                    "name" : "pnCertName",
                    "type" : [ "null", "string" ],
                    "doc" : "Name of certificate",
                    "default" : null
                  }, {
                    "name" : "pnToken",
                    "type" : [ "null", "string" ],
                    "doc" : "push notification token",
                    "default" : null
                  } ]
                },
                "doc" : "Info of the push notification, could be empty in cases where push is not relevant",
                "default" : null
              } ]
            },
            "doc" : "User data. Holds all the fields. some were updated and some are same.",
            "default" : null
          }, {
            "name" : "participantType",
            "type" : "ParticipantEnum",
            "doc" : "participant type who update the user profile",
            "default" : "NONE"
          } ]
        }, {
          "type" : "record",
          "name" : "SetAgentStateEvent",
          "doc" : "Information of Agent state change\r\n             agentConnectionState - state of websocket connection of the agent\r\n             prevConvState - previous websocket connection state of the agent, could be NA\r\n             agentState - updated State of the agent\r\n             prevAgentState - previous state of the agent, could be NA\r\n             busySlots - number of current busy slots of the agent\r\n             maxSlots - max capacity of the agent\r\n             ringingSlots - ring slots of the agent, meaning how many calls are now ringing for this agent\r\n             agentGroup - agent group.\r\n             agentId - live engage id\r\n             stateChangeInitiator - who troigger this agent state. could be AGENT/AGENTMANAGER/SYSTEM(in case routing decide after ring expire)",
          "fields" : [ {
            "name" : "agentConnectionState",
            "type" : [ "null", "string" ],
            "doc" : "connected / disconnected",
            "default" : null
          }, {
            "name" : "prevAgentConnectionState",
            "type" : [ "null", "string" ],
            "doc" : "connected / disconnected / NA",
            "default" : null
          }, {
            "name" : "prevAgentConnectionStateTime",
            "type" : [ "null", "long" ],
            "doc" : "Previous connection state time",
            "default" : null
          }, {
            "name" : "agentState",
            "type" : [ "null", "string" ],
            "doc" : "ONLINE/OFFLINE/AWAY/ BACK_SOON",
            "default" : null
          }, {
            "name" : "prevAgentState",
            "type" : [ "null", "string" ],
            "doc" : "ONLINE/OFFLINE/AWAY/ BACK_SOON /NA",
            "default" : null
          }, {
            "name" : "prevAgentStateTime",
            "type" : [ "null", "long" ],
            "doc" : "Previous agent state time",
            "default" : null
          }, {
            "name" : "prevBusySlots",
            "type" : [ "null", "long" ],
            "doc" : "previous number of busy slots",
            "default" : null
          }, {
            "name" : "busySlots",
            "type" : [ "null", "long" ],
            "doc" : "number of busy slots - number of open conversations currently assigned to an agent",
            "default" : null
          }, {
            "name" : "maxSlots",
            "type" : [ "null", "long" ],
            "doc" : "number of max slots - maximum capacity of an agent",
            "default" : null
          }, {
            "name" : "ringingSlots",
            "type" : [ "null", "long" ],
            "doc" : "@Depricated",
            "default" : null
          }, {
            "name" : "agentGroupId",
            "type" : [ "null", "long" ],
            "doc" : "agent group string",
            "default" : null
          }, {
            "name" : "agentId",
            "type" : [ "null", "string" ],
            "doc" : "Live engage Id of the agent",
            "default" : null
          }, {
            "name" : "stateChangeInitiator",
            "type" : [ "null", "string" ],
            "doc" : "AGENT/AGENTMANAGER/SYSTEM",
            "default" : null
          }, {
            "name" : "stateChangeReason",
            "type" : [ "null", "int" ],
            "doc" : "Reason for producing this event.\r\n              Can be one of the following:\r\n              * 1 - Connection state changed\r\n              * 2 - Agent state changed\r\n              * 3 - Snapshot of the current state - no change was done\r\n              * 4 - Agent is assigned to conversation\r\n              * 5 - Agent leaves conversation",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "SetAgentIntensityEvent",
          "doc" : "Information of Agent intensity change\r\n           This event contains two parts. First part contains the agent intensity as considered in routing. Second part is additional agent info.\r\n           Part1:\r\n           agentId - live engage id\r\n           groupId - agent group\r\n           maxSlots - agent num of slots. Indicates the optimal capacity as defined in AC\r\n           ringingSlots - how many conversations are now ringing for this agent\r\n           totalAssignedConvWeight - sum of agent's assigned conversation weight\r\n           agentBusySlots - how much slots are busy (convWeights + #rings)\r\n           agentIntensity - result of the following calculation\r\n                                                 if SmartCapacityON,  agentIntensity =  agentBusySlots/MaxSlots\r\n                                                 if SmartCapacityOFF agentIntensity =  agentBusySlots/1\r\n\r\n           Part2:\r\n           totalAssignedConversations - agent concurrency. number of agent's assigned conversations\r\n           activeAgentConversations - Number of active conversations (num of conversations which takes the agent attention).\r\n           pendingAgentConversations - number of conversations pending to agent response(sub set of ‘activeConversations’)\r\n           skillId - skill ids of current agent\r\n           agentState - agent current state - possible values: ONLINE/BACK_SOON/AWAY\r\n           agentConnectionState - agent current physical connection state - possible values: CONNECTED/DISCONNECTED/N/A\r\n           conversationsLoadRate - Same calculation for SmartCapacity ON and OFF :  conversationLoadRate  = totalAssignedConvWeight  / maxSlots\r\n           duringRampUp - indication true/ false if agent is during ramp up period.\r\n\r\n\r\n\r\n           Reason for producing this event:\r\n            1.      Reflect the agent intensity as considered by routing.\r\n            2.       Agent information for statistics and views.\r\n           Every X routing dispatching (configurable) - default : every 1 minute.\r\n           The event will be sent as part of the dispatch process  - dispatch of new rings to fit and available agents.\r\n           This process happens every 2 seconds. The event will be sent once every 1 minutes (or 30 dispatches).\r\n\r\n          *note: for now, this event is sent only when smart capacity is ON.",
          "fields" : [ {
            "name" : "agentId",
            "type" : "string",
            "doc" : "Live engage Id of the agent",
            "default" : ""
          }, {
            "name" : "groupId",
            "type" : "long",
            "doc" : "agent group id",
            "default" : -1
          }, {
            "name" : "maxSlots",
            "type" : [ "null", "long" ],
            "doc" : "agent num of slots - indicates optimal capacity as defined in AC",
            "default" : null
          }, {
            "name" : "ringingSlots",
            "type" : [ "null", "long" ],
            "doc" : "how many conversations are now ringing for this agent",
            "default" : null
          }, {
            "name" : "totalAssignedConvWeight",
            "type" : [ "null", "double" ],
            "doc" : "totalAssignedConvWeight - sum of agent's assigned conversation weight",
            "default" : null
          }, {
            "name" : "agentBusySlots",
            "type" : [ "null", "double" ],
            "doc" : "agent business - how much slots are busy (convWeights + #rings)",
            "default" : null
          }, {
            "name" : "agentIntensity",
            "type" : [ "null", "double" ],
            "doc" : "SmartCapacityOFF: intensity = ((totalAssignedConvWeight  + ringingSlots)   / 1)",
            "default" : null
          }, {
            "name" : "totalAssignedConversations",
            "type" : [ "null", "long" ],
            "doc" : "totalAssignedConversations - number of agent's assigned conversations",
            "default" : null
          }, {
            "name" : "activeConversations",
            "type" : [ "null", "long" ],
            "doc" : "Number of active conversations (num of conversations which takes the agent attention)",
            "default" : null
          }, {
            "name" : "pendingAgentConversations",
            "type" : [ "null", "long" ],
            "doc" : "Number of conversations pending to agent response (sub set of ‘activeConversations’)",
            "default" : null
          }, {
            "name" : "conversationsLoadRate",
            "type" : [ "null", "double" ],
            "doc" : "conversationLoadRate  = totalAssignedConvWeight  / maxSlots",
            "default" : null
          }, {
            "name" : "skillIds",
            "type" : [ "null", {
              "type" : "array",
              "items" : "string"
            } ],
            "doc" : "skill ids of current agent",
            "default" : null
          }, {
            "name" : "agentState",
            "type" : [ "null", "string" ],
            "doc" : "Agent current state on GUI - possible values: ONLINE/BACK_SOON/AWAY",
            "default" : null
          }, {
            "name" : "agentConnectionState",
            "type" : [ "null", "string" ],
            "doc" : "Agent device connectivity state - possible values: CONNECTED / DISCONNECTED / N/A",
            "default" : null
          }, {
            "name" : "busySlots",
            "type" : [ "null", "long" ],
            "doc" : "Depricated - cannot be long replaced by ‘agentBusySlots'",
            "default" : null
          }, {
            "name" : "duringRampUp",
            "type" : [ "null", "boolean" ],
            "doc" : "indication if agent is during ramp up period",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "MessagingQueueStateEvent",
          "doc" : "Information of Messaging Queue State Event\r\n\r\n                  skillId - the following statistics will be on this skill Id of brand.\r\n                  unassignedConversationsCount - count of unassigned conversations waiting in routing queue.\r\n                  unassignedConversationsAndFirstConsumerCount - count of unassigned conversations waiting in routing queue of first consumers.\r\n                  actionableConversationsCount - total count of 'Actionable' conversations from unassigned conversations waiting in routing queue.\r\n                  actionableAndConsumerLastMessageCount - total count of 'Actionable' conversations from unassigned conversations waiting in routing queue that had last message from consumer.\r\n                  actionableAndManualSlaCount - total count of 'Actionable' conversations from unassigned conversations waiting in routing queue that have manual SLA > 0.\r\n                  actionableAndDuringTransferCount  - total count of 'Actionable' conversations from unassigned conversations waiting in routing queue that had last event of transfer to skill.\r\n                  notActionableCount - total count of 'Not Actionable' conversations from unassigned conversations waiting in routing queue.\r\n                  notActionableDuringTransferCount - total count of 'Not Actionable' conversations from unassigned conversations waiting in routing queue that had last event of transfer to skill.\r\n                  totalConversationContextSourceDistribution - holds the distribution of unassigned conversations context.\r\n\r\n\r\n                  Reason for producing this event:  Reflect routing unassigned conversations statistics per skill.\r\n                  Will produced every 10 sec by default\r\n\r\n                 *note: for now, this event is sent only when configuration per brand in Houston site settings : messaging.queue.state.event.enable = true.",
          "fields" : [ {
            "name" : "skillId",
            "type" : [ "null", "long" ],
            "doc" : "Skill id",
            "default" : null
          }, {
            "name" : "unassignedConversationsCount",
            "type" : [ "null", "long" ],
            "doc" : "Count of unassigned conversations. per skill of brand",
            "default" : null
          }, {
            "name" : "unassignedConversationsAndFirstConsumerCount",
            "type" : [ "null", "long" ],
            "doc" : "Count of unassigned conversations of first consumers. per skill of brand",
            "default" : null
          }, {
            "name" : "actionableConversationsCount",
            "type" : [ "null", "long" ],
            "doc" : "Count of 'Actionable' conversations. per skill of brand",
            "default" : null
          }, {
            "name" : "actionableAndConsumerLastMessageCount",
            "type" : [ "null", "long" ],
            "doc" : "Count of 'Actionable' where consumer wrote the last message in the conversation. per skill of brand",
            "default" : null
          }, {
            "name" : "actionableAndManualSlaCount",
            "type" : [ "null", "long" ],
            "doc" : "Count of 'Actionable' where conversation have manual SLA. per skill of brand",
            "default" : null
          }, {
            "name" : "actionableAndDuringTransferCount",
            "type" : [ "null", "long" ],
            "doc" : "Count of 'Actionable' where conversation is 'During Transfer' (Transfer event to other skill was the last event on this conversation). per skill of brand",
            "default" : null
          }, {
            "name" : "notActionableCount",
            "type" : [ "null", "long" ],
            "doc" : "Count of 'Not Actionable'. per skill of brand",
            "default" : null
          }, {
            "name" : "notActionableDuringTransferCount",
            "type" : [ "null", "long" ],
            "doc" : "Count of 'Not Actionable' where conversation is 'During Transfer' (Transfer event to other skill was the last event on this conversation). per skill of brand",
            "default" : null
          }, {
            "name" : "totalConversationContextSourceDistribution",
            "type" : [ "null", {
              "type" : "array",
              "items" : {
                "type" : "record",
                "name" : "ConversationContextSourceDistribution",
                "doc" : "created when messaging queue state is active , hold statistics of total conversation context source distribution for every skill in event MessagingQueueStateEvent",
                "fields" : [ {
                  "name" : "sourceContext",
                  "type" : [ "null", "string" ],
                  "doc" : "the conversation context possible values : facebook_context , mobile_app_context , proactive_context ,  sms_context , custom_context",
                  "default" : null
                }, {
                  "name" : "count",
                  "type" : [ "null", "long" ],
                  "doc" : "the count per skill for sourceContext",
                  "default" : null
                } ]
              }
            } ],
            "doc" : "Holds the distribution of unassigned conversations context. per skill of brand",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "SetAgentRingResponseEvent",
          "doc" : "Information of every ring response\r\n         agentId - live engage id\r\n         agentGroup - agent group\r\n         consumerId - consumer id of current conversation\r\n         conversationId - conversation id\r\n         skillId - skill id of current conversation\r\n         remainingConversationTtr - remaining ttr in seconds for overdue conversation indication\r\n         ringExpirationInterval - expiration interval in seconds from ring configuration\r\n         ringId - unique id per ring\r\n         totalRingingTime - total ringing time since ring start in seconds\r\n         ringRejectCounter - number of rejects on current routing\r\n         isFirstRoutConversation - indicator if conversation is new\r\n         response - ring response result (accept/reject)\r\n\r\n         Reason for producing this event:\r\n         This event reports every ring response to answer questions like -\r\n         # Identify agents that have a tendency to \"refuse\" rings\r\n         # identify the time of day when agents are more likely to \"refuse\" rings\r\n         # identify the most \"busy\" skills\r\n         # track the \"ring flow\" of a specific conversation",
          "fields" : [ {
            "name" : "agentId",
            "type" : "string",
            "doc" : "Live engage Id of the agent",
            "default" : ""
          }, {
            "name" : "groupId",
            "type" : "long",
            "doc" : "agent group id",
            "default" : -1
          }, {
            "name" : "consumerId",
            "type" : "string",
            "doc" : "consumer id of current conversation",
            "default" : ""
          }, {
            "name" : "conversationId",
            "type" : "string",
            "doc" : "conversation id",
            "default" : ""
          }, {
            "name" : "skillId",
            "type" : "string",
            "doc" : "skill id of current conversation",
            "default" : "-1"
          }, {
            "name" : "remainingConversationTtr",
            "type" : "long",
            "doc" : "remaining ttr in seconds for overdue conversation indication",
            "default" : 0
          }, {
            "name" : "ringExpirationInterval",
            "type" : "long",
            "doc" : "expiration interval in seconds from ring configuration",
            "default" : 0
          }, {
            "name" : "ringId",
            "type" : "string",
            "doc" : "unique id per ring",
            "default" : ""
          }, {
            "name" : "totalRingingTime",
            "type" : "long",
            "doc" : "total ringing time since ring start in seconds",
            "default" : 0
          }, {
            "name" : "ringRejectCounter",
            "type" : "int",
            "doc" : "number of rejects on current routing (nullified on assigned conv)",
            "default" : 0
          }, {
            "name" : "isFirstRoutConversation",
            "type" : "boolean",
            "doc" : "indicator if conversation is new",
            "default" : true
          }, {
            "name" : "response",
            "type" : {
              "type" : "record",
              "name" : "RingResponse",
              "doc" : "Ring response",
              "fields" : [ {
                "name" : "responseResult",
                "type" : {
                  "type" : "enum",
                  "name" : "ResponseResult",
                  "doc" : "Ring response result",
                  "symbols" : [ "NA", "ACCEPT", "REJECT" ]
                },
                "default" : "NA"
              }, {
                "name" : "responseReason",
                "type" : "string",
                "default" : ""
              } ]
            },
            "doc" : "Ring response result can be accept or reject,\r\n               accept reason can be manual or auto (ACCEPT_MANUAL/ACCEPT_AUTO),\r\n               reject reason can be expiration or log out (REJECT_EXPIRATION/REJECT_LOGOUT)",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ConsumerActiveEvent",
          "doc" : "will be triggered when consumer becomes interactive in the conversation.",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "includes all fields relevant for the conversation",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "MessageStatusEvent",
          "doc" : "* Event Name: MessageStatusEvent\r\n     * Description: This event is being produced by UMS when a published message status changes.\r\n     * Producer: UMS\r\n     * Consumers list:\r\n     * When fired: When message is being accepted/read by a consumer\r\n     * Expected Event Scale: Chat scale\r\n     * Event category: Business\r\n     * Event scope: Consumer/Agent\r\n     * Eng. Attribute: No\r\n     * Deprecated: No",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          }, {
            "name" : "msgDetails",
            "type" : "MessageDetails",
            "doc" : "Meta data of the message",
            "default" : null
          }, {
            "name" : "messageDeliveryStatus",
            "type" : {
              "type" : "enum",
              "name" : "MessageStatusEnum",
              "doc" : "Possible message delivery statuses",
              "symbols" : [ "ACCEPT", "ACCESS", "NACK", "READ", "ACTION", "UNKNOWN" ]
            },
            "doc" : "deprecated",
            "default" : "UNKNOWN"
          }, {
            "name" : "messageDeliveryStatusField",
            "type" : [ "null", "string" ],
            "doc" : "the content type of the message , possible values :\r\n          ACCEPT, ACCESS, NACK, READ, ACTION ,UNKNOWN , VIEWED",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "EffectiveTtrEvent",
          "doc" : "Event indicating change in effective TTR (Time To Respond).\r\n    Triggered by an agent to report changes of TTR per conversation.\r\n    Produced by UMS\r\n    Scale: few times per chat",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          }, {
            "name" : "effectiveTtr",
            "type" : "long",
            "doc" : "Current effective time to respond - timestamp",
            "default" : 0
          }, {
            "name" : "ttr",
            "type" : "long",
            "doc" : "Current TTR value in second",
            "default" : 0
          }, {
            "name" : "delay",
            "type" : "long",
            "doc" : "Current delay time in agent response due to off hours.\r\n        A timestamp indicating when the delay is going to stopped and agent resume working",
            "default" : 0
          }, {
            "name" : "manualTtr",
            "type" : "long",
            "doc" : "Manual TTR (timestamp). If manual TTR is set by an agent, it will always be taken\r\n        into account instead of a calculated one.",
            "default" : 0
          }, {
            "name" : "lastUnrespondedTimestamp",
            "type" : "long",
            "doc" : "Time of last msg from consumer or Agent,\r\n        For example if consumer send messages 1,2,3 without reply,\r\n        lastUnrespondedTimestamp will be the time of message 1",
            "default" : 0
          } ]
        }, {
          "type" : "record",
          "name" : "UpdateTtrEvent",
          "doc" : "Event indicates the change in TTR definition (Time To Respond) for a specific conversation.\r\n   Can be triggered by a consumer or an agent:\r\n   Consumer can change only to URGENT\r\n   Agent could be assigned agent or agent manager\r\n   Produced by UMS\r\n   Chat scale",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation, including the originatorId",
            "default" : null
          }, {
            "name" : "currentTTRType",
            "type" : "string",
            "doc" : "Current TTR.\r\n        Can be one of the following: NA, CUSTOM, NORMAL, PRIORITIZED, URGENT",
            "default" : ""
          }, {
            "name" : "currentTTRValue",
            "type" : "long",
            "doc" : "Current Time to Respond in seconds",
            "default" : 0
          }, {
            "name" : "prevTTRType",
            "type" : [ "null", "string" ],
            "doc" : "Previous TTR type\r\n        Can be one of the following: NA, CUSTOM, NORMAL, PRIORITIZED, URGENT",
            "default" : null
          }, {
            "name" : "prevTTRValue",
            "type" : [ "null", "long" ],
            "doc" : "Previous Time to Respond in seconds",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "UpdateDelayEvent",
          "doc" : "* Event indicates the change in Delay definition, due to off hours, for a specific conversation.\r\n     * Can be triggered by an agent, either the assigned agent or the agent manager\r\n     * Produced by UMS\r\n     * Chat scale",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation, including the originatorId",
            "default" : null
          }, {
            "name" : "state",
            "type" : "string",
            "doc" : "Delay state type.\r\n        Can be one of the following: NEW, UPDATE, DELETE",
            "default" : ""
          }, {
            "name" : "currentDelayType",
            "type" : [ "null", "string" ],
            "doc" : "Current Delay type.\r\n        Can be one of the following: NIGHT,WEEKEND,HOLIDAY",
            "default" : null
          }, {
            "name" : "currentDelayValue",
            "type" : [ "null", "long" ],
            "doc" : "Current Delay time in seconds",
            "default" : null
          }, {
            "name" : "prevDelayType",
            "type" : [ "null", "string" ],
            "doc" : "Previous Delay type\r\n        Can be one of the following: NIGHT,WEEKEND,HOLIDAY",
            "default" : null
          }, {
            "name" : "prevDelayValue",
            "type" : [ "null", "long" ],
            "doc" : "Previous Delay time in seconds",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "UpdateManualEttrEvent",
          "doc" : "Event indicates the change in ETTR (Effective Time To Respond) timestamp.\r\n   Can be triggered by an agent, either the assigned agent or the agent manager\r\n   Produced by UMS\r\n   Chat scale",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          }, {
            "name" : "state",
            "type" : "string",
            "doc" : "state type.\r\n        Can be one of the following: NEW, DELETE",
            "default" : ""
          }, {
            "name" : "manualEttr",
            "type" : [ "null", "long" ],
            "doc" : "effective ettr timestamp",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "LimitReachedEvent",
          "doc" : "UMS sends this event if request or connection was rejected due to some limit reached.\r\n     Meanwhile could be:\r\n     - ConnectionsLimit - if maximum number of connections of specific type was reached,\r\n     - RequestsRateLimit - if number of requests per second allow was reached\r\n     - OpenedConversationsLimit - if total number of opened conversation is reached maximum allowed",
          "fields" : [ {
            "name" : "resolution",
            "type" : "string",
            "doc" : "Resolution of rejection = the scale of limitation ( on WHICH LEVEL the limitation reached )\r\n        Can be:\r\n        - \"connection\" - per single connection\r\n        - \"brand\" - per brand (account / site)\r\n        - \"system\" - per server",
            "default" : ""
          }, {
            "name" : "reason",
            "type" : "string",
            "doc" : "Reason of rejection = limit of WHAT was reached\r\n        Can be:\r\n        - \"OpenedConversationsLimit\" - opened conversations\r\n        - \"ConnectionsLimit\" - opened connections\r\n        - \"RequestsRateLimit\" - requests per defined period of time (per second by default)",
            "default" : ""
          }, {
            "name" : "requestRateLimit",
            "type" : [ "null", {
              "type" : "record",
              "name" : "RequestsRateLimit",
              "doc" : "One of the descriptions for LimitReachedEvent\r\n    If request is rejected, because the rate limit (requests per defined period of time (per second by default)) was reached",
              "fields" : [ {
                "name" : "rejectedRequestType",
                "type" : [ "null", "string" ],
                "doc" : "Type of the request which was rejected",
                "default" : null
              }, {
                "name" : "conversationId",
                "type" : [ "null", "string" ],
                "doc" : "Conversation ID (not all requests related to Conversation => can be null)",
                "default" : null
              } ]
            } ],
            "doc" : "If request is rejected, because the rate limit (requests per defined period of time) was reached",
            "default" : null
          }, {
            "name" : "connectionsLimit",
            "type" : [ "null", {
              "type" : "record",
              "name" : "ConnectionsLimit",
              "doc" : "One of the descriptions for LimitReachedEvent\r\n    If connection is rejected, because the number of allowed connections was reached",
              "fields" : [ {
                "name" : "currentBrandConnectionCount",
                "type" : "long",
                "doc" : "Current number of connection of specific userType to the brand",
                "default" : -1
              }, {
                "name" : "currentSystemConnectionCount",
                "type" : "long",
                "doc" : "Current number of connection to the server",
                "default" : -1
              } ]
            } ],
            "doc" : "If connection is rejected, because the number of allowed connections was reached",
            "default" : null
          }, {
            "name" : "openedConversationsLimit",
            "type" : [ "null", {
              "type" : "record",
              "name" : "OpenedConversationsLimit",
              "doc" : "One of the descriptions for LimitReachedEvent\r\n    If conversation request is rejected, because there are too many opened conversations",
              "fields" : [ {
                "name" : "currentNumberOfOpenedConversations",
                "type" : "long",
                "doc" : "Number of currently opened conversations",
                "default" : -1
              } ]
            } ],
            "doc" : "If conversation request is rejected, because there are too many opened conversations",
            "default" : null
          } ]
        }, "UserAuthenticationEvent", {
          "type" : "record",
          "name" : "PDTopologyAuditingEvent",
          "doc" : "* Event Name: PDTopologyAuditingEvent\n        *\n        * Description: This LE 2.0 event is produced by PD Algo Server (PD Topology). This event is being sent to hadoop for debugging and monitoring purposes.\n        *              This event replace the use of couchbase as the PD monitoring source.\n        *              As a result of joining PD topology calculation bolts, and decreasing the couchbase writing,\n        *              this event is necessary for keeping PD calculations audited in the system.\n        *\n        * Producer: PD Algo Server (PD Topology) - AuditBolt\n        * Consumers list:  Intelligence team, for debugging purposes & monitoring efforts.\n        * When fired:\n        *            In order to write the event at times & accounts that matter most,\n        *            the event will be written mostly at working hours, and large accounts.\n        *            Event trigger cases:\n        *            If (total slots > threshold) or if account is in white-list, the events will be written every 2 sec.\n        *            If (threshold >= total slots >=1), the events will be written every 1 minute.\n        *            If there are no agents online  - Every 10 minutes.\n        * Expected Event Scale:\n        *            #events per sec estimation: ~920 events per second.\n        *            ~80 million events per day.\n        *            Per month the event volume is: ~0.9T in hadoop.\n        *            Events retention is 3 months.\n        * Event category : System (for internal usage)\n        * Event scope: Global\n        * Eng. Attribute: No\n        * Deprecated : No",
          "fields" : [ {
            "name" : "skillData",
            "type" : {
              "type" : "record",
              "name" : "SkillData",
              "doc" : "All calculations, and their inputs in the scope of channel and skill",
              "fields" : [ {
                "name" : "queueData",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "QueueData",
                  "doc" : "This object contains the metrics represent the current queue state as saved in PD topology",
                  "fields" : [ {
                    "name" : "skillId",
                    "type" : "long",
                    "doc" : "The skill unique identifier",
                    "default" : -1
                  }, {
                    "name" : "channel",
                    "type" : "int",
                    "doc" : "Chat(= 1), Voice",
                    "default" : -1
                  }, {
                    "name" : "availableSlots",
                    "type" : "int",
                    "doc" : "Count of all agents' slots not occupied by a chat, in this specific skill\\chat-center.\n        This is the number of chats can be received by the agents in the specific moment (calculated in Appserver)",
                    "default" : -1
                  }, {
                    "name" : "totalSlots",
                    "type" : "int",
                    "doc" : "Total capacity configured for all agents in this specific skill\\chat-center (calculated in Appserver)",
                    "default" : -1
                  }, {
                    "name" : "isRepOnline",
                    "type" : "boolean",
                    "doc" : "This boolean is true if total slots > 0, in this specific skill\\chat-center (calculated in Appserver)",
                    "default" : false
                  }, {
                    "name" : "maxWaitTime",
                    "type" : "int",
                    "doc" : "The max average wait time in queue configured for the skill",
                    "default" : -1
                  }, {
                    "name" : "currentQueueSize",
                    "type" : "int",
                    "doc" : "The current number of waiting visitors in the chat queue of this skill\\chat-center (calculated in Appserver)",
                    "default" : -1
                  }, {
                    "name" : "timestamp",
                    "type" : "long",
                    "doc" : "The time in millies which the ChannelQueueEvent has updated ChannelQueueData in PD topology",
                    "default" : -1
                  } ]
                } ],
                "doc" : "Contains all metrics that indicated the skill's queue state",
                "default" : null
              }, {
                "name" : "emaCalculations",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "EMACalculations",
                  "doc" : "All Exponential Moving Averages which are being calculated according to relevant LE events\n      These EMAs are being used in the internal calculations such as QueueOffset, QueueThroughput etc.",
                  "fields" : [ {
                    "name" : "availabilityCheckEMA",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "AvailabilityCheckEMA",
                      "doc" : "Calculated according to AvailabilityCheckEvent produced by PD sharklet",
                      "fields" : [ {
                        "name" : "availabilityCheckEMACollection",
                        "type" : [ "null", {
                          "type" : "array",
                          "items" : {
                            "type" : "record",
                            "name" : "EMACalculation",
                            "doc" : "This object represents a general, single EMA calculation. It is used to describe all EMAs kinds",
                            "fields" : [ {
                              "name" : "halfLife",
                              "type" : "long",
                              "doc" : "The time required for an EMA property value to decrease by half",
                              "default" : -1
                            }, {
                              "name" : "emaCounterE",
                              "type" : "double",
                              "doc" : "Rate of events being processed by this EMA",
                              "default" : -1
                            }, {
                              "name" : "n",
                              "type" : "long",
                              "doc" : "Number of elements (events) being counted for this EMA",
                              "default" : -1
                            } ]
                          }
                        } ],
                        "doc" : "When using regular single EMA this array will contain only one EMA calculation element\n         When using MultipleEMA this array will contain EMA calculation element for each configured halflife\n         When no EMAs are calculated, this array will be empty.",
                        "default" : null
                      } ]
                    } ],
                    "doc" : "Calculated according to AvailabilityCheckEvent produced by PD sharklet",
                    "default" : null
                  }, {
                    "name" : "availabilityGrantedEMA",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "AvailabilityGrantedEMA",
                      "doc" : "Calculated according to AvailabilityCheckEvent produced by PD sharklet",
                      "fields" : [ {
                        "name" : "availabilityGrantedEMACollection",
                        "type" : [ "null", {
                          "type" : "array",
                          "items" : "EMACalculation"
                        } ],
                        "doc" : "When using regular single EMA this array will contain only one EMA calculation element\n         When using MultipleEMA this array will contain EMA calculation element for each configured halflife\n         When no EMAs are calculated, this array will be empty.",
                        "default" : null
                      } ]
                    } ],
                    "doc" : "Calculated according to AvailabilityCheckEvent produced by PD sharklet",
                    "default" : null
                  }, {
                    "name" : "impressionShowEMA",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "ImpressionShowEMA",
                      "doc" : "Calculated according to ImpressionShowEvent produced by Shark",
                      "fields" : [ {
                        "name" : "impressionShowEMACollection",
                        "type" : [ "null", {
                          "type" : "array",
                          "items" : "EMACalculation"
                        } ],
                        "doc" : "When using regular single EMA this array will contain only one EMA calculation element\n           When using MultipleEMA this array will contain EMA calculation element for each configured halflife\n           When no EMAs are calculated, this array will be empty.",
                        "default" : null
                      } ]
                    } ],
                    "doc" : "Calculated according to ImpressionShowEvent produced by Shark",
                    "default" : null
                  }, {
                    "name" : "impressionAcceptEMA",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "ImpressionAcceptEMA",
                      "doc" : "Calculated according to ImpressionAcceptEvent produced by Shark",
                      "fields" : [ {
                        "name" : "impressionAcceptEMACollection",
                        "type" : [ "null", {
                          "type" : "array",
                          "items" : "EMACalculation"
                        } ],
                        "doc" : "When using regular single EMA this array will contain only one EMA calculation element\n           When using MultipleEMA this array will contain EMA calculation element for each configured halflife\n           When no EMAs are calculated, this array will be empty.",
                        "default" : null
                      } ]
                    } ],
                    "doc" : "Calculated according to ImpressionAcceptEvent produced by Shark",
                    "default" : null
                  }, {
                    "name" : "engagementStartEMA",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "EngagementStartEMA",
                      "doc" : "Calculated according to EngagementStartEvent produced by Appserver",
                      "fields" : [ {
                        "name" : "engagementStartEMACollection",
                        "type" : [ "null", {
                          "type" : "array",
                          "items" : "EMACalculation"
                        } ],
                        "doc" : "When using regular single EMA this array will contain only one EMA calculation element\n            When using MultipleEMA this array will contain EMA calculation element for each configured halflife\n            When no EMAs are calculated, this array will be empty.",
                        "default" : null
                      } ]
                    } ],
                    "doc" : "Calculated according to EngagementStartEvent produced by Appserver",
                    "default" : null
                  }, {
                    "name" : "engagementEndEMA",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "EngagementEndEMA",
                      "doc" : "Calculated according to EngagementEndEvent produced by Appserver",
                      "fields" : [ {
                        "name" : "engagementEndEMACollection",
                        "type" : [ "null", {
                          "type" : "array",
                          "items" : "EMACalculation"
                        } ],
                        "doc" : "When using regular single EMA this array will contain only one EMA calculation element\n           When using MultipleEMA this array will contain EMA calculation element for each configured halflife\n           When no EMAs are calculated, this array will be empty.",
                        "default" : null
                      } ]
                    } ],
                    "doc" : "Calculated according to EngagementEndEvent produced by Appserver",
                    "default" : null
                  } ]
                } ],
                "doc" : "Contains all EMAs current state",
                "default" : null
              }, {
                "name" : "internalCalculations",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "InternalCalculations",
                  "doc" : "All sub calculations that are being executed in PD topology's calculations bolt. These calculations are being used\n     for calculating the final request percentages (throughput and offset)",
                  "fields" : [ {
                    "name" : "displayRate",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "DisplayRate",
                      "doc" : "Percentage of AvailabilityGranted events converted to ImpressionShow events",
                      "fields" : [ {
                        "name" : "displayRateValue",
                        "type" : "double",
                        "doc" : "The calculated data result",
                        "default" : -1
                      }, {
                        "name" : "halfLife",
                        "type" : "long",
                        "doc" : "The chosen half life, used for AvailabilityGranted and ImpressionShow EMAs selection",
                        "default" : -1
                      }, {
                        "name" : "timestamp",
                        "type" : "long",
                        "doc" : "AcceptanceRate calculation execution time in millies",
                        "default" : -1
                      } ]
                    } ],
                    "doc" : "Object that contains the display rate calculation result, the calculation time and the chosen halflife\n            (the right AvailabilityGrantedEMA and ImpressionShowEMA are used according to this half life)",
                    "default" : null
                  }, {
                    "name" : "acceptanceRate",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "AcceptanceRate",
                      "doc" : "Percentage of ImpressionShow events converted to ImpressionAccept events",
                      "fields" : [ {
                        "name" : "acceptanceRateValue",
                        "type" : "double",
                        "doc" : "The calculated data result",
                        "default" : -1
                      }, {
                        "name" : "halfLife",
                        "type" : "long",
                        "doc" : "The chosen half life, used for ImpressionShow and ImpressionAccept EMAs selection",
                        "default" : -1
                      }, {
                        "name" : "timestamp",
                        "type" : "long",
                        "doc" : "AcceptanceRate calculation execution time in millies",
                        "default" : -1
                      } ]
                    } ],
                    "doc" : "Object that contains the acceptance rate calculation result, the calculation time and the chosen halflife\n            (the right ImpressionShowEMA and ImpressionAcceptEMA are used according to this half life)",
                    "default" : null
                  }, {
                    "name" : "connectionRate",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "ConnectionRate",
                      "doc" : "Percentage of ImpressionAccept events converted to EngagementStart events",
                      "fields" : [ {
                        "name" : "connectionRateValue",
                        "type" : "double",
                        "doc" : "The calculated data result",
                        "default" : -1
                      }, {
                        "name" : "halfLife",
                        "type" : "long",
                        "doc" : "The chosen half life, used for ImpressionAccept and EngagementStart EMAs selection",
                        "default" : -1
                      }, {
                        "name" : "timestamp",
                        "type" : "long",
                        "doc" : "ConnectionRate calculation execution time in millies",
                        "default" : -1
                      } ]
                    } ],
                    "doc" : "Object that contains the connection rate calculation result, the calculation time and the chosen halflife\n            (the right ImpressionAcceptEMA and EngagementStartEMA are used according to this half life)",
                    "default" : null
                  }, {
                    "name" : "targetQueueSize",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "TargetQueueSize",
                      "doc" : "The target queue size for the next planning time interval",
                      "fields" : [ {
                        "name" : "targetQueueSizeForSLA",
                        "type" : "double",
                        "doc" : "The target queue size that promises to keep the queue maximum wait time to be equal to the\n           maxWaitTime skill configuration",
                        "default" : -1
                      }, {
                        "name" : "targetQueueSizeForRepUtil",
                        "type" : "double",
                        "doc" : "The minimal queue size for which we can handle sudden unexpected changes in throughput",
                        "default" : -1
                      }, {
                        "name" : "targetQueueSizeValue",
                        "type" : "double",
                        "doc" : "The calculated data result",
                        "default" : -1
                      }, {
                        "name" : "halfLife",
                        "type" : "long",
                        "doc" : "The chosen half life, used for EngagementEndEMA selection",
                        "default" : -1
                      }, {
                        "name" : "timestamp",
                        "type" : "long",
                        "doc" : "TargetQueueSize calculation execution time in millies",
                        "default" : -1
                      } ]
                    } ],
                    "doc" : "Object that contains the target queue size calculation result, the calculation time and the chosen halflife\n           (the right EngagementEndEMA is used according to this half life)",
                    "default" : null
                  }, {
                    "name" : "queueThroughput",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "QueueThroughput",
                      "doc" : "Rate of chat endings per second (visitors off the queue per second)",
                      "fields" : [ {
                        "name" : "queueThroughputValue",
                        "type" : "double",
                        "doc" : "The calculated data result",
                        "default" : -1
                      }, {
                        "name" : "halfLife",
                        "type" : "long",
                        "doc" : "The chosen half life, used for EngagementEndEMA selection",
                        "default" : -1
                      }, {
                        "name" : "timestamp",
                        "type" : "long",
                        "doc" : "QueueThroughput calculation execution time in millies",
                        "default" : -1
                      } ]
                    } ],
                    "doc" : "Object that contains the queue throughput calculation result, the calculation time and the chosen halflife\n           (the right EngagementEndEMA is used according to this half life)",
                    "default" : null
                  }, {
                    "name" : "queueOffset",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "QueueOffset",
                      "doc" : "The difference between current queue size and target queue size (can be negative)",
                      "fields" : [ {
                        "name" : "queueOffsetValue",
                        "type" : "double",
                        "doc" : "The calculated data result",
                        "default" : -1
                      }, {
                        "name" : "timestamp",
                        "type" : "long",
                        "doc" : "QueueOffset calculation execution time in millies",
                        "default" : -1
                      } ]
                    } ],
                    "doc" : "Object that contains the queue offset calculation result, the calculation time and the chosen halflife\n            (the right EngagementEndEMA for targetQueueSize calculation is used according to this half life)",
                    "default" : null
                  }, {
                    "name" : "impressionThroughput",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "ImpressionThroughput",
                      "doc" : "Rate of engagements that should be displayed in order to support the current queueThroughput",
                      "fields" : [ {
                        "name" : "impressionThroughputValue",
                        "type" : "double",
                        "doc" : "The calculated data result",
                        "default" : -1
                      }, {
                        "name" : "timestamp",
                        "type" : "long",
                        "doc" : "ImpressionThroughput calculation execution time in millies",
                        "default" : -1
                      } ]
                    } ],
                    "doc" : "Object that contains the impressionThroughput calculation result ant it's calculation time",
                    "default" : null
                  }, {
                    "name" : "impressionOffset",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "ImpressionOffset",
                      "doc" : "Number of engagements that should be displayed in order to support the current queueOffset",
                      "fields" : [ {
                        "name" : "impressionOffsetValue",
                        "type" : "double",
                        "doc" : "The calculated data result",
                        "default" : -1
                      }, {
                        "name" : "timestamp",
                        "type" : "long",
                        "doc" : "ImpressionOffset calculation execution time in millies",
                        "default" : -1
                      } ]
                    } ],
                    "doc" : "Object that contains the impressionOffset calculation result ant it's calculation time",
                    "default" : null
                  } ]
                } ],
                "doc" : "Contains all sub calculations that were used in the final percentages calculation",
                "default" : null
              }, {
                "name" : "pdOutput",
                "type" : [ "null", {
                  "type" : "record",
                  "name" : "PDOutput",
                  "doc" : "This is the final calculation results of PD algo server for skill.\n     *  these calculations will be used by pd sharklet and the decider sharklet\n     *  to make a decision regarding the number of visitors to invite to chat",
                  "fields" : [ {
                    "name" : "throughputPercentage",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "ThroughputPercentage",
                      "doc" : "Percentage per second of visitors that should be displayed with an engagement in order to support current queue throughput",
                      "fields" : [ {
                        "name" : "throughputPercentageValue",
                        "type" : "double",
                        "doc" : "The calculated data result",
                        "default" : -1
                      }, {
                        "name" : "expectedWaitTimeSec",
                        "type" : "int",
                        "doc" : "The estimated average wait time for a visitor in the queue. If there are no agents online in the relevant scope, the value will be 999,999.\n             If there are agents online and there are available slots, the value will be 0.\n             In any other case, maximum possible value is 86,400.",
                        "default" : -1
                      }, {
                        "name" : "expectedWaitTimeHalfLife",
                        "type" : "long",
                        "doc" : "The halfLife of the EMA chosen to calculate the expectedWaitTimeSec value.",
                        "default" : -1
                      }, {
                        "name" : "queueThroughput",
                        "type" : "double",
                        "doc" : "The queue throughput calculated during estimated wait time calculation.",
                        "default" : -1
                      }, {
                        "name" : "calculationMode",
                        "type" : "int",
                        "doc" : "(0) Standard Mode - All the necessary input for the throughput calculation exists and fresh\n             (1) ChatServer Mode - Some of the throughput calculation input is missing or too old,\n             channelQueueData exists and fresh (calculation in this mode use only queue data)",
                        "default" : -1
                      }, {
                        "name" : "timestamp",
                        "type" : "long",
                        "doc" : "Throughput percentage calculation execution time in millies",
                        "default" : -1
                      } ]
                    } ],
                    "doc" : "This object contains the throughput calculation result and some supportive data to understand better this result and it's timing",
                    "default" : null
                  }, {
                    "name" : "offsetPercentage",
                    "type" : [ "null", {
                      "type" : "record",
                      "name" : "OffsetPercentage",
                      "doc" : "Percentage per second of visitors that should be displayed with an engagement in order to achieve current queue offset",
                      "fields" : [ {
                        "name" : "offsetPercentageValue",
                        "type" : "double",
                        "doc" : "The calculated data result",
                        "default" : -1
                      }, {
                        "name" : "offsetPercentageFactor",
                        "type" : "double",
                        "doc" : "A fixed factor that controls the offset percentage value after it's being calculated",
                        "default" : -1
                      }, {
                        "name" : "calculationMode",
                        "type" : "int",
                        "doc" : "(0) default, in case of missing or incorrect data\n             (1) Standard Mode - All the necessary input for the offset calculation exists and fresh\n             (2) ChatServer Mode - Some of the offset calculation input is missing or too old,\n             channelQueueData exists and fresh (calculation in this mode use only queue data)",
                        "default" : -1
                      }, {
                        "name" : "timestamp",
                        "type" : "long",
                        "doc" : "Offset percentage calculation execution time in millies",
                        "default" : -1
                      } ]
                    } ],
                    "doc" : "This object contains the offset calculation result and some supportive data to understand better this result and it's timing",
                    "default" : null
                  } ]
                } ],
                "doc" : "The final calculations results, mainly offset and throughput percentages",
                "default" : null
              } ]
            },
            "doc" : "This object contains all the PD topology calculations in a skill scope",
            "default" : null
          }, {
            "name" : "chatCentersData",
            "type" : [ "null", {
              "type" : "record",
              "name" : "ChatCentersData",
              "doc" : "A collection of all chat centers' pd topology data (All calculations, and their inputs in the scope of a account, skill and a specific chat center)",
              "fields" : [ {
                "name" : "chatCenterDataCollection",
                "type" : {
                  "type" : "array",
                  "items" : {
                    "type" : "record",
                    "name" : "ChatCenterData",
                    "doc" : "All calculations, and their inputs in the scope of a account, skill and a specific chat center",
                    "fields" : [ {
                      "name" : "chatCenterId",
                      "type" : "long",
                      "doc" : "The chat center unique identifier",
                      "default" : -1
                    }, {
                      "name" : "queueData",
                      "type" : [ "null", "QueueData" ],
                      "doc" : "Contains all metrics that indicated the chat center's queue state",
                      "default" : null
                    }, {
                      "name" : "emaCalculations",
                      "type" : [ "null", "EMACalculations" ],
                      "doc" : "Contains all EMAs' current state",
                      "default" : null
                    }, {
                      "name" : "pdOutput",
                      "type" : [ "null", {
                        "type" : "record",
                        "name" : "ChatCenterPDOutput",
                        "doc" : "This is the final calculation results of PD algo server for chat center.\n     *  these calculations will be used by pd sharklet and the decider sharklet\n     *  to make a decision regarding the number of visitors to invite to chat",
                        "fields" : [ {
                          "name" : "expectedWaitTimeData",
                          "type" : [ "null", {
                            "type" : "record",
                            "name" : "ExpectedWaitTimeData",
                            "doc" : "This is an object contains the expected wait time data (currently being used only for chat center expected wait time data)\n     * It is being calculated by engagement end EMA (throughput) and queue data. Currently it is being used by the chat centers cascading functionality\n     * in Appserver.",
                            "fields" : [ {
                              "name" : "expectedWaitTimeSec",
                              "type" : "int",
                              "doc" : "The estimated average wait time for a visitor in the queue. If there are no agents online in the relevant scope, the value will be 999,999.\n            If there are agents online and there are available slots, the value will be 0.\n            In any other case, maximum possible value is 86,400.",
                              "default" : -1
                            }, {
                              "name" : "halfLife",
                              "type" : "long",
                              "doc" : "The halfLife of the EMA chosen to calculate the expectedWaitTimeSec value.",
                              "default" : -1
                            }, {
                              "name" : "queueThroughput",
                              "type" : "double",
                              "doc" : "The queue throughput calculated during estimated wait time calculation.",
                              "default" : -1
                            } ]
                          } ],
                          "doc" : "This object contains the expected wait time data calculated for a chat center by throughput, and queue data",
                          "default" : null
                        } ]
                      } ],
                      "doc" : "The final calculations results for chat center",
                      "default" : null
                    } ]
                  }
                },
                "doc" : "This collection contains all the PD topology calculations for each chat center of the event's skill",
                "default" : null
              } ]
            } ],
            "doc" : "This object contains all the PD topology calculations in a chat center scope, for each chat center of the event's skill",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ConversationContinuityEvent",
          "doc" : "* Event name      : ConversationContinuityEvent\n     * Description     : This event is fired by shark when conversation exists for visitor and instead of showing new impression visitor will continue the existing conversation.\n     * Producer/Owner  : Shark monitoring platform\n     * Consumers list  : Reporting\n     * When fired      : when shark identify open conversation for this customer Id and sends message to visitor (can be on every page in the session)\n     * Event scale     : Chat\n     * Event category  : System\n     * Event scope     : Visitor\n     * Eng. attribute  : no\n     * Comments        :\n     * Deprecated      : no",
          "fields" : [ {
            "name" : "campaignId",
            "type" : [ "null", "long" ],
            "doc" : "Original campaign Id that the conversation has stared with",
            "default" : null
          }, {
            "name" : "engagementId",
            "type" : [ "null", "long" ],
            "doc" : "Original engagement Id that the conversation has stared with",
            "default" : null
          }, {
            "name" : "conversationId",
            "type" : [ "null", "string" ],
            "doc" : "conversation id as reported in visit manager",
            "default" : null
          }, {
            "name" : "consumerId",
            "type" : [ "null", "string" ],
            "doc" : "consumer Id (customer id) of the current visitor",
            "default" : null
          }, {
            "name" : "pageContext",
            "type" : [ "null", "string" ],
            "doc" : "The page where the message to visitor has been sent",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ConversationArchiveEvent",
          "doc" : "Event indicates archiving of a conversation.\r\n      Indicates that a conversation will be deleted from UMS application DB (CB)\r\n      Produced by UMS\r\n      Chat scale",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          } ]
        }, {
          "type" : "record",
          "name" : "ConversationSummaryEvent",
          "doc" : "Event indicates the change in Note.\r\n      Can be triggered by an agent, either the assigned agent or the agent manager\r\n      Produced by UMS\r\n      Chat scale",
          "fields" : [ {
            "name" : "convDetails",
            "type" : "ConversationDetails",
            "doc" : "include all fields relevant for the conversation",
            "default" : null
          }, {
            "name" : "note",
            "type" : [ "null", "string" ],
            "doc" : "Note - Agent's summary report, can be null.\r\n             There's a property in UMS to configure the max length of note.",
            "default" : null
          } ]
        } ],
        "doc" : "deprecated 25.7.16 - the event was never used use ImpressionExpandedEvent",
        "default" : null
      } ]
    },
    "doc" : "The event body",
    "default" : null
  } ]
}
